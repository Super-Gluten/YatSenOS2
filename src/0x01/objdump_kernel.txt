
target/x86_64-unknown-none/release-with-debug/ysos_kernel:     file format elf64-x86-64


Disassembly of section .text:

ffffff0000002000 <ysos_kernel::kernel_main>:
ysos_kernel::kernel_main:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/main.rs:12
use core::arch::asm;
use ysos_kernel as ysos;

boot::entry_point!(kernel_main);

pub fn kernel_main(boot_info: &'static boot::BootInfo) -> ! {
ffffff0000002000:	55                   	push   %rbp
ffffff0000002001:	41 57                	push   %r15
ffffff0000002003:	41 56                	push   %r14
ffffff0000002005:	41 55                	push   %r13
ffffff0000002007:	41 54                	push   %r12
ffffff0000002009:	53                   	push   %rbx
ffffff000000200a:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/main.rs:13
    ysos::init(boot_info);
ffffff0000002011:	e8 6a 0a 00 00       	call   ffffff0000002a80 <ysos_kernel::init>
ffffff0000002016:	4c 8d 64 24 70       	lea    0x70(%rsp),%r12
ffffff000000201b:	4c 8b 2d de 4f 00 00 	mov    0x4fde(%rip),%r13        # ffffff0000007000 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa18>
ffffff0000002022:	48 8d 2d 0a e0 ff ff 	lea    -0x1ff6(%rip),%rbp        # ffffff0000000033 <KERNEL_BEGIN+0x33>
ffffff0000002029:	48 8d 1d d0 3f 00 00 	lea    0x3fd0(%rip),%rbx        # ffffff0000006000 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x730>
ffffff0000002030:	4c 8d 74 24 07       	lea    0x7(%rsp),%r14
ffffff0000002035:	4c 8d 7c 24 08       	lea    0x8(%rsp),%r15
core::sync::atomic::atomic_load:
ffffff000000203a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3735
#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    // SAFETY: the caller must uphold the safety contract for `atomic_load`.
    unsafe {
        match order {
            Relaxed => intrinsics::atomic_load_relaxed(dst),
ffffff0000002040:	49 8b 45 00          	mov    0x0(%r13),%rax
core::cmp::Ordering::is_le:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs:503
    #[inline]
    #[must_use]
    #[rustc_const_stable(feature = "ordering_helpers", since = "1.53.0")]
    #[stable(feature = "ordering_helpers", since = "1.53.0")]
    pub const fn is_le(self) -> bool {
        self.as_raw() <= 0
ffffff0000002044:	48 83 f8 03          	cmp    $0x3,%rax
ysos_kernel::kernel_main:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/main.rs:16

    loop {
        info!("Hello World from YatSenOS v2!");
ffffff0000002048:	0f 82 96 00 00 00    	jb     ffffff00000020e4 <ysos_kernel::kernel_main+0xe4>
ffffff000000204e:	48 8d 3d bb 3f 00 00 	lea    0x3fbb(%rip),%rdi        # ffffff0000006010 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x740>
ffffff0000002055:	e8 c6 0d 00 00       	call   ffffff0000002e20 <log::__private_api::loc>
core::panic::location::Location::file:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:130
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    #[rustc_const_stable(feature = "const_location_fields", since = "1.79.0")]
    #[inline]
    pub const fn file(&self) -> &str {
        self.file
ffffff000000205a:	48 8b 08             	mov    (%rax),%rcx
ffffff000000205d:	48 8b 50 08          	mov    0x8(%rax),%rdx
core::panic::location::Location::line:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:155
    #[must_use]
    #[stable(feature = "panic_hooks", since = "1.10.0")]
    #[rustc_const_stable(feature = "const_location_fields", since = "1.79.0")]
    #[inline]
    pub const fn line(&self) -> u32 {
        self.line
ffffff0000002061:	8b 40 10             	mov    0x10(%rax),%eax
<log::Record as core::clone::Clone>::clone:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:766
/// [method.log]: trait.Log.html#tymethod.log
/// [`Log`]: trait.Log.html
/// [`log!`]: macro.log.html
/// [`level()`]: struct.Record.html#method.level
/// [`target()`]: struct.Record.html#method.target
#[derive(Clone, Debug)]
ffffff0000002064:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
ffffff000000206b:	00 00 
ffffff000000206d:	48 89 6c 24 40       	mov    %rbp,0x40(%rsp)
ffffff0000002072:	48 c7 44 24 48 0b 00 	movq   $0xb,0x48(%rsp)
ffffff0000002079:	00 00 
ffffff000000207b:	48 89 5c 24 58       	mov    %rbx,0x58(%rsp)
ffffff0000002080:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
ffffff0000002087:	00 00 
ffffff0000002089:	48 c7 44 24 68 08 00 	movq   $0x8,0x68(%rsp)
ffffff0000002090:	00 00 
ffffff0000002092:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffff0000002099:	00 00 
ffffff000000209b:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
ffffff00000020a2:	00 00 
ffffff00000020a4:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffff00000020ab:	00 
ffffff00000020ac:	48 89 6c 24 10       	mov    %rbp,0x10(%rsp)
ffffff00000020b1:	48 c7 44 24 18 0b 00 	movq   $0xb,0x18(%rsp)
ffffff00000020b8:	00 00 
ffffff00000020ba:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
ffffff00000020c1:	00 00 
ffffff00000020c3:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
ffffff00000020c8:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffff00000020cd:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
ffffff00000020d4:	00 
ffffff00000020d5:	89 44 24 54          	mov    %eax,0x54(%rsp)
log::__private_api::log_impl:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/__private_api.rs:81
        .line(Some(loc.line()));

    #[cfg(feature = "kv")]
    builder.key_values(&kvs);

    logger.log(&builder.build());
ffffff00000020d9:	4c 89 f7             	mov    %r14,%rdi
ffffff00000020dc:	4c 89 fe             	mov    %r15,%rsi
ffffff00000020df:	e8 0c 0d 00 00       	call   ffffff0000002df0 <<log::__private_api::GlobalLogger as log::Log>::log>
ysos_kernel::kernel_main:
ffffff00000020e4:	b8 00 00 00 10       	mov    $0x10000000,%eax
ffffff00000020e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/main.rs:20

        for _ in 0..0x10000000 {
            unsafe {
                asm!("nop");
ffffff00000020f0:	90                   	nop
core::cmp::impls::<impl core::cmp::PartialOrd for i32>::lt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs:1849

    #[rustfmt::skip]
    macro_rules! partial_ord_methods_primitive_impl {
        () => {
            #[inline(always)]
            fn lt(&self, other: &Self) -> bool { *self <  *other }
ffffff00000020f1:	ff c8                	dec    %eax
<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/range.rs:764
}

impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
    #[inline]
    fn spec_next(&mut self) -> Option<T> {
        if self.start < self.end {
ffffff00000020f3:	75 fb                	jne    ffffff00000020f0 <ysos_kernel::kernel_main+0xf0>
ffffff00000020f5:	e9 46 ff ff ff       	jmp    ffffff0000002040 <ysos_kernel::kernel_main+0x40>
ysos_kernel::kernel_main:
ffffff00000020fa:	cc                   	int3   
ffffff00000020fb:	cc                   	int3   
ffffff00000020fc:	cc                   	int3   
ffffff00000020fd:	cc                   	int3   
ffffff00000020fe:	cc                   	int3   
ffffff00000020ff:	cc                   	int3   

ffffff0000002100 <_start>:
_start():
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/boot/src/lib.rs:89
/// that the macro ensures that the function and argument types are correct.
#[macro_export]
macro_rules! entry_point {
    ($path:path) => {
        #[unsafe(export_name = "_start")]
        pub extern "C" fn __impl_start(boot_info: &'static $crate::BootInfo) -> ! {
ffffff0000002100:	50                   	push   %rax
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/boot/src/lib.rs:93
            // validate the signature of the program entry point
            let f: fn(&'static $crate::BootInfo) -> ! = $path;

            f(boot_info)
ffffff0000002101:	e8 fa fe ff ff       	call   ffffff0000002000 <ysos_kernel::kernel_main>
ffffff0000002106:	cc                   	int3   
ffffff0000002107:	cc                   	int3   
ffffff0000002108:	cc                   	int3   
ffffff0000002109:	cc                   	int3   
ffffff000000210a:	cc                   	int3   
ffffff000000210b:	cc                   	int3   
ffffff000000210c:	cc                   	int3   
ffffff000000210d:	cc                   	int3   
ffffff000000210e:	cc                   	int3   
ffffff000000210f:	cc                   	int3   

ffffff0000002110 <<bool as core::fmt::Debug>::fmt>:
<bool as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2703

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for bool {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        Display::fmt(self, f)
ffffff0000002110:	e9 9b 22 00 00       	jmp    ffffff00000043b0 <<bool as core::fmt::Display>::fmt>
ffffff0000002115:	cc                   	int3   
ffffff0000002116:	cc                   	int3   
ffffff0000002117:	cc                   	int3   
ffffff0000002118:	cc                   	int3   
ffffff0000002119:	cc                   	int3   
ffffff000000211a:	cc                   	int3   
ffffff000000211b:	cc                   	int3   
ffffff000000211c:	cc                   	int3   
ffffff000000211d:	cc                   	int3   
ffffff000000211e:	cc                   	int3   
ffffff000000211f:	cc                   	int3   

ffffff0000002120 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffff0000002120:	48 8b 3f             	mov    (%rdi),%rdi
core::fmt::Formatter::debug_lower_hex:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2204
        self.options.flags & flags::DEBUG_LOWER_HEX_FLAG != 0
ffffff0000002123:	8b 46 10             	mov    0x10(%rsi),%eax
core::fmt::num::<impl core::fmt::Debug for u32>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/num.rs:181
        $(
            #[stable(feature = "rust1", since = "1.0.0")]
            impl fmt::Debug for $T {
                #[inline]
                fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                    if f.debug_lower_hex() {
ffffff0000002126:	a9 00 00 00 02       	test   $0x2000000,%eax
ffffff000000212b:	0f 85 ff 0c 00 00    	jne    ffffff0000002e30 <core::fmt::num::<impl core::fmt::LowerHex for i32>::fmt>
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/num.rs:183
                        fmt::LowerHex::fmt(self, f)
                    } else if f.debug_upper_hex() {
ffffff0000002131:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffff0000002136:	0f 85 64 0d 00 00    	jne    ffffff0000002ea0 <core::fmt::num::<impl core::fmt::UpperHex for i32>::fmt>
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/num.rs:186
                        fmt::UpperHex::fmt(self, f)
                    } else {
                        fmt::Display::fmt(self, f)
ffffff000000213c:	e9 cf 0d 00 00       	jmp    ffffff0000002f10 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
<&T as core::fmt::Debug>::fmt:
ffffff0000002141:	cc                   	int3   
ffffff0000002142:	cc                   	int3   
ffffff0000002143:	cc                   	int3   
ffffff0000002144:	cc                   	int3   
ffffff0000002145:	cc                   	int3   
ffffff0000002146:	cc                   	int3   
ffffff0000002147:	cc                   	int3   
ffffff0000002148:	cc                   	int3   
ffffff0000002149:	cc                   	int3   
ffffff000000214a:	cc                   	int3   
ffffff000000214b:	cc                   	int3   
ffffff000000214c:	cc                   	int3   
ffffff000000214d:	cc                   	int3   
ffffff000000214e:	cc                   	int3   
ffffff000000214f:	cc                   	int3   

ffffff0000002150 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffff0000002150:	41 57                	push   %r15
ffffff0000002152:	41 56                	push   %r14
ffffff0000002154:	41 55                	push   %r13
ffffff0000002156:	41 54                	push   %r12
ffffff0000002158:	53                   	push   %rbx
ffffff0000002159:	48 83 ec 10          	sub    $0x10,%rsp
ffffff000000215d:	48 89 f0             	mov    %rsi,%rax
ffffff0000002160:	4c 8b 0f             	mov    (%rdi),%r9
<core::panic::location::Location as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:36
    line: u32,
ffffff0000002163:	4d 8d 51 10          	lea    0x10(%r9),%r10
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:37
    col: u32,
ffffff0000002167:	49 8d 49 14          	lea    0x14(%r9),%rcx
ffffff000000216b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:32
#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
ffffff0000002170:	48 83 ec 08          	sub    $0x8,%rsp
ffffff0000002174:	4c 8d 1d 3d 3f 00 00 	lea    0x3f3d(%rip),%r11        # ffffff00000060b8 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x7e8>
ffffff000000217b:	48 8d 5c 24 10       	lea    0x10(%rsp),%rbx
ffffff0000002180:	4c 8d 35 bb df ff ff 	lea    -0x2045(%rip),%r14        # ffffff0000000142 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x1c>
ffffff0000002187:	4c 8d 3d 0a 3f 00 00 	lea    0x3f0a(%rip),%r15        # ffffff0000006098 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x7c8>
ffffff000000218e:	4c 8d 25 99 df ff ff 	lea    -0x2067(%rip),%r12        # ffffff000000012e <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x8>
ffffff0000002195:	4c 8d 2d dc 3e 00 00 	lea    0x3edc(%rip),%r13        # ffffff0000006078 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x7a8>
ffffff000000219c:	48 8d 35 67 df ff ff 	lea    -0x2099(%rip),%rsi        # ffffff000000010a <KERNEL_BEGIN+0x10a>
ffffff00000021a3:	48 8d 0d 90 df ff ff 	lea    -0x2070(%rip),%rcx        # ffffff000000013a <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x14>
ffffff00000021aa:	ba 08 00 00 00       	mov    $0x8,%edx
ffffff00000021af:	41 b8 04 00 00 00    	mov    $0x4,%r8d
ffffff00000021b5:	48 89 c7             	mov    %rax,%rdi
ffffff00000021b8:	41 53                	push   %r11
ffffff00000021ba:	53                   	push   %rbx
ffffff00000021bb:	6a 03                	push   $0x3
ffffff00000021bd:	41 56                	push   %r14
ffffff00000021bf:	41 57                	push   %r15
ffffff00000021c1:	41 52                	push   %r10
ffffff00000021c3:	6a 04                	push   $0x4
ffffff00000021c5:	41 54                	push   %r12
ffffff00000021c7:	41 55                	push   %r13
ffffff00000021c9:	e8 72 1e 00 00       	call   ffffff0000004040 <core::fmt::Formatter::debug_struct_field3_finish>
ffffff00000021ce:	48 83 c4 60          	add    $0x60,%rsp
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff00000021d2:	5b                   	pop    %rbx
ffffff00000021d3:	41 5c                	pop    %r12
ffffff00000021d5:	41 5d                	pop    %r13
ffffff00000021d7:	41 5e                	pop    %r14
ffffff00000021d9:	41 5f                	pop    %r15
ffffff00000021db:	c3                   	ret    
ffffff00000021dc:	cc                   	int3   
ffffff00000021dd:	cc                   	int3   
ffffff00000021de:	cc                   	int3   
ffffff00000021df:	cc                   	int3   

ffffff00000021e0 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff00000021e0:	48 8b 3f             	mov    (%rdi),%rdi
ffffff00000021e3:	e9 c8 15 00 00       	jmp    ffffff00000037b0 <<core::fmt::Arguments as core::fmt::Debug>::fmt>
ffffff00000021e8:	cc                   	int3   
ffffff00000021e9:	cc                   	int3   
ffffff00000021ea:	cc                   	int3   
ffffff00000021eb:	cc                   	int3   
ffffff00000021ec:	cc                   	int3   
ffffff00000021ed:	cc                   	int3   
ffffff00000021ee:	cc                   	int3   
ffffff00000021ef:	cc                   	int3   

ffffff00000021f0 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff00000021f0:	55                   	push   %rbp
ffffff00000021f1:	41 57                	push   %r15
ffffff00000021f3:	41 56                	push   %r14
ffffff00000021f5:	41 55                	push   %r13
ffffff00000021f7:	41 54                	push   %r12
ffffff00000021f9:	53                   	push   %rbx
ffffff00000021fa:	50                   	push   %rax
ffffff00000021fb:	48 89 f0             	mov    %rsi,%rax
ffffff00000021fe:	4c 8b 0f             	mov    (%rdi),%r9
<core::panic::panic_info::PanicInfo as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/panic_info.rs:16
#[lang = "panic_info"]
#[stable(feature = "panic_hooks", since = "1.10.0")]
#[derive(Debug)]
pub struct PanicInfo<'a> {
    message: &'a fmt::Arguments<'a>,
    location: &'a Location<'a>,
ffffff0000002201:	4d 8d 51 08          	lea    0x8(%r9),%r10
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/panic_info.rs:17
    can_unwind: bool,
ffffff0000002205:	4d 8d 71 10          	lea    0x10(%r9),%r14
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/panic_info.rs:18
    force_no_backtrace: bool,
ffffff0000002209:	49 8d 49 11          	lea    0x11(%r9),%rcx
ffffff000000220d:	48 89 0c 24          	mov    %rcx,(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/panic_info.rs:13
#[derive(Debug)]
ffffff0000002211:	48 83 ec 08          	sub    $0x8,%rsp
ffffff0000002215:	4c 8d 3d 1c 3f 00 00 	lea    0x3f1c(%rip),%r15        # ffffff0000006138 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x868>
ffffff000000221c:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
ffffff0000002221:	4c 8d 2d 37 df ff ff 	lea    -0x20c9(%rip),%r13        # ffffff000000015f <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x39>
ffffff0000002228:	48 8d 2d e9 3e 00 00 	lea    0x3ee9(%rip),%rbp        # ffffff0000006118 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x848>
ffffff000000222f:	4c 8d 1d 1f df ff ff 	lea    -0x20e1(%rip),%r11        # ffffff0000000155 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x2f>
ffffff0000002236:	48 8d 1d bb 3e 00 00 	lea    0x3ebb(%rip),%rbx        # ffffff00000060f8 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x828>
ffffff000000223d:	48 8d 35 01 df ff ff 	lea    -0x20ff(%rip),%rsi        # ffffff0000000145 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x1f>
ffffff0000002244:	48 8d 0d 03 df ff ff 	lea    -0x20fd(%rip),%rcx        # ffffff000000014e <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x28>
ffffff000000224b:	ba 09 00 00 00       	mov    $0x9,%edx
ffffff0000002250:	41 b8 07 00 00 00    	mov    $0x7,%r8d
ffffff0000002256:	48 89 c7             	mov    %rax,%rdi
ffffff0000002259:	41 57                	push   %r15
ffffff000000225b:	41 54                	push   %r12
ffffff000000225d:	6a 12                	push   $0x12
ffffff000000225f:	41 55                	push   %r13
ffffff0000002261:	55                   	push   %rbp
ffffff0000002262:	41 56                	push   %r14
ffffff0000002264:	6a 0a                	push   $0xa
ffffff0000002266:	41 53                	push   %r11
ffffff0000002268:	53                   	push   %rbx
ffffff0000002269:	41 52                	push   %r10
ffffff000000226b:	6a 08                	push   $0x8
ffffff000000226d:	48 8d 05 9e de ff ff 	lea    -0x2162(%rip),%rax        # ffffff0000000112 <KERNEL_BEGIN+0x112>
ffffff0000002274:	50                   	push   %rax
ffffff0000002275:	48 8d 05 5c 3e 00 00 	lea    0x3e5c(%rip),%rax        # ffffff00000060d8 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x808>
ffffff000000227c:	50                   	push   %rax
ffffff000000227d:	e8 be 1e 00 00       	call   ffffff0000004140 <core::fmt::Formatter::debug_struct_field4_finish>
ffffff0000002282:	48 83 c4 78          	add    $0x78,%rsp
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff0000002286:	5b                   	pop    %rbx
ffffff0000002287:	41 5c                	pop    %r12
ffffff0000002289:	41 5d                	pop    %r13
ffffff000000228b:	41 5e                	pop    %r14
ffffff000000228d:	41 5f                	pop    %r15
ffffff000000228f:	5d                   	pop    %rbp
ffffff0000002290:	c3                   	ret    
ffffff0000002291:	cc                   	int3   
ffffff0000002292:	cc                   	int3   
ffffff0000002293:	cc                   	int3   
ffffff0000002294:	cc                   	int3   
ffffff0000002295:	cc                   	int3   
ffffff0000002296:	cc                   	int3   
ffffff0000002297:	cc                   	int3   
ffffff0000002298:	cc                   	int3   
ffffff0000002299:	cc                   	int3   
ffffff000000229a:	cc                   	int3   
ffffff000000229b:	cc                   	int3   
ffffff000000229c:	cc                   	int3   
ffffff000000229d:	cc                   	int3   
ffffff000000229e:	cc                   	int3   
ffffff000000229f:	cc                   	int3   

ffffff00000022a0 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff00000022a0:	48 89 f7             	mov    %rsi,%rdi
<() as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2935

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for () {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
        f.pad("()")
ffffff00000022a3:	48 8d 35 b6 dd ff ff 	lea    -0x224a(%rip),%rsi        # ffffff0000000060 <KERNEL_BEGIN+0x60>
ffffff00000022aa:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff00000022af:	e9 ec 1a 00 00       	jmp    ffffff0000003da0 <core::fmt::Formatter::pad>
<&T as core::fmt::Debug>::fmt:
ffffff00000022b4:	cc                   	int3   
ffffff00000022b5:	cc                   	int3   
ffffff00000022b6:	cc                   	int3   
ffffff00000022b7:	cc                   	int3   
ffffff00000022b8:	cc                   	int3   
ffffff00000022b9:	cc                   	int3   
ffffff00000022ba:	cc                   	int3   
ffffff00000022bb:	cc                   	int3   
ffffff00000022bc:	cc                   	int3   
ffffff00000022bd:	cc                   	int3   
ffffff00000022be:	cc                   	int3   
ffffff00000022bf:	cc                   	int3   

ffffff00000022c0 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffff00000022c0:	48 8b 3f             	mov    (%rdi),%rdi
<bool as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2703
        Display::fmt(self, f)
ffffff00000022c3:	e9 e8 20 00 00       	jmp    ffffff00000043b0 <<bool as core::fmt::Display>::fmt>
<&T as core::fmt::Debug>::fmt:
ffffff00000022c8:	cc                   	int3   
ffffff00000022c9:	cc                   	int3   
ffffff00000022ca:	cc                   	int3   
ffffff00000022cb:	cc                   	int3   
ffffff00000022cc:	cc                   	int3   
ffffff00000022cd:	cc                   	int3   
ffffff00000022ce:	cc                   	int3   
ffffff00000022cf:	cc                   	int3   

ffffff00000022d0 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
ffffff00000022d0:	48 89 f2             	mov    %rsi,%rdx
ffffff00000022d3:	48 8b 07             	mov    (%rdi),%rax
ffffff00000022d6:	48 8b 77 08          	mov    0x8(%rdi),%rsi
ffffff00000022da:	48 89 c7             	mov    %rax,%rdi
ffffff00000022dd:	e9 fe 20 00 00       	jmp    ffffff00000043e0 <<str as core::fmt::Debug>::fmt>
ffffff00000022e2:	cc                   	int3   
ffffff00000022e3:	cc                   	int3   
ffffff00000022e4:	cc                   	int3   
ffffff00000022e5:	cc                   	int3   
ffffff00000022e6:	cc                   	int3   
ffffff00000022e7:	cc                   	int3   
ffffff00000022e8:	cc                   	int3   
ffffff00000022e9:	cc                   	int3   
ffffff00000022ea:	cc                   	int3   
ffffff00000022eb:	cc                   	int3   
ffffff00000022ec:	cc                   	int3   
ffffff00000022ed:	cc                   	int3   
ffffff00000022ee:	cc                   	int3   
ffffff00000022ef:	cc                   	int3   

ffffff00000022f0 <<&T as core::fmt::Display>::fmt>:
<&T as core::fmt::Display>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff00000022f0:	48 89 f2             	mov    %rsi,%rdx
ffffff00000022f3:	48 8b 07             	mov    (%rdi),%rax
ffffff00000022f6:	48 8b 77 08          	mov    0x8(%rdi),%rsi
ffffff00000022fa:	48 89 c7             	mov    %rax,%rdi
ffffff00000022fd:	e9 7e 24 00 00       	jmp    ffffff0000004780 <<str as core::fmt::Display>::fmt>
ffffff0000002302:	cc                   	int3   
ffffff0000002303:	cc                   	int3   
ffffff0000002304:	cc                   	int3   
ffffff0000002305:	cc                   	int3   
ffffff0000002306:	cc                   	int3   
ffffff0000002307:	cc                   	int3   
ffffff0000002308:	cc                   	int3   
ffffff0000002309:	cc                   	int3   
ffffff000000230a:	cc                   	int3   
ffffff000000230b:	cc                   	int3   
ffffff000000230c:	cc                   	int3   
ffffff000000230d:	cc                   	int3   
ffffff000000230e:	cc                   	int3   
ffffff000000230f:	cc                   	int3   

ffffff0000002310 <<&T as core::fmt::Display>::fmt>:
<&T as core::fmt::Display>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2671
ffffff0000002310:	48 8b 3f             	mov    (%rdi),%rdi
ffffff0000002313:	e9 a8 14 00 00       	jmp    ffffff00000037c0 <<core::fmt::Arguments as core::fmt::Display>::fmt>
ffffff0000002318:	cc                   	int3   
ffffff0000002319:	cc                   	int3   
ffffff000000231a:	cc                   	int3   
ffffff000000231b:	cc                   	int3   
ffffff000000231c:	cc                   	int3   
ffffff000000231d:	cc                   	int3   
ffffff000000231e:	cc                   	int3   
ffffff000000231f:	cc                   	int3   

ffffff0000002320 <core::fmt::num::<impl core::fmt::Debug for u32>::fmt>:
core::fmt::Formatter::debug_lower_hex:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:2204
        self.options.flags & flags::DEBUG_LOWER_HEX_FLAG != 0
ffffff0000002320:	8b 46 10             	mov    0x10(%rsi),%eax
core::fmt::num::<impl core::fmt::Debug for u32>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/num.rs:181
                    if f.debug_lower_hex() {
ffffff0000002323:	a9 00 00 00 02       	test   $0x2000000,%eax
ffffff0000002328:	0f 85 02 0b 00 00    	jne    ffffff0000002e30 <core::fmt::num::<impl core::fmt::LowerHex for i32>::fmt>
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/num.rs:183
                    } else if f.debug_upper_hex() {
ffffff000000232e:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffff0000002333:	0f 85 67 0b 00 00    	jne    ffffff0000002ea0 <core::fmt::num::<impl core::fmt::UpperHex for i32>::fmt>
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/num.rs:186
                        fmt::Display::fmt(self, f)
ffffff0000002339:	e9 d2 0b 00 00       	jmp    ffffff0000002f10 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
ffffff000000233e:	cc                   	int3   
ffffff000000233f:	cc                   	int3   

ffffff0000002340 <core::fmt::Write::write_char>:
core::fmt::Write::write_char:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:176
    fn write_char(&mut self, c: char) -> Result {
ffffff0000002340:	48 83 ec 04          	sub    $0x4,%rsp
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:177
        self.write_str(c.encode_utf8(&mut [0; MAX_LEN_UTF8]))
ffffff0000002344:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
core::char::methods::len_utf8:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1778

#[inline]
#[must_use]
const fn len_utf8(code: u32) -> usize {
    match code {
        ..MAX_ONE_B => 1,
ffffff000000234b:	81 fe 80 00 00 00    	cmp    $0x80,%esi
ffffff0000002351:	73 0e                	jae    ffffff0000002361 <core::fmt::Write::write_char+0x21>
core::fmt::Write::write_char:
ffffff0000002353:	4c 8d 44 24 01       	lea    0x1(%rsp),%r8
core::char::methods::encode_utf8_raw_unchecked:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1851
    // SAFETY: The caller must guarantee that the buffer pointed to by `dst`
    // is at least `len` bytes long.
    unsafe {
        match len {
            1 => {
                *dst = code as u8;
ffffff0000002358:	40 88 34 24          	mov    %sil,(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1850
            1 => {
ffffff000000235c:	e9 8f 00 00 00       	jmp    ffffff00000023f0 <core::fmt::Write::write_char+0xb0>
core::char::methods::len_utf8:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1779
        ..MAX_TWO_B => 2,
ffffff0000002361:	81 fe 00 08 00 00    	cmp    $0x800,%esi
ffffff0000002367:	73 1e                	jae    ffffff0000002387 <core::fmt::Write::write_char+0x47>
core::fmt::Write::write_char:
ffffff0000002369:	4c 8d 44 24 02       	lea    0x2(%rsp),%r8
core::char::methods::encode_utf8_raw_unchecked:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1854
            }
            2 => {
                *dst = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
ffffff000000236e:	89 f0                	mov    %esi,%eax
ffffff0000002370:	c1 e8 06             	shr    $0x6,%eax
ffffff0000002373:	0c c0                	or     $0xc0,%al
ffffff0000002375:	88 04 24             	mov    %al,(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1855
                *dst.add(1) = (code & 0x3F) as u8 | TAG_CONT;
ffffff0000002378:	40 80 e6 3f          	and    $0x3f,%sil
ffffff000000237c:	40 80 ce 80          	or     $0x80,%sil
ffffff0000002380:	40 88 74 24 01       	mov    %sil,0x1(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1853
            2 => {
ffffff0000002385:	eb 69                	jmp    ffffff00000023f0 <core::fmt::Write::write_char+0xb0>
core::char::methods::len_utf8:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1780
        ..MAX_THREE_B => 3,
ffffff0000002387:	81 fe 00 00 01 00    	cmp    $0x10000,%esi
ffffff000000238d:	73 2b                	jae    ffffff00000023ba <core::fmt::Write::write_char+0x7a>
core::fmt::Write::write_char:
ffffff000000238f:	4c 8d 44 24 03       	lea    0x3(%rsp),%r8
core::char::methods::encode_utf8_raw_unchecked:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1858
            }
            3 => {
                *dst = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
ffffff0000002394:	89 f0                	mov    %esi,%eax
ffffff0000002396:	c1 e8 0c             	shr    $0xc,%eax
ffffff0000002399:	0c e0                	or     $0xe0,%al
ffffff000000239b:	88 04 24             	mov    %al,(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1859
                *dst.add(1) = (code >> 6 & 0x3F) as u8 | TAG_CONT;
ffffff000000239e:	89 f0                	mov    %esi,%eax
ffffff00000023a0:	c1 e8 06             	shr    $0x6,%eax
ffffff00000023a3:	24 3f                	and    $0x3f,%al
ffffff00000023a5:	0c 80                	or     $0x80,%al
ffffff00000023a7:	88 44 24 01          	mov    %al,0x1(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1860
                *dst.add(2) = (code & 0x3F) as u8 | TAG_CONT;
ffffff00000023ab:	40 80 e6 3f          	and    $0x3f,%sil
ffffff00000023af:	40 80 ce 80          	or     $0x80,%sil
ffffff00000023b3:	40 88 74 24 02       	mov    %sil,0x2(%rsp)
ffffff00000023b8:	eb 36                	jmp    ffffff00000023f0 <core::fmt::Write::write_char+0xb0>
core::fmt::Write::write_char:
ffffff00000023ba:	4c 8d 44 24 04       	lea    0x4(%rsp),%r8
core::char::methods::encode_utf8_raw_unchecked:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1863
            }
            4 => {
                *dst = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
ffffff00000023bf:	89 f0                	mov    %esi,%eax
ffffff00000023c1:	c1 e8 12             	shr    $0x12,%eax
ffffff00000023c4:	0c f0                	or     $0xf0,%al
ffffff00000023c6:	88 04 24             	mov    %al,(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1864
                *dst.add(1) = (code >> 12 & 0x3F) as u8 | TAG_CONT;
ffffff00000023c9:	89 f0                	mov    %esi,%eax
ffffff00000023cb:	c1 e8 0c             	shr    $0xc,%eax
ffffff00000023ce:	24 3f                	and    $0x3f,%al
ffffff00000023d0:	0c 80                	or     $0x80,%al
ffffff00000023d2:	88 44 24 01          	mov    %al,0x1(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1865
                *dst.add(2) = (code >> 6 & 0x3F) as u8 | TAG_CONT;
ffffff00000023d6:	89 f0                	mov    %esi,%eax
ffffff00000023d8:	c1 e8 06             	shr    $0x6,%eax
ffffff00000023db:	24 3f                	and    $0x3f,%al
ffffff00000023dd:	0c 80                	or     $0x80,%al
ffffff00000023df:	88 44 24 02          	mov    %al,0x2(%rsp)
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/char/methods.rs:1866
                *dst.add(3) = (code & 0x3F) as u8 | TAG_CONT;
ffffff00000023e3:	40 80 e6 3f          	and    $0x3f,%sil
ffffff00000023e7:	40 80 ce 80          	or     $0x80,%sil
ffffff00000023eb:	40 88 74 24 03       	mov    %sil,0x3(%rsp)
core::fmt::Write::write_char:
ffffff00000023f0:	0f b7 0f             	movzwl (%rdi),%ecx
ffffff00000023f3:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
ffffff00000023f7:	49 89 e1             	mov    %rsp,%r9
ffffff00000023fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
core::option::Option<&T>::copied:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1899
        T: Copy,
    {
        // FIXME(const-hack): this implementation, which sidesteps using `Option::map` since it's not const
        // ready yet, should be reverted when possible to avoid code repetition
        match self {
            Some(&v) => Some(v),
ffffff0000002400:	41 0f b6 39          	movzbl (%r9),%edi
core::fmt::Write::write_char:
ffffff0000002404:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000240b:	00 00 00 00 00 
x86_64::instructions::port::<impl x86_64::structures::port::PortRead for u8>::read_from_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:15
impl PortRead for u8 {
    #[inline]
    unsafe fn read_from_port(port: u16) -> u8 {
        let value: u8;
        unsafe {
            asm!("in al, dx", out("al") value, in("dx") port, options(nomem, nostack, preserves_flags));
ffffff0000002410:	89 f2                	mov    %esi,%edx
ffffff0000002412:	ec                   	in     (%dx),%al
ysos_kernel::drivers::uart16550::SerialPort::send:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/drivers/uart16550.rs:74

    /// Sends a byte on the serial port.
    pub fn send(&mut self, data: u8) {
        // FIXME: Send a byte on the serial port
        unsafe {
            while (self.line_status.read() & 0x20) == 0 {}
ffffff0000002413:	a8 20                	test   $0x20,%al
ffffff0000002415:	74 f9                	je     ffffff0000002410 <core::fmt::Write::write_char+0xd0>
core::ptr::non_null::NonNull<T>::add:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:616
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        // Additionally safety contract of `offset` guarantees that the resulting pointer is
        // pointing to an allocation, there can't be an allocation at null, thus it's safe to
        // construct `NonNull`.
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
ffffff0000002417:	49 ff c1             	inc    %r9
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47

impl PortWrite for u8 {
    #[inline]
    unsafe fn write_to_port(port: u16, value: u8) {
        unsafe {
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff000000241a:	89 ca                	mov    %ecx,%edx
ffffff000000241c:	89 f8                	mov    %edi,%eax
ffffff000000241e:	ee                   	out    %al,(%dx)
<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:1620
#[stable(feature = "nonnull", since = "1.25.0")]
impl<T: ?Sized> PartialEq for NonNull<T> {
    #[inline]
    #[allow(ambiguous_wide_pointer_comparisons)]
    fn eq(&self, other: &Self) -> bool {
        self.as_ptr() == other.as_ptr()
ffffff000000241f:	4d 39 c1             	cmp    %r8,%r9
<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs:179
                        self.end_or_len = without_provenance_mut(len.unchecked_sub(1));
                    } else {
                        // SAFETY: by type invariant, the `end_or_len` field is always
                        // non-null for a non-ZST pointee.  (This transmute ensures we
                        // get `!nonnull` metadata on the load of the field.)
                        if ptr == crate::intrinsics::transmute::<$ptr, NonNull<T>>(end_or_len) {
ffffff0000002422:	75 dc                	jne    ffffff0000002400 <core::fmt::Write::write_char+0xc0>
core::fmt::Write::write_char:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:178
    }
ffffff0000002424:	31 c0                	xor    %eax,%eax
ffffff0000002426:	48 83 c4 04          	add    $0x4,%rsp
ffffff000000242a:	c3                   	ret    
ffffff000000242b:	cc                   	int3   
ffffff000000242c:	cc                   	int3   
ffffff000000242d:	cc                   	int3   
ffffff000000242e:	cc                   	int3   
ffffff000000242f:	cc                   	int3   

ffffff0000002430 <core::fmt::Write::write_fmt>:
core::fmt::Write::write_fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:205
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
ffffff0000002430:	48 89 f2             	mov    %rsi,%rdx
<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:229
                    write(self, args)
ffffff0000002433:	48 8d 35 1e 3d 00 00 	lea    0x3d1e(%rip),%rsi        # ffffff0000006158 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x888>
ffffff000000243a:	e9 91 13 00 00       	jmp    ffffff00000037d0 <core::fmt::write>
core::fmt::Write::write_fmt:
ffffff000000243f:	cc                   	int3   

ffffff0000002440 <spin::once::Once<T,R>::try_call_once_slow>:
spin::once::Once<T,R>::try_call_once_slow:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:217
            self.try_call_once_slow(f)
        }
    }

    #[cold]
    fn try_call_once_slow<F: FnOnce() -> Result<T, E>, E>(&self, f: F) -> Result<&T, E> {
ffffff0000002440:	48 83 ec 18          	sub    $0x18,%rsp
ffffff0000002444:	b1 01                	mov    $0x1,%cl
core::sync::atomic::atomic_compare_exchange:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3811
        match (success, failure) {
            (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),
            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),
            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
ffffff0000002446:	31 c0                	xor    %eax,%eax
ffffff0000002448:	f0 0f b0 0d be 5b 00 	lock cmpxchg %cl,0x5bbe(%rip)        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
ffffff000000244f:	00 
spin::once::status::AtomicStatus::compare_exchange:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:112
            match self
ffffff0000002450:	75 3a                	jne    ffffff000000248c <spin::once::Once<T,R>::try_call_once_slow+0x4c>
spin::mutex::spin::SpinMutex<T,R>::new:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/mutex/spin.rs:111
    ///     drop(lock);
    /// }
    /// ```
    #[inline(always)]
    pub const fn new(data: T) -> Self {
        SpinMutex {
ffffff0000002452:	48 8b 07             	mov    (%rdi),%rax
ffffff0000002455:	48 89 44 24 0c       	mov    %rax,0xc(%rsp)
ffffff000000245a:	8b 47 08             	mov    0x8(%rdi),%eax
ffffff000000245d:	89 44 24 14          	mov    %eax,0x14(%rsp)
core::ptr::write:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/mod.rs:1620
                addr: *mut () = dst as *mut (),
                align: usize = align_of::<T>(),
                is_zst: bool = T::IS_ZST,
            ) => ub_checks::maybe_is_aligned_and_not_null(addr, align, is_zst)
        );
        intrinsics::write_via_move(dst, src)
ffffff0000002461:	c6 05 98 5b 00 00 00 	movb   $0x0,0x5b98(%rip)        # ffffff0000008000 <ysos_kernel::drivers::serial::SERIAL>
ffffff0000002468:	48 8b 44 24 0b       	mov    0xb(%rsp),%rax
ffffff000000246d:	48 89 05 8d 5b 00 00 	mov    %rax,0x5b8d(%rip)        # ffffff0000008001 <ysos_kernel::drivers::serial::SERIAL+0x1>
ffffff0000002474:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff0000002479:	48 89 05 86 5b 00 00 	mov    %rax,0x5b86(%rip)        # ffffff0000008006 <ysos_kernel::drivers::serial::SERIAL+0x6>
core::sync::atomic::atomic_store:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3721
            Release => intrinsics::atomic_store_release(dst, val),
ffffff0000002480:	c6 05 87 5b 00 00 02 	movb   $0x2,0x5b87(%rip)        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::try_call_once_slow:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:295
            self.status.store(Status::Complete, Ordering::Release);

            // This next line is mainly an optimization.
            return unsafe { Ok(self.force_get()) };
        }
    }
ffffff0000002487:	48 83 c4 18          	add    $0x18,%rsp
ffffff000000248b:	c3                   	ret    
ffffff000000248c:	48 8d 15 ad db ff ff 	lea    -0x2453(%rip),%rdx        # ffffff0000000040 <KERNEL_BEGIN+0x40>
ffffff0000002493:	48 8d 35 b6 db ff ff 	lea    -0x244a(%rip),%rsi        # ffffff0000000050 <KERNEL_BEGIN+0x50>
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:226
            match xchg {
ffffff000000249a:	0f b6 c0             	movzbl %al,%eax
ffffff000000249d:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
ffffff00000024a1:	48 01 d0             	add    %rdx,%rax
ffffff00000024a4:	ff e0                	jmp    *%rax
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3736
            Acquire => intrinsics::atomic_load_acquire(dst),
ffffff00000024a6:	0f b6 05 61 5b 00 00 	movzbl 0x5b61(%rip),%eax        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::poll:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:330
    pub fn poll(&self) -> Option<&T> {
        loop {
            // SAFETY: Acquire is safe here, because if the status is COMPLETE, then we want to make
            // sure that all memory accessed done while initializing that value, are visible when
            // we return a reference to the inner data after this load.
            match self.status.load(Ordering::Acquire) {
ffffff00000024ad:	0f b6 c0             	movzbl %al,%eax
ffffff00000024b0:	48 63 04 86          	movslq (%rsi,%rax,4),%rax
ffffff00000024b4:	48 01 f0             	add    %rsi,%rax
ffffff00000024b7:	ff e0                	jmp    *%rax
core::core_arch::x86::sse2::_mm_pause:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:25
#[cfg_attr(all(test, target_feature = "sse2"), assert_instr(pause))]
#[stable(feature = "simd_x86", since = "1.27.0")]
pub unsafe fn _mm_pause() {
    // note: `pause` is guaranteed to be interpreted as a `nop` by CPUs without
    // the SSE2 target-feature - therefore it does not require any target features
    pause()
ffffff00000024b9:	f3 90                	pause  
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3736
ffffff00000024bb:	0f b6 05 4c 5b 00 00 	movzbl 0x5b4c(%rip),%eax        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::poll:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:330
ffffff00000024c2:	0f b6 c0             	movzbl %al,%eax
ffffff00000024c5:	48 63 04 86          	movslq (%rsi,%rax,4),%rax
ffffff00000024c9:	48 01 f0             	add    %rsi,%rax
ffffff00000024cc:	ff e0                	jmp    *%rax
spin::once::Once<T,R>::try_call_once_slow:
ffffff00000024ce:	66 90                	xchg   %ax,%ax
core::sync::atomic::atomic_compare_exchange:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3811
            (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),
ffffff00000024d0:	31 c0                	xor    %eax,%eax
ffffff00000024d2:	f0 0f b0 0d 34 5b 00 	lock cmpxchg %cl,0x5b34(%rip)        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
ffffff00000024d9:	00 
spin::once::status::AtomicStatus::compare_exchange:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:112
            match self
ffffff00000024da:	75 be                	jne    ffffff000000249a <spin::once::Once<T,R>::try_call_once_slow+0x5a>
ffffff00000024dc:	e9 71 ff ff ff       	jmp    ffffff0000002452 <spin::once::Once<T,R>::try_call_once_slow+0x12>
spin::once::Once<T,R>::try_call_once_slow:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:230
                Err(Status::Panicked) => panic!("Once panicked"),
ffffff00000024e1:	48 8d 3d 7a db ff ff 	lea    -0x2486(%rip),%rdi        # ffffff0000000062 <KERNEL_BEGIN+0x62>
ffffff00000024e8:	48 8d 15 39 3b 00 00 	lea    0x3b39(%rip),%rdx        # ffffff0000006028 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x758>
ffffff00000024ef:	be 0d 00 00 00       	mov    $0xd,%esi
ffffff00000024f4:	e8 17 10 00 00       	call   ffffff0000003510 <core::panicking::panic>
spin::once::Once<T,R>::poll:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:334
                Status::Incomplete => return None,
                Status::Running => R::relax(), // We spin
                Status::Complete => return Some(unsafe { self.force_get() }),
                Status::Panicked => panic!("Once previously poisoned by a panicked"),
ffffff00000024f9:	48 8d 3d d1 db ff ff 	lea    -0x242f(%rip),%rdi        # ffffff00000000d1 <KERNEL_BEGIN+0xd1>
ffffff0000002500:	48 8d 15 39 3b 00 00 	lea    0x3b39(%rip),%rdx        # ffffff0000006040 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x770>
ffffff0000002507:	be 26 00 00 00       	mov    $0x26,%esi
ffffff000000250c:	e8 ff 0f 00 00       	call   ffffff0000003510 <core::panicking::panic>
spin::once::Once<T,R>::try_call_once_slow:
ffffff0000002511:	cc                   	int3   
ffffff0000002512:	cc                   	int3   
ffffff0000002513:	cc                   	int3   
ffffff0000002514:	cc                   	int3   
ffffff0000002515:	cc                   	int3   
ffffff0000002516:	cc                   	int3   
ffffff0000002517:	cc                   	int3   
ffffff0000002518:	cc                   	int3   
ffffff0000002519:	cc                   	int3   
ffffff000000251a:	cc                   	int3   
ffffff000000251b:	cc                   	int3   
ffffff000000251c:	cc                   	int3   
ffffff000000251d:	cc                   	int3   
ffffff000000251e:	cc                   	int3   
ffffff000000251f:	cc                   	int3   

ffffff0000002520 <<core::fmt::Error as core::fmt::Debug>::fmt>:
<core::fmt::Error as core::fmt::Debug>::fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:102
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
ffffff0000002520:	48 89 f7             	mov    %rsi,%rdi
ffffff0000002523:	48 8d 35 cd db ff ff 	lea    -0x2433(%rip),%rsi        # ffffff00000000f7 <KERNEL_BEGIN+0xf7>
ffffff000000252a:	ba 05 00 00 00       	mov    $0x5,%edx
ffffff000000252f:	e9 fc 1a 00 00       	jmp    ffffff0000004030 <core::fmt::Formatter::write_str>
ffffff0000002534:	cc                   	int3   
ffffff0000002535:	cc                   	int3   
ffffff0000002536:	cc                   	int3   
ffffff0000002537:	cc                   	int3   
ffffff0000002538:	cc                   	int3   
ffffff0000002539:	cc                   	int3   
ffffff000000253a:	cc                   	int3   
ffffff000000253b:	cc                   	int3   
ffffff000000253c:	cc                   	int3   
ffffff000000253d:	cc                   	int3   
ffffff000000253e:	cc                   	int3   
ffffff000000253f:	cc                   	int3   

ffffff0000002540 <<log::SetLoggerError as core::fmt::Debug>::fmt>:
<log::SetLoggerError as core::fmt::Debug>::fmt:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:1473

/// The type returned by [`set_logger`] if [`set_logger`] has already been called.
///
/// [`set_logger`]: fn.set_logger.html
#[allow(missing_copy_implementations)]
#[derive(Debug)]
ffffff0000002540:	50                   	push   %rax
ffffff0000002541:	48 89 f0             	mov    %rsi,%rax
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:1474
pub struct SetLoggerError(());
ffffff0000002544:	48 89 3c 24          	mov    %rdi,(%rsp)
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:1473
#[derive(Debug)]
ffffff0000002548:	48 8d 35 ad db ff ff 	lea    -0x2453(%rip),%rsi        # ffffff00000000fc <KERNEL_BEGIN+0xfc>
ffffff000000254f:	4c 8d 05 02 3b 00 00 	lea    0x3b02(%rip),%r8        # ffffff0000006058 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x788>
ffffff0000002556:	48 89 e1             	mov    %rsp,%rcx
ffffff0000002559:	ba 0e 00 00 00       	mov    $0xe,%edx
ffffff000000255e:	48 89 c7             	mov    %rax,%rdi
ffffff0000002561:	e8 fa 1c 00 00       	call   ffffff0000004260 <core::fmt::Formatter::debug_tuple_field1_finish>
ffffff0000002566:	59                   	pop    %rcx
ffffff0000002567:	c3                   	ret    
ffffff0000002568:	cc                   	int3   
ffffff0000002569:	cc                   	int3   
ffffff000000256a:	cc                   	int3   
ffffff000000256b:	cc                   	int3   
ffffff000000256c:	cc                   	int3   
ffffff000000256d:	cc                   	int3   
ffffff000000256e:	cc                   	int3   
ffffff000000256f:	cc                   	int3   

ffffff0000002570 <ysos_kernel::utils::macros::print_internal>:
ysos_kernel::utils::macros::print_internal:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:58
    () => ($crate::print!("\n\r"));
    ($($arg:tt)*) => ($crate::print!("{}\n\r", format_args!($($arg)*)));
}

#[doc(hidden)]
pub fn print_internal(args: Arguments) {
ffffff0000002570:	41 56                	push   %r14
ffffff0000002572:	53                   	push   %rbx
ffffff0000002573:	50                   	push   %rax
ffffff0000002574:	48 89 fb             	mov    %rdi,%rbx
x86_64::registers::rflags::x86_64::read_raw:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/registers/rflags.rs:86
    #[inline]
    pub fn read_raw() -> u64 {
        let r: u64;

        unsafe {
            asm!("pushfq; pop {}", out(reg) r, options(nomem, preserves_flags));
ffffff0000002577:	9c                   	pushf  
ffffff0000002578:	58                   	pop    %rax
x86_64::registers::rflags::_::InternalBitFlags::contains:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/registers/rflags.rs:8
bitflags! {
ffffff0000002579:	a9 00 02 00 00       	test   $0x200,%eax
x86_64::instructions::interrupts::without_interrupts:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/interrupts.rs:66
{
    // true if the interrupt flag is set (i.e. interrupts are enabled)
    let saved_intpt_flag = are_enabled();

    // if interrupts are enabled, disable them for now
    if saved_intpt_flag {
ffffff000000257e:	75 33                	jne    ffffff00000025b3 <ysos_kernel::utils::macros::print_internal+0x43>
ysos_kernel::utils::macros::print_internal::{{closure}}:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:60
    interrupts::without_interrupts(|| {
        if let Some(mut serial) = get_serial() {
ffffff0000002580:	e8 2b 07 00 00       	call   ffffff0000002cb0 <ysos_kernel::drivers::serial::get_serial>
ffffff0000002585:	48 85 c0             	test   %rax,%rax
ffffff0000002588:	74 21                	je     ffffff00000025ab <ysos_kernel::utils::macros::print_internal+0x3b>
ysos_kernel::utils::macros::print_internal:
ffffff000000258a:	49 89 c6             	mov    %rax,%r14
<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:229
                    write(self, args)
ffffff000000258d:	48 8d 3d 6e 5a 00 00 	lea    0x5a6e(%rip),%rdi        # ffffff0000008002 <ysos_kernel::drivers::serial::SERIAL+0x2>
ffffff0000002594:	48 8d 35 bd 3b 00 00 	lea    0x3bbd(%rip),%rsi        # ffffff0000006158 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x888>
ffffff000000259b:	48 89 da             	mov    %rbx,%rdx
ffffff000000259e:	e8 2d 12 00 00       	call   ffffff00000037d0 <core::fmt::write>
core::result::Result<T,E>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1107
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap(self) -> T
    where
        E: fmt::Debug,
    {
        match self {
ffffff00000025a3:	84 c0                	test   %al,%al
ffffff00000025a5:	75 41                	jne    ffffff00000025e8 <ysos_kernel::utils::macros::print_internal+0x78>
core::sync::atomic::atomic_store:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3721
            Release => intrinsics::atomic_store_release(dst, val),
ffffff00000025a7:	41 c6 06 00          	movb   $0x0,(%r14)
ysos_kernel::utils::macros::print_internal:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:64
            serial.write_fmt(args).unwrap();
        }
    });
}
ffffff00000025ab:	48 83 c4 08          	add    $0x8,%rsp
ffffff00000025af:	5b                   	pop    %rbx
ffffff00000025b0:	41 5e                	pop    %r14
ffffff00000025b2:	c3                   	ret    
x86_64::instructions::interrupts::disable:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/interrupts.rs:33
        asm!("cli", options(preserves_flags, nostack));
ffffff00000025b3:	fa                   	cli    
ysos_kernel::utils::macros::print_internal::{{closure}}:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:60
        if let Some(mut serial) = get_serial() {
ffffff00000025b4:	e8 f7 06 00 00       	call   ffffff0000002cb0 <ysos_kernel::drivers::serial::get_serial>
ffffff00000025b9:	48 85 c0             	test   %rax,%rax
ffffff00000025bc:	74 21                	je     ffffff00000025df <ysos_kernel::utils::macros::print_internal+0x6f>
ysos_kernel::utils::macros::print_internal:
ffffff00000025be:	49 89 c6             	mov    %rax,%r14
<&mut W as core::fmt::Write::write_fmt::SpecWriteFmt>::spec_write_fmt:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:229
ffffff00000025c1:	48 8d 3d 3a 5a 00 00 	lea    0x5a3a(%rip),%rdi        # ffffff0000008002 <ysos_kernel::drivers::serial::SERIAL+0x2>
ffffff00000025c8:	48 8d 35 89 3b 00 00 	lea    0x3b89(%rip),%rsi        # ffffff0000006158 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x888>
ffffff00000025cf:	48 89 da             	mov    %rbx,%rdx
ffffff00000025d2:	e8 f9 11 00 00       	call   ffffff00000037d0 <core::fmt::write>
core::result::Result<T,E>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1107
ffffff00000025d7:	84 c0                	test   %al,%al
ffffff00000025d9:	75 0d                	jne    ffffff00000025e8 <ysos_kernel::utils::macros::print_internal+0x78>
core::sync::atomic::atomic_store:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3721
ffffff00000025db:	41 c6 06 00          	movb   $0x0,(%r14)
x86_64::instructions::interrupts::enable:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/interrupts.rs:21
        asm!("sti", options(preserves_flags, nostack));
ffffff00000025df:	fb                   	sti    
ysos_kernel::utils::macros::print_internal:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:64
}
ffffff00000025e0:	48 83 c4 08          	add    $0x8,%rsp
ffffff00000025e4:	5b                   	pop    %rbx
ffffff00000025e5:	41 5e                	pop    %r14
ffffff00000025e7:	c3                   	ret    
core::result::Result<T,E>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1109
            Ok(t) => t,
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
ffffff00000025e8:	48 8d 3d 82 db ff ff 	lea    -0x247e(%rip),%rdi        # ffffff0000000171 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x4b>
ffffff00000025ef:	48 8d 0d 92 3b 00 00 	lea    0x3b92(%rip),%rcx        # ffffff0000006188 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x8b8>
ffffff00000025f6:	4c 8d 05 ab 3b 00 00 	lea    0x3bab(%rip),%r8        # ffffff00000061a8 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x8d8>
ffffff00000025fd:	48 8d 54 24 07       	lea    0x7(%rsp),%rdx
ffffff0000002602:	be 2b 00 00 00       	mov    $0x2b,%esi
ffffff0000002607:	e8 54 0e 00 00       	call   ffffff0000003460 <core::result::unwrap_failed>
ysos_kernel::utils::macros::print_internal:
ffffff000000260c:	cc                   	int3   
ffffff000000260d:	cc                   	int3   
ffffff000000260e:	cc                   	int3   
ffffff000000260f:	cc                   	int3   

ffffff0000002610 <__rustc::rust_begin_unwind>:
__rustc::rust_begin_unwind:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:68

#[allow(dead_code)]
#[cfg_attr(target_os = "none", panic_handler)]
fn panic(info: &core::panic::PanicInfo) -> ! {
ffffff0000002610:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
ffffff0000002617:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3736
            Acquire => intrinsics::atomic_load_acquire(dst),
ffffff000000261c:	0f b6 05 eb 59 00 00 	movzbl 0x59eb(%rip),%eax        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::get:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:402

    /// Returns a reference to the inner value if the [`Once`] has been initialized.
    pub fn get(&self) -> Option<&T> {
        // SAFETY: Just as with `poll`, Acquire is safe here because we want to be able to see the
        // nonatomic stores done when initializing, once we have loaded and checked the status.
        match self.status.load(Ordering::Acquire) {
ffffff0000002623:	3c 02                	cmp    $0x2,%al
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:976
        match self {
ffffff0000002625:	0f 85 f7 00 00 00    	jne    ffffff0000002722 <__rustc::rust_begin_unwind+0x112>
core::sync::atomic::atomic_store:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3721
            Release => intrinsics::atomic_store_release(dst, val),
ffffff000000262b:	c6 05 ce 59 00 00 00 	movb   $0x0,0x59ce(%rip)        # ffffff0000008000 <ysos_kernel::drivers::serial::SERIAL>
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3735
            Relaxed => intrinsics::atomic_load_relaxed(dst),
ffffff0000002632:	48 8b 05 c7 49 00 00 	mov    0x49c7(%rip),%rax        # ffffff0000007000 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa18>
ffffff0000002639:	48 8b 00             	mov    (%rax),%rax
core::cmp::Ordering::is_le:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs:503
        self.as_raw() <= 0
ffffff000000263c:	48 85 c0             	test   %rax,%rax
__rustc::rust_begin_unwind:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:72
    // force unlock serial for panic output
    unsafe { SERIAL.get().unwrap().force_unlock() };

    error!("ERROR: panic!\n\n{:#?}", info);
ffffff000000263f:	0f 84 db 00 00 00    	je     ffffff0000002720 <__rustc::rust_begin_unwind+0x110>
ffffff0000002645:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
ffffff000000264a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff000000264f:	48 8d 05 9a fb ff ff 	lea    -0x466(%rip),%rax        # ffffff00000021f0 <<&T as core::fmt::Debug>::fmt>
ffffff0000002656:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff000000265b:	48 8d 3d 86 3b 00 00 	lea    0x3b86(%rip),%rdi        # ffffff00000061e8 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x918>
ffffff0000002662:	e8 b9 07 00 00       	call   ffffff0000002e20 <log::__private_api::loc>
core::panic::location::Location::file:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:130
        self.file
ffffff0000002667:	48 8b 08             	mov    (%rax),%rcx
ffffff000000266a:	48 8b 50 08          	mov    0x8(%rax),%rdx
core::panic::location::Location::line:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:155
        self.line
ffffff000000266e:	8b 40 10             	mov    0x10(%rax),%eax
<log::Record as core::clone::Clone>::clone:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:766
#[derive(Clone, Debug)]
ffffff0000002671:	48 c7 44 24 58 01 00 	movq   $0x1,0x58(%rsp)
ffffff0000002678:	00 00 
ffffff000000267a:	48 8d 35 7f db ff ff 	lea    -0x2481(%rip),%rsi        # ffffff0000000200 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0xda>
ffffff0000002681:	48 89 74 24 60       	mov    %rsi,0x60(%rsp)
ffffff0000002686:	48 c7 44 24 68 1a 00 	movq   $0x1a,0x68(%rsp)
ffffff000000268d:	00 00 
ffffff000000268f:	48 8d 3d 42 3b 00 00 	lea    0x3b42(%rip),%rdi        # ffffff00000061d8 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x908>
ffffff0000002696:	48 89 7c 24 78       	mov    %rdi,0x78(%rsp)
ffffff000000269b:	48 c7 84 24 80 00 00 	movq   $0x1,0x80(%rsp)
ffffff00000026a2:	00 01 00 00 00 
ffffff00000026a7:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
ffffff00000026ac:	48 89 bc 24 88 00 00 	mov    %rdi,0x88(%rsp)
ffffff00000026b3:	00 
ffffff00000026b4:	48 c7 84 24 90 00 00 	movq   $0x1,0x90(%rsp)
ffffff00000026bb:	00 01 00 00 00 
ffffff00000026c0:	48 8d 3d 09 db ff ff 	lea    -0x24f7(%rip),%rdi        # ffffff00000001d0 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0xaa>
ffffff00000026c7:	48 89 bc 24 98 00 00 	mov    %rdi,0x98(%rsp)
ffffff00000026ce:	00 
ffffff00000026cf:	48 c7 84 24 a0 00 00 	movq   $0x1,0xa0(%rsp)
ffffff00000026d6:	00 01 00 00 00 
ffffff00000026db:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
ffffff00000026e2:	00 00 
ffffff00000026e4:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
ffffff00000026e9:	48 c7 44 24 38 1a 00 	movq   $0x1a,0x38(%rsp)
ffffff00000026f0:	00 00 
ffffff00000026f2:	48 c7 44 24 40 00 00 	movq   $0x0,0x40(%rsp)
ffffff00000026f9:	00 00 
ffffff00000026fb:	48 89 4c 24 48       	mov    %rcx,0x48(%rsp)
ffffff0000002700:	48 89 54 24 50       	mov    %rdx,0x50(%rsp)
ffffff0000002705:	c7 44 24 70 01 00 00 	movl   $0x1,0x70(%rsp)
ffffff000000270c:	00 
ffffff000000270d:	89 44 24 74          	mov    %eax,0x74(%rsp)
ffffff0000002711:	48 8d 7c 24 0f       	lea    0xf(%rsp),%rdi
__rustc::rust_begin_unwind:
ffffff0000002716:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
log::__private_api::log_impl:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/__private_api.rs:81
ffffff000000271b:	e8 d0 06 00 00       	call   ffffff0000002df0 <<log::__private_api::GlobalLogger as log::Log>::log>
__rustc::rust_begin_unwind:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:73
    loop {}
ffffff0000002720:	eb fe                	jmp    ffffff0000002720 <__rustc::rust_begin_unwind+0x110>
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:978
            None => unwrap_failed(),
ffffff0000002722:	48 8d 3d 97 3a 00 00 	lea    0x3a97(%rip),%rdi        # ffffff00000061c0 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x8f0>
ffffff0000002729:	e8 f2 24 00 00       	call   ffffff0000004c20 <core::option::unwrap_failed>
__rustc::rust_begin_unwind:
ffffff000000272e:	cc                   	int3   
ffffff000000272f:	cc                   	int3   

ffffff0000002730 <ysos_kernel::utils::logger::init>:
ysos_kernel::utils::logger::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:3
use log::{Metadata, Record, Level, LevelFilter};

pub fn init() {
ffffff0000002730:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:5
    static LOGGER: Logger = Logger;
    log::set_logger(&LOGGER).expect("Failed to set logger");
ffffff0000002737:	48 8d 3d 3b db ff ff 	lea    -0x24c5(%rip),%rdi        # ffffff0000000279 <ysos_kernel::utils::logger::init::LOGGER>
ffffff000000273e:	48 8d 35 cb 3a 00 00 	lea    0x3acb(%rip),%rsi        # ffffff0000006210 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x940>
ffffff0000002745:	e8 46 06 00 00       	call   ffffff0000002d90 <log::set_logger>
core::result::Result<T,E>::expect:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1059
        match self {
ffffff000000274a:	84 c0                	test   %al,%al
ffffff000000274c:	0f 85 cc 00 00 00    	jne    ffffff000000281e <ysos_kernel::utils::logger::init+0xee>
core::sync::atomic::atomic_store:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3720
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
ffffff0000002752:	48 8b 05 a7 48 00 00 	mov    0x48a7(%rip),%rax        # ffffff0000007000 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa18>
ffffff0000002759:	48 c7 00 05 00 00 00 	movq   $0x5,(%rax)
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3735
            Relaxed => intrinsics::atomic_load_relaxed(dst),
ffffff0000002760:	48 8b 00             	mov    (%rax),%rax
core::cmp::Ordering::is_le:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs:503
ffffff0000002763:	48 83 f8 03          	cmp    $0x3,%rax
ysos_kernel::utils::logger::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:22
    // // 在release构建中，只使用info记录重要日志
    // #[cfg(not(debug_assertions))]
    // log::set_max_level(LevelFilter::Info);

    // 输出日志系统初始化成功的消息
    info!("Logger Initialized.");
ffffff0000002767:	0f 82 a9 00 00 00    	jb     ffffff0000002816 <ysos_kernel::utils::logger::init+0xe6>
ffffff000000276d:	48 8d 3d cc 3a 00 00 	lea    0x3acc(%rip),%rdi        # ffffff0000006240 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x970>
ffffff0000002774:	e8 a7 06 00 00       	call   ffffff0000002e20 <log::__private_api::loc>
core::panic::location::Location::file:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:130
        self.file
ffffff0000002779:	48 8b 08             	mov    (%rax),%rcx
ffffff000000277c:	48 8b 50 08          	mov    0x8(%rax),%rdx
core::panic::location::Location::line:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:155
        self.line
ffffff0000002780:	8b 40 10             	mov    0x10(%rax),%eax
<log::Record as core::clone::Clone>::clone:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:766
ffffff0000002783:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
ffffff000000278a:	00 00 
ffffff000000278c:	48 8d 35 cc da ff ff 	lea    -0x2534(%rip),%rsi        # ffffff000000025f <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x139>
ffffff0000002793:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
ffffff0000002798:	48 c7 44 24 48 1a 00 	movq   $0x1a,0x48(%rsp)
ffffff000000279f:	00 00 
ffffff00000027a1:	48 8d 3d 58 3a 00 00 	lea    0x3a58(%rip),%rdi        # ffffff0000006200 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x930>
ffffff00000027a8:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
ffffff00000027ad:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
ffffff00000027b4:	00 00 
ffffff00000027b6:	48 c7 44 24 68 08 00 	movq   $0x8,0x68(%rsp)
ffffff00000027bd:	00 00 
ffffff00000027bf:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffff00000027c6:	00 00 
ffffff00000027c8:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
ffffff00000027cf:	00 00 
ffffff00000027d1:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
ffffff00000027d8:	00 00 
ffffff00000027da:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff00000027df:	48 c7 44 24 18 1a 00 	movq   $0x1a,0x18(%rsp)
ffffff00000027e6:	00 00 
ffffff00000027e8:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
ffffff00000027ef:	00 00 
ffffff00000027f1:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
ffffff00000027f6:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffff00000027fb:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
ffffff0000002802:	00 
ffffff0000002803:	89 44 24 54          	mov    %eax,0x54(%rsp)
ffffff0000002807:	48 8d 7c 24 07       	lea    0x7(%rsp),%rdi
ysos_kernel::utils::logger::init:
ffffff000000280c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
log::__private_api::log_impl:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/__private_api.rs:81
ffffff0000002811:	e8 da 05 00 00       	call   ffffff0000002df0 <<log::__private_api::GlobalLogger as log::Log>::log>
ysos_kernel::utils::logger::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:23
}
ffffff0000002816:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffff000000281d:	c3                   	ret    
core::result::Result<T,E>::expect:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1061
            Err(e) => unwrap_failed(msg, &e),
ffffff000000281e:	48 8d 3d f5 d9 ff ff 	lea    -0x260b(%rip),%rdi        # ffffff000000021a <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0xf4>
ffffff0000002825:	48 8d 0d 2c 3a 00 00 	lea    0x3a2c(%rip),%rcx        # ffffff0000006258 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x988>
ffffff000000282c:	4c 8d 05 45 3a 00 00 	lea    0x3a45(%rip),%r8        # ffffff0000006278 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x9a8>
ffffff0000002833:	48 8d 54 24 07       	lea    0x7(%rsp),%rdx
ffffff0000002838:	be 14 00 00 00       	mov    $0x14,%esi
ffffff000000283d:	e8 1e 0c 00 00       	call   ffffff0000003460 <core::result::unwrap_failed>
ysos_kernel::utils::logger::init:
ffffff0000002842:	cc                   	int3   
ffffff0000002843:	cc                   	int3   
ffffff0000002844:	cc                   	int3   
ffffff0000002845:	cc                   	int3   
ffffff0000002846:	cc                   	int3   
ffffff0000002847:	cc                   	int3   
ffffff0000002848:	cc                   	int3   
ffffff0000002849:	cc                   	int3   
ffffff000000284a:	cc                   	int3   
ffffff000000284b:	cc                   	int3   
ffffff000000284c:	cc                   	int3   
ffffff000000284d:	cc                   	int3   
ffffff000000284e:	cc                   	int3   
ffffff000000284f:	cc                   	int3   

ffffff0000002850 <<ysos_kernel::utils::logger::Logger as log::Log>::enabled>:
<ysos_kernel::utils::logger::Logger as log::Log>::enabled:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:31

impl log::Log for Logger {
    // 默认了日志级别都在允许的范围内（可修改？
    fn enabled(&self, _metadata: &Metadata) -> bool {
        true
    }
ffffff0000002850:	b0 01                	mov    $0x1,%al
ffffff0000002852:	c3                   	ret    
ffffff0000002853:	cc                   	int3   
ffffff0000002854:	cc                   	int3   
ffffff0000002855:	cc                   	int3   
ffffff0000002856:	cc                   	int3   
ffffff0000002857:	cc                   	int3   
ffffff0000002858:	cc                   	int3   
ffffff0000002859:	cc                   	int3   
ffffff000000285a:	cc                   	int3   
ffffff000000285b:	cc                   	int3   
ffffff000000285c:	cc                   	int3   
ffffff000000285d:	cc                   	int3   
ffffff000000285e:	cc                   	int3   
ffffff000000285f:	cc                   	int3   

ffffff0000002860 <<ysos_kernel::utils::logger::Logger as log::Log>::log>:
<ysos_kernel::utils::logger::Logger as log::Log>::log:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:33

    fn log(&self, record: &Record) {
ffffff0000002860:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
log::Metadata::level:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:1098
        self.level
ffffff0000002867:	48 8b 46 30          	mov    0x30(%rsi),%rax
<ysos_kernel::utils::logger::Logger as log::Log>::log:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:51
            pub const DYAN: &str = "\x1b[36m"; // 青色
            pub const WHITE: &str = "\x1b[37m";
            pub const RESET: &str = "\x1b[0m";
        }

        let color_code = match record.level() {
ffffff000000286b:	48 8d 0d 26 dd ff ff 	lea    -0x22da(%rip),%rcx        # ffffff0000000598 <ysos_kernel::utils::logger::init::LOGGER+0x31f>
ffffff0000002872:	48 63 54 81 fc       	movslq -0x4(%rcx,%rax,4),%rdx
ffffff0000002877:	48 01 ca             	add    %rcx,%rdx
ffffff000000287a:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
ffffff000000287f:	48 c7 44 24 20 05 00 	movq   $0x5,0x20(%rsp)
ffffff0000002886:	00 00 
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:58
            log::Level::Warn => colors::YELLOW ,
            log::Level::Info => colors::GREEN ,
            log::Level::Debug => colors::DYAN ,
            log::Level::Trace => colors::WHITE ,
        };
        let reset_code = colors::RESET ;
ffffff0000002888:	48 8d 0d a3 d8 ff ff 	lea    -0x275d(%rip),%rcx        # ffffff0000000132 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0xc>
ffffff000000288f:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
ffffff0000002894:	48 c7 44 24 30 04 00 	movq   $0x4,0x30(%rsp)
ffffff000000289b:	00 00 
log::Metadata::level:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:1098
ffffff000000289d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
log::Record::file_static:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:849
        match self.file {
ffffff00000028a2:	48 8b 46 18          	mov    0x18(%rsi),%rax
ffffff00000028a6:	48 83 f8 02          	cmp    $0x2,%rax
ffffff00000028aa:	0f 84 4a 01 00 00    	je     ffffff00000029fa <<ysos_kernel::utils::logger::Logger as log::Log>::log+0x19a>
ffffff00000028b0:	a8 01                	test   $0x1,%al
ffffff00000028b2:	0f 85 42 01 00 00    	jne    ffffff00000029fa <<ysos_kernel::utils::logger::Logger as log::Log>::log+0x19a>
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:850
            Some(MaybeStaticStr::Static(s)) => Some(s),
ffffff00000028b8:	48 8b 46 20          	mov    0x20(%rsi),%rax
ffffff00000028bc:	48 8b 4e 28          	mov    0x28(%rsi),%rcx
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:977
            Some(val) => val,
ffffff00000028c0:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
ffffff00000028c5:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:976
        match self {
ffffff00000028ca:	83 7e 48 01          	cmpl   $0x1,0x48(%rsi)
ffffff00000028ce:	0f 85 32 01 00 00    	jne    ffffff0000002a06 <<ysos_kernel::utils::logger::Logger as log::Log>::log+0x1a6>
log::Record::line:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:858
        self.line
ffffff00000028d4:	8b 46 4c             	mov    0x4c(%rsi),%eax
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:977
            Some(val) => val,
ffffff00000028d7:	89 44 24 04          	mov    %eax,0x4(%rsp)
log::Metadata::target:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:1104
        self.target
ffffff00000028db:	48 8b 46 38          	mov    0x38(%rsi),%rax
ffffff00000028df:	48 8b 4e 40          	mov    0x40(%rsi),%rcx
ffffff00000028e3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff00000028e8:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
log::Record::args:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:804
        &self.args
ffffff00000028ed:	48 83 c6 50          	add    $0x50,%rsi
ffffff00000028f1:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff00000028f6:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
<ysos_kernel::utils::logger::Logger as log::Log>::log:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:47
        $crate::utils::print_internal(format_args!($($arg)*))
ffffff00000028fb:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
ffffff0000002902:	00 
ffffff0000002903:	48 8d 05 e6 f9 ff ff 	lea    -0x61a(%rip),%rax        # ffffff00000022f0 <<&T as core::fmt::Display>::fmt>
ffffff000000290a:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
ffffff0000002911:	00 
ffffff0000002912:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
ffffff0000002917:	48 89 8c 24 98 00 00 	mov    %rcx,0x98(%rsp)
ffffff000000291e:	00 
ffffff000000291f:	48 8b 0d ea 46 00 00 	mov    0x46ea(%rip),%rcx        # ffffff0000007010 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa28>
ffffff0000002926:	48 89 8c 24 a0 00 00 	mov    %rcx,0xa0(%rsp)
ffffff000000292d:	00 
ffffff000000292e:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
ffffff0000002933:	48 89 8c 24 a8 00 00 	mov    %rcx,0xa8(%rsp)
ffffff000000293a:	00 
ffffff000000293b:	48 89 84 24 b0 00 00 	mov    %rax,0xb0(%rsp)
ffffff0000002942:	00 
ffffff0000002943:	48 8d 4c 24 38       	lea    0x38(%rsp),%rcx
ffffff0000002948:	48 89 8c 24 b8 00 00 	mov    %rcx,0xb8(%rsp)
ffffff000000294f:	00 
ffffff0000002950:	48 89 84 24 c0 00 00 	mov    %rax,0xc0(%rsp)
ffffff0000002957:	00 
ffffff0000002958:	48 8d 4c 24 04       	lea    0x4(%rsp),%rcx
ffffff000000295d:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
ffffff0000002964:	00 
ffffff0000002965:	48 8b 0d 9c 46 00 00 	mov    0x469c(%rip),%rcx        # ffffff0000007008 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa20>
ffffff000000296c:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
ffffff0000002973:	00 
ffffff0000002974:	48 8d 4c 24 48       	lea    0x48(%rsp),%rcx
ffffff0000002979:	48 89 8c 24 d8 00 00 	mov    %rcx,0xd8(%rsp)
ffffff0000002980:	00 
ffffff0000002981:	48 89 84 24 e0 00 00 	mov    %rax,0xe0(%rsp)
ffffff0000002988:	00 
ffffff0000002989:	48 8d 44 24 10       	lea    0x10(%rsp),%rax
ffffff000000298e:	48 89 84 24 e8 00 00 	mov    %rax,0xe8(%rsp)
ffffff0000002995:	00 
ffffff0000002996:	48 8d 05 73 f9 ff ff 	lea    -0x68d(%rip),%rax        # ffffff0000002310 <<&T as core::fmt::Display>::fmt>
ffffff000000299d:	48 89 84 24 f0 00 00 	mov    %rax,0xf0(%rsp)
ffffff00000029a4:	00 
core::fmt::Arguments::new_v1_formatted:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:660
        Arguments { pieces, fmt: Some(fmt), args }
ffffff00000029a5:	48 8d 05 e4 38 00 00 	lea    0x38e4(%rip),%rax        # ffffff0000006290 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0x9c0>
ffffff00000029ac:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
ffffff00000029b1:	48 c7 44 24 60 08 00 	movq   $0x8,0x60(%rsp)
ffffff00000029b8:	00 00 
ffffff00000029ba:	48 8d 05 df d8 ff ff 	lea    -0x2721(%rip),%rax        # ffffff00000002a0 <ysos_kernel::utils::logger::init::LOGGER+0x27>
ffffff00000029c1:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
ffffff00000029c6:	48 c7 84 24 80 00 00 	movq   $0x7,0x80(%rsp)
ffffff00000029cd:	00 07 00 00 00 
ffffff00000029d2:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
ffffff00000029d9:	00 
ffffff00000029da:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
ffffff00000029df:	48 c7 44 24 70 07 00 	movq   $0x7,0x70(%rsp)
ffffff00000029e6:	00 00 
ffffff00000029e8:	48 8d 7c 24 58       	lea    0x58(%rsp),%rdi
<ysos_kernel::utils::logger::Logger as log::Log>::log:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:47
ffffff00000029ed:	e8 7e fb ff ff       	call   ffffff0000002570 <ysos_kernel::utils::macros::print_internal>
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:74
            record.file_static().unwrap(),
            record.line().unwrap(),
            record.target(),
            record.args()
        };
    }
ffffff00000029f2:	48 81 c4 f8 00 00 00 	add    $0xf8,%rsp
ffffff00000029f9:	c3                   	ret    
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:978
            None => unwrap_failed(),
ffffff00000029fa:	48 8d 3d 27 39 00 00 	lea    0x3927(%rip),%rdi        # ffffff0000006328 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xa58>
ffffff0000002a01:	e8 1a 22 00 00       	call   ffffff0000004c20 <core::option::unwrap_failed>
core::option::Option<T>::unwrap:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:978
ffffff0000002a06:	48 8d 3d 03 39 00 00 	lea    0x3903(%rip),%rdi        # ffffff0000006310 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xa40>
ffffff0000002a0d:	e8 0e 22 00 00       	call   ffffff0000004c20 <core::option::unwrap_failed>
<ysos_kernel::utils::logger::Logger as log::Log>::log:
ffffff0000002a12:	cc                   	int3   
ffffff0000002a13:	cc                   	int3   
ffffff0000002a14:	cc                   	int3   
ffffff0000002a15:	cc                   	int3   
ffffff0000002a16:	cc                   	int3   
ffffff0000002a17:	cc                   	int3   
ffffff0000002a18:	cc                   	int3   
ffffff0000002a19:	cc                   	int3   
ffffff0000002a1a:	cc                   	int3   
ffffff0000002a1b:	cc                   	int3   
ffffff0000002a1c:	cc                   	int3   
ffffff0000002a1d:	cc                   	int3   
ffffff0000002a1e:	cc                   	int3   
ffffff0000002a1f:	cc                   	int3   

ffffff0000002a20 <<ysos_kernel::utils::logger::Logger as log::Log>::flush>:
<ysos_kernel::utils::logger::Logger as log::Log>::flush:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/logger.rs:76

    fn flush(&self) {}
ffffff0000002a20:	c3                   	ret    
ffffff0000002a21:	cc                   	int3   
ffffff0000002a22:	cc                   	int3   
ffffff0000002a23:	cc                   	int3   
ffffff0000002a24:	cc                   	int3   
ffffff0000002a25:	cc                   	int3   
ffffff0000002a26:	cc                   	int3   
ffffff0000002a27:	cc                   	int3   
ffffff0000002a28:	cc                   	int3   
ffffff0000002a29:	cc                   	int3   
ffffff0000002a2a:	cc                   	int3   
ffffff0000002a2b:	cc                   	int3   
ffffff0000002a2c:	cc                   	int3   
ffffff0000002a2d:	cc                   	int3   
ffffff0000002a2e:	cc                   	int3   
ffffff0000002a2f:	cc                   	int3   

ffffff0000002a30 <<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str>:
<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:1620
ffffff0000002a30:	48 85 d2             	test   %rdx,%rdx
<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs:179
ffffff0000002a33:	74 42                	je     ffffff0000002a77 <<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str+0x47>
<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str:
ffffff0000002a35:	48 89 d1             	mov    %rdx,%rcx
ffffff0000002a38:	48 01 f1             	add    %rsi,%rcx
ffffff0000002a3b:	44 0f b7 17          	movzwl (%rdi),%r10d
ffffff0000002a3f:	44 0f b7 47 0a       	movzwl 0xa(%rdi),%r8d
ffffff0000002a44:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000002a4b:	00 00 00 00 00 
core::option::Option<&T>::copied:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1899
            Some(&v) => Some(v),
ffffff0000002a50:	44 0f b6 0e          	movzbl (%rsi),%r9d
<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str:
ffffff0000002a54:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000002a5b:	00 00 00 00 00 
x86_64::instructions::port::<impl x86_64::structures::port::PortRead for u8>::read_from_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:15
            asm!("in al, dx", out("al") value, in("dx") port, options(nomem, nostack, preserves_flags));
ffffff0000002a60:	44 89 c2             	mov    %r8d,%edx
ffffff0000002a63:	ec                   	in     (%dx),%al
ysos_kernel::drivers::uart16550::SerialPort::send:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/drivers/uart16550.rs:74
ffffff0000002a64:	a8 20                	test   $0x20,%al
ffffff0000002a66:	74 f8                	je     ffffff0000002a60 <<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str+0x30>
core::ptr::non_null::NonNull<T>::add:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:616
        unsafe { NonNull { pointer: intrinsics::offset(self.as_ptr(), count) } }
ffffff0000002a68:	48 ff c6             	inc    %rsi
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002a6b:	44 89 d2             	mov    %r10d,%edx
ffffff0000002a6e:	44 89 c8             	mov    %r9d,%eax
ffffff0000002a71:	ee                   	out    %al,(%dx)
<core::ptr::non_null::NonNull<T> as core::cmp::PartialEq>::eq:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ptr/non_null.rs:1620
        self.as_ptr() == other.as_ptr()
ffffff0000002a72:	48 39 ce             	cmp    %rcx,%rsi
<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/iter/macros.rs:179
ffffff0000002a75:	75 d9                	jne    ffffff0000002a50 <<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str+0x20>
<ysos_kernel::drivers::uart16550::SerialPort as core::fmt::Write>::write_str:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/drivers/uart16550.rs:99
    fn write_str(&mut self, s: &str) -> fmt::Result {
        for byte in s.bytes() {
            self.send(byte);
        }
        Ok(())
    }
ffffff0000002a77:	31 c0                	xor    %eax,%eax
ffffff0000002a79:	c3                   	ret    
ffffff0000002a7a:	cc                   	int3   
ffffff0000002a7b:	cc                   	int3   
ffffff0000002a7c:	cc                   	int3   
ffffff0000002a7d:	cc                   	int3   
ffffff0000002a7e:	cc                   	int3   
ffffff0000002a7f:	cc                   	int3   

ffffff0000002a80 <ysos_kernel::init>:
ysos_kernel::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/lib.rs:19
mod drivers;

use boot::BootInfo;
use uefi::{runtime::ResetType, Status};

pub fn init(boot_info: &'static BootInfo) {
ffffff0000002a80:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/lib.rs:22
    unsafe {
        // set uefi system table
        uefi::table::set_system_table(boot_info.system_table.cast().as_ptr());
ffffff0000002a87:	48 8b 3f             	mov    (%rdi),%rdi
ffffff0000002a8a:	e8 91 02 00 00       	call   ffffff0000002d20 <uefi::table::set_system_table>
ffffff0000002a8f:	48 b8 f8 03 f9 03 fa 	movabs $0x3fb03fa03f903f8,%rax
ffffff0000002a96:	03 fb 03 
ysos_kernel::drivers::uart16550::SerialPort::new:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/drivers/uart16550.rs:17
        SerialPort {
ffffff0000002a99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffff0000002a9e:	c7 44 24 10 fc 03 fd 	movl   $0x3fd03fc,0x10(%rsp)
ffffff0000002aa5:	03 
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3736
            Acquire => intrinsics::atomic_load_acquire(dst),
ffffff0000002aa6:	0f b6 05 61 55 00 00 	movzbl 0x5561(%rip),%eax        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::get:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:402
ffffff0000002aad:	3c 02                	cmp    $0x2,%al
spin::once::Once<T,R>::try_call_once:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:209
        if let Some(value) = self.get() {
ffffff0000002aaf:	0f 85 de 01 00 00    	jne    ffffff0000002c93 <ysos_kernel::init+0x213>
ysos_kernel::drivers::serial::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/drivers/serial.rs:9

once_mutex!(pub SERIAL: SerialPort);

pub fn init() {
    init_SERIAL(SerialPort::new(SERIAL_IO_PORT));
    get_serial_for_sure().init();
ffffff0000002ab5:	e8 26 02 00 00       	call   ffffff0000002ce0 <ysos_kernel::drivers::serial::get_serial_for_sure>
x86_64::instructions::port::PortGeneric<T,A>::write:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:176
    #[doc(alias = "outb")]
    #[doc(alias = "outw")]
    #[doc(alias = "outl")]
    #[inline]
    pub unsafe fn write(&mut self, value: T) {
        unsafe { T::write_to_port(self.port, value) }
ffffff0000002aba:	0f b7 0d 43 55 00 00 	movzwl 0x5543(%rip),%ecx        # ffffff0000008004 <ysos_kernel::drivers::serial::SERIAL+0x4>
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002ac1:	89 ca                	mov    %ecx,%edx
ffffff0000002ac3:	31 c0                	xor    %eax,%eax
ffffff0000002ac5:	ee                   	out    %al,(%dx)
x86_64::instructions::port::PortGeneric<T,A>::write:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:176
        unsafe { T::write_to_port(self.port, value) }
ffffff0000002ac6:	0f b7 35 3b 55 00 00 	movzwl 0x553b(%rip),%esi        # ffffff0000008008 <ysos_kernel::drivers::serial::SERIAL+0x8>
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002acd:	89 f2                	mov    %esi,%edx
ffffff0000002acf:	b0 80                	mov    $0x80,%al
ffffff0000002ad1:	ee                   	out    %al,(%dx)
x86_64::instructions::port::PortGeneric<T,A>::write:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:176
        unsafe { T::write_to_port(self.port, value) }
ffffff0000002ad2:	0f b7 3d 29 55 00 00 	movzwl 0x5529(%rip),%edi        # ffffff0000008002 <ysos_kernel::drivers::serial::SERIAL+0x2>
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002ad9:	89 fa                	mov    %edi,%edx
ffffff0000002adb:	b0 03                	mov    $0x3,%al
ffffff0000002add:	ee                   	out    %al,(%dx)
ffffff0000002ade:	89 ca                	mov    %ecx,%edx
ffffff0000002ae0:	b8 00 00 00 00       	mov    $0x0,%eax
ffffff0000002ae5:	ee                   	out    %al,(%dx)
ffffff0000002ae6:	89 f2                	mov    %esi,%edx
ffffff0000002ae8:	b0 03                	mov    $0x3,%al
ffffff0000002aea:	ee                   	out    %al,(%dx)
x86_64::instructions::port::PortGeneric<T,A>::write:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:176
        unsafe { T::write_to_port(self.port, value) }
ffffff0000002aeb:	0f b7 15 14 55 00 00 	movzwl 0x5514(%rip),%edx        # ffffff0000008006 <ysos_kernel::drivers::serial::SERIAL+0x6>
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002af2:	b0 c7                	mov    $0xc7,%al
ffffff0000002af4:	ee                   	out    %al,(%dx)
x86_64::instructions::port::PortGeneric<T,A>::write:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:176
        unsafe { T::write_to_port(self.port, value) }
ffffff0000002af5:	0f b7 0d 0e 55 00 00 	movzwl 0x550e(%rip),%ecx        # ffffff000000800a <ysos_kernel::drivers::serial::SERIAL+0xa>
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002afc:	89 ca                	mov    %ecx,%edx
ffffff0000002afe:	b0 0b                	mov    $0xb,%al
ffffff0000002b00:	ee                   	out    %al,(%dx)
ffffff0000002b01:	b0 1e                	mov    $0x1e,%al
ffffff0000002b03:	ee                   	out    %al,(%dx)
ffffff0000002b04:	89 fa                	mov    %edi,%edx
ffffff0000002b06:	b0 ae                	mov    $0xae,%al
ffffff0000002b08:	ee                   	out    %al,(%dx)
x86_64::instructions::port::<impl x86_64::structures::port::PortRead for u8>::read_from_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:15
            asm!("in al, dx", out("al") value, in("dx") port, options(nomem, nostack, preserves_flags));
ffffff0000002b09:	ec                   	in     (%dx),%al
ysos_kernel::drivers::uart16550::SerialPort::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/drivers/uart16550.rs:59
            if self.data.read() != 0xAE {
ffffff0000002b0a:	3c ae                	cmp    $0xae,%al
ffffff0000002b0c:	75 05                	jne    ffffff0000002b13 <ysos_kernel::init+0x93>
x86_64::instructions::port::<impl x86_64::structures::port::PortWrite for u8>::write_to_port:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/x86_64-0.15.2/src/instructions/port.rs:47
            asm!("out dx, al", in("dx") port, in("al") value, options(nomem, nostack, preserves_flags));
ffffff0000002b0e:	89 ca                	mov    %ecx,%edx
ffffff0000002b10:	b0 0f                	mov    $0xf,%al
ffffff0000002b12:	ee                   	out    %al,(%dx)
core::sync::atomic::atomic_store:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3721
            Release => intrinsics::atomic_store_release(dst, val),
ffffff0000002b13:	c6 05 e6 54 00 00 00 	movb   $0x0,0x54e6(%rip)        # ffffff0000008000 <ysos_kernel::drivers::serial::SERIAL>
ysos_kernel::utils::get_ascii_header:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/mod.rs:8

pub mod logger;
pub use macros::*;

pub const fn get_ascii_header() -> &'static str {
    concat!(
ffffff0000002b1a:	48 8d 05 e8 d8 ff ff 	lea    -0x2718(%rip),%rax        # ffffff0000000409 <ysos_kernel::utils::logger::init::LOGGER+0x190>
ffffff0000002b21:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
ffffff0000002b28:	00 
ffffff0000002b29:	48 c7 84 24 a0 00 00 	movq   $0x10c,0xa0(%rsp)
ffffff0000002b30:	00 0c 01 00 00 
ffffff0000002b35:	48 8d 84 24 98 00 00 	lea    0x98(%rsp),%rax
ffffff0000002b3c:	00 
ysos_kernel::drivers::serial::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:47
ffffff0000002b3d:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
ffffff0000002b44:	00 
ffffff0000002b45:	48 8d 05 a4 f7 ff ff 	lea    -0x85c(%rip),%rax        # ffffff00000022f0 <<&T as core::fmt::Display>::fmt>
ffffff0000002b4c:	48 89 84 24 90 00 00 	mov    %rax,0x90(%rsp)
ffffff0000002b53:	00 
core::fmt::Arguments::new_v1:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:643
        Arguments { pieces, fmt: None, args }
ffffff0000002b54:	48 8d 05 e5 37 00 00 	lea    0x37e5(%rip),%rax        # ffffff0000006340 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xa70>
ffffff0000002b5b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffff0000002b60:	48 c7 44 24 10 02 00 	movq   $0x2,0x10(%rsp)
ffffff0000002b67:	00 00 
ffffff0000002b69:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
ffffff0000002b70:	00 00 
ffffff0000002b72:	48 8d 84 24 88 00 00 	lea    0x88(%rsp),%rax
ffffff0000002b79:	00 
ffffff0000002b7a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000002b7f:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
ffffff0000002b86:	00 00 
ffffff0000002b88:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
ysos_kernel::drivers::serial::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:47
ffffff0000002b8d:	e8 de f9 ff ff       	call   ffffff0000002570 <ysos_kernel::utils::macros::print_internal>
core::fmt::Arguments::new_v1:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs:643
ffffff0000002b92:	48 8d 05 c7 37 00 00 	lea    0x37c7(%rip),%rax        # ffffff0000006360 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xa90>
ffffff0000002b99:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffff0000002b9e:	48 c7 44 24 10 01 00 	movq   $0x1,0x10(%rsp)
ffffff0000002ba5:	00 00 
ffffff0000002ba7:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
ffffff0000002bae:	00 00 
ffffff0000002bb0:	48 89 e0             	mov    %rsp,%rax
ffffff0000002bb3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000002bb8:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
ffffff0000002bbf:	00 00 
ffffff0000002bc1:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
ysos_kernel::drivers::serial::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:47
ffffff0000002bc6:	e8 a5 f9 ff ff       	call   ffffff0000002570 <ysos_kernel::utils::macros::print_internal>
ysos_kernel::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/lib.rs:26
    }

    drivers::serial::init(); // init serial output
    logger::init(); // init logger system
ffffff0000002bcb:	e8 60 fb ff ff       	call   ffffff0000002730 <ysos_kernel::utils::logger::init>
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3735
            Relaxed => intrinsics::atomic_load_relaxed(dst),
ffffff0000002bd0:	48 8b 05 29 44 00 00 	mov    0x4429(%rip),%rax        # ffffff0000007000 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa18>
ffffff0000002bd7:	48 8b 00             	mov    (%rax),%rax
core::cmp::Ordering::is_le:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs:503
ffffff0000002bda:	48 83 f8 03          	cmp    $0x3,%rax
ysos_kernel::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/lib.rs:28

    info!("YatSenOS initialized.");
ffffff0000002bde:	0f 82 a7 00 00 00    	jb     ffffff0000002c8b <ysos_kernel::init+0x20b>
ffffff0000002be4:	48 8d 3d 95 37 00 00 	lea    0x3795(%rip),%rdi        # ffffff0000006380 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xab0>
ffffff0000002beb:	e8 30 02 00 00       	call   ffffff0000002e20 <log::__private_api::loc>
core::panic::location::Location::file:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:130
        self.file
ffffff0000002bf0:	48 8b 08             	mov    (%rax),%rcx
ffffff0000002bf3:	48 8b 50 08          	mov    0x8(%rax),%rdx
core::panic::location::Location::line:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/location.rs:155
        self.line
ffffff0000002bf7:	8b 40 10             	mov    0x10(%rax),%eax
<log::Record as core::clone::Clone>::clone:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/lib.rs:766
#[derive(Clone, Debug)]
ffffff0000002bfa:	48 c7 44 24 38 03 00 	movq   $0x3,0x38(%rsp)
ffffff0000002c01:	00 00 
ffffff0000002c03:	48 8d 35 35 d9 ff ff 	lea    -0x26cb(%rip),%rsi        # ffffff000000053f <ysos_kernel::utils::logger::init::LOGGER+0x2c6>
ffffff0000002c0a:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
ffffff0000002c0f:	48 c7 44 24 48 0b 00 	movq   $0xb,0x48(%rsp)
ffffff0000002c16:	00 00 
ffffff0000002c18:	48 8d 3d 51 37 00 00 	lea    0x3751(%rip),%rdi        # ffffff0000006370 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xaa0>
ffffff0000002c1f:	48 89 7c 24 58       	mov    %rdi,0x58(%rsp)
ffffff0000002c24:	48 c7 44 24 60 01 00 	movq   $0x1,0x60(%rsp)
ffffff0000002c2b:	00 00 
ffffff0000002c2d:	48 c7 44 24 68 08 00 	movq   $0x8,0x68(%rsp)
ffffff0000002c34:	00 00 
ffffff0000002c36:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffff0000002c3d:	00 00 
ffffff0000002c3f:	48 c7 44 24 70 00 00 	movq   $0x0,0x70(%rsp)
ffffff0000002c46:	00 00 
ffffff0000002c48:	48 c7 44 24 78 00 00 	movq   $0x0,0x78(%rsp)
ffffff0000002c4f:	00 00 
ffffff0000002c51:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff0000002c56:	48 c7 44 24 18 0b 00 	movq   $0xb,0x18(%rsp)
ffffff0000002c5d:	00 00 
ffffff0000002c5f:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
ffffff0000002c66:	00 00 
ffffff0000002c68:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
ffffff0000002c6d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
ffffff0000002c72:	c7 44 24 50 01 00 00 	movl   $0x1,0x50(%rsp)
ffffff0000002c79:	00 
ffffff0000002c7a:	89 44 24 54          	mov    %eax,0x54(%rsp)
ffffff0000002c7e:	48 89 e7             	mov    %rsp,%rdi
ysos_kernel::init:
ffffff0000002c81:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
log::__private_api::log_impl:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/log-0.4.27/src/__private_api.rs:81
ffffff0000002c86:	e8 65 01 00 00       	call   ffffff0000002df0 <<log::__private_api::GlobalLogger as log::Log>::log>
ysos_kernel::init:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/lib.rs:29
}
ffffff0000002c8b:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
ffffff0000002c92:	c3                   	ret    
ffffff0000002c93:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
spin::once::Once<T,R>::try_call_once:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:212
            self.try_call_once_slow(f)
ffffff0000002c98:	e8 a3 f7 ff ff       	call   ffffff0000002440 <spin::once::Once<T,R>::try_call_once_slow>
ffffff0000002c9d:	e9 13 fe ff ff       	jmp    ffffff0000002ab5 <ysos_kernel::init+0x35>
ysos_kernel::init:
ffffff0000002ca2:	cc                   	int3   
ffffff0000002ca3:	cc                   	int3   
ffffff0000002ca4:	cc                   	int3   
ffffff0000002ca5:	cc                   	int3   
ffffff0000002ca6:	cc                   	int3   
ffffff0000002ca7:	cc                   	int3   
ffffff0000002ca8:	cc                   	int3   
ffffff0000002ca9:	cc                   	int3   
ffffff0000002caa:	cc                   	int3   
ffffff0000002cab:	cc                   	int3   
ffffff0000002cac:	cc                   	int3   
ffffff0000002cad:	cc                   	int3   
ffffff0000002cae:	cc                   	int3   
ffffff0000002caf:	cc                   	int3   

ffffff0000002cb0 <ysos_kernel::drivers::serial::get_serial>:
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3736
            Acquire => intrinsics::atomic_load_acquire(dst),
ffffff0000002cb0:	0f b6 05 57 53 00 00 	movzbl 0x5357(%rip),%eax        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::get:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:402
        match self.status.load(Ordering::Acquire) {
ffffff0000002cb7:	3c 02                	cmp    $0x2,%al
core::option::Option<T>::and_then:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1451
        match self {
ffffff0000002cb9:	75 1d                	jne    ffffff0000002cd8 <ysos_kernel::drivers::serial::get_serial+0x28>
ysos_kernel::drivers::serial::get_serial:
ffffff0000002cbb:	b1 01                	mov    $0x1,%cl
core::sync::atomic::atomic_compare_exchange:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3810
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
ffffff0000002cbd:	31 c0                	xor    %eax,%eax
ffffff0000002cbf:	f0 0f b0 0d 39 53 00 	lock cmpxchg %cl,0x5339(%rip)        # ffffff0000008000 <ysos_kernel::drivers::serial::SERIAL>
ffffff0000002cc6:	00 
ffffff0000002cc7:	b8 00 00 00 00       	mov    $0x0,%eax
ffffff0000002ccc:	48 8d 0d 2d 53 00 00 	lea    0x532d(%rip),%rcx        # ffffff0000008000 <ysos_kernel::drivers::serial::SERIAL>
core::sync::atomic::AtomicBool::compare_exchange:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:834
            match unsafe {
ffffff0000002cd3:	48 0f 44 c1          	cmove  %rcx,%rax
ysos_kernel::drivers::serial::get_serial:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:16
            }
ffffff0000002cd7:	c3                   	ret    
ffffff0000002cd8:	31 c0                	xor    %eax,%eax
ffffff0000002cda:	c3                   	ret    
ffffff0000002cdb:	cc                   	int3   
ffffff0000002cdc:	cc                   	int3   
ffffff0000002cdd:	cc                   	int3   
ffffff0000002cde:	cc                   	int3   
ffffff0000002cdf:	cc                   	int3   

ffffff0000002ce0 <ysos_kernel::drivers::serial::get_serial_for_sure>:
core::sync::atomic::atomic_load:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3736
            Acquire => intrinsics::atomic_load_acquire(dst),
ffffff0000002ce0:	0f b6 05 27 53 00 00 	movzbl 0x5327(%rip),%eax        # ffffff000000800e <ysos_kernel::drivers::serial::SERIAL+0xe>
spin::once::Once<T,R>::get:
/home/zhm/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-e791a3f93f26854f/spin-0.9.8/src/once.rs:402
ffffff0000002ce7:	3c 02                	cmp    $0x2,%al
core::option::Option<T>::and_then:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1451
ffffff0000002ce9:	75 0f                	jne    ffffff0000002cfa <ysos_kernel::drivers::serial::get_serial_for_sure+0x1a>
ysos_kernel::drivers::serial::get_serial_for_sure:
ffffff0000002ceb:	b1 01                	mov    $0x1,%cl
core::sync::atomic::atomic_compare_exchange:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:3810
            (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),
ffffff0000002ced:	31 c0                	xor    %eax,%eax
ffffff0000002cef:	f0 0f b0 0d 09 53 00 	lock cmpxchg %cl,0x5309(%rip)        # ffffff0000008000 <ysos_kernel::drivers::serial::SERIAL>
ffffff0000002cf6:	00 
core::sync::atomic::AtomicBool::compare_exchange:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/sync/atomic.rs:834
            match unsafe {
ffffff0000002cf7:	75 01                	jne    ffffff0000002cfa <ysos_kernel::drivers::serial::get_serial_for_sure+0x1a>
ysos_kernel::drivers::serial::get_serial_for_sure:
/home/zhm/rust/YatSenOS-Tutorial-Volume-2/src/0x01/pkg/kernel/src/utils/macros.rs:25
            }
ffffff0000002cf9:	c3                   	ret    
ffffff0000002cfa:	50                   	push   %rax
core::option::Option<T>::expect:
/home/zhm/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:933
            None => expect_failed(msg),
ffffff0000002cfb:	48 8d 3d 48 d8 ff ff 	lea    -0x27b8(%rip),%rdi        # ffffff000000054a <ysos_kernel::utils::logger::init::LOGGER+0x2d1>
ffffff0000002d02:	48 8d 15 8f 36 00 00 	lea    0x368f(%rip),%rdx        # ffffff0000006398 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xac8>
ffffff0000002d09:	be 2b 00 00 00       	mov    $0x2b,%esi
ffffff0000002d0e:	e8 2d 1f 00 00       	call   ffffff0000004c40 <core::option::expect_failed>
ysos_kernel::drivers::serial::get_serial_for_sure:
ffffff0000002d13:	cc                   	int3   
ffffff0000002d14:	cc                   	int3   
ffffff0000002d15:	cc                   	int3   
ffffff0000002d16:	cc                   	int3   
ffffff0000002d17:	cc                   	int3   
ffffff0000002d18:	cc                   	int3   
ffffff0000002d19:	cc                   	int3   
ffffff0000002d1a:	cc                   	int3   
ffffff0000002d1b:	cc                   	int3   
ffffff0000002d1c:	cc                   	int3   
ffffff0000002d1d:	cc                   	int3   
ffffff0000002d1e:	cc                   	int3   
ffffff0000002d1f:	cc                   	int3   

ffffff0000002d20 <uefi::table::set_system_table>:
uefi::table::set_system_table:
ffffff0000002d20:	48 89 3d e9 52 00 00 	mov    %rdi,0x52e9(%rip)        # ffffff0000008010 <_ZN4uefi5table12SYSTEM_TABLE17hfedea468de0576e1E.0.llvm.13096524608976328227>
ffffff0000002d27:	c3                   	ret    
ffffff0000002d28:	cc                   	int3   
ffffff0000002d29:	cc                   	int3   
ffffff0000002d2a:	cc                   	int3   
ffffff0000002d2b:	cc                   	int3   
ffffff0000002d2c:	cc                   	int3   
ffffff0000002d2d:	cc                   	int3   
ffffff0000002d2e:	cc                   	int3   
ffffff0000002d2f:	cc                   	int3   

ffffff0000002d30 <<log::Level as core::fmt::Display>::fmt>:
<log::Level as core::fmt::Display>::fmt:
ffffff0000002d30:	48 89 f0             	mov    %rsi,%rax
ffffff0000002d33:	48 8b 0f             	mov    (%rdi),%rcx
ffffff0000002d36:	48 c1 e1 04          	shl    $0x4,%rcx
ffffff0000002d3a:	48 8d 15 af 36 00 00 	lea    0x36af(%rip),%rdx        # ffffff00000063f0 <log::LOG_LEVEL_NAMES>
ffffff0000002d41:	48 8b 34 11          	mov    (%rcx,%rdx,1),%rsi
ffffff0000002d45:	48 8b 54 11 08       	mov    0x8(%rcx,%rdx,1),%rdx
ffffff0000002d4a:	48 89 c7             	mov    %rax,%rdi
ffffff0000002d4d:	e9 4e 10 00 00       	jmp    ffffff0000003da0 <core::fmt::Formatter::pad>
ffffff0000002d52:	cc                   	int3   
ffffff0000002d53:	cc                   	int3   
ffffff0000002d54:	cc                   	int3   
ffffff0000002d55:	cc                   	int3   
ffffff0000002d56:	cc                   	int3   
ffffff0000002d57:	cc                   	int3   
ffffff0000002d58:	cc                   	int3   
ffffff0000002d59:	cc                   	int3   
ffffff0000002d5a:	cc                   	int3   
ffffff0000002d5b:	cc                   	int3   
ffffff0000002d5c:	cc                   	int3   
ffffff0000002d5d:	cc                   	int3   
ffffff0000002d5e:	cc                   	int3   
ffffff0000002d5f:	cc                   	int3   

ffffff0000002d60 <<log::NopLogger as log::Log>::enabled>:
<log::NopLogger as log::Log>::enabled:
ffffff0000002d60:	31 c0                	xor    %eax,%eax
ffffff0000002d62:	c3                   	ret    
ffffff0000002d63:	cc                   	int3   
ffffff0000002d64:	cc                   	int3   
ffffff0000002d65:	cc                   	int3   
ffffff0000002d66:	cc                   	int3   
ffffff0000002d67:	cc                   	int3   
ffffff0000002d68:	cc                   	int3   
ffffff0000002d69:	cc                   	int3   
ffffff0000002d6a:	cc                   	int3   
ffffff0000002d6b:	cc                   	int3   
ffffff0000002d6c:	cc                   	int3   
ffffff0000002d6d:	cc                   	int3   
ffffff0000002d6e:	cc                   	int3   
ffffff0000002d6f:	cc                   	int3   

ffffff0000002d70 <<log::NopLogger as log::Log>::log>:
<log::NopLogger as log::Log>::log:
ffffff0000002d70:	c3                   	ret    
ffffff0000002d71:	cc                   	int3   
ffffff0000002d72:	cc                   	int3   
ffffff0000002d73:	cc                   	int3   
ffffff0000002d74:	cc                   	int3   
ffffff0000002d75:	cc                   	int3   
ffffff0000002d76:	cc                   	int3   
ffffff0000002d77:	cc                   	int3   
ffffff0000002d78:	cc                   	int3   
ffffff0000002d79:	cc                   	int3   
ffffff0000002d7a:	cc                   	int3   
ffffff0000002d7b:	cc                   	int3   
ffffff0000002d7c:	cc                   	int3   
ffffff0000002d7d:	cc                   	int3   
ffffff0000002d7e:	cc                   	int3   
ffffff0000002d7f:	cc                   	int3   

ffffff0000002d80 <<log::NopLogger as log::Log>::flush>:
<log::NopLogger as log::Log>::flush:
ffffff0000002d80:	c3                   	ret    
ffffff0000002d81:	cc                   	int3   
ffffff0000002d82:	cc                   	int3   
ffffff0000002d83:	cc                   	int3   
ffffff0000002d84:	cc                   	int3   
ffffff0000002d85:	cc                   	int3   
ffffff0000002d86:	cc                   	int3   
ffffff0000002d87:	cc                   	int3   
ffffff0000002d88:	cc                   	int3   
ffffff0000002d89:	cc                   	int3   
ffffff0000002d8a:	cc                   	int3   
ffffff0000002d8b:	cc                   	int3   
ffffff0000002d8c:	cc                   	int3   
ffffff0000002d8d:	cc                   	int3   
ffffff0000002d8e:	cc                   	int3   
ffffff0000002d8f:	cc                   	int3   

ffffff0000002d90 <log::set_logger>:
log::set_logger:
ffffff0000002d90:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffff0000002d95:	31 c0                	xor    %eax,%eax
ffffff0000002d97:	f0 48 0f b1 0d 78 52 	lock cmpxchg %rcx,0x5278(%rip)        # ffffff0000008018 <log::STATE>
ffffff0000002d9e:	00 00 
ffffff0000002da0:	48 89 c1             	mov    %rax,%rcx
ffffff0000002da3:	0f 94 c0             	sete   %al
ffffff0000002da6:	75 1c                	jne    ffffff0000002dc4 <log::set_logger+0x34>
ffffff0000002da8:	48 89 3d 31 36 00 00 	mov    %rdi,0x3631(%rip)        # ffffff00000063e0 <_ZN3log6LOGGER17h1a1365b25a66c29cE.0>
ffffff0000002daf:	48 89 35 32 36 00 00 	mov    %rsi,0x3632(%rip)        # ffffff00000063e8 <_ZN3log6LOGGER17h1a1365b25a66c29cE.1>
ffffff0000002db6:	48 c7 05 57 52 00 00 	movq   $0x2,0x5257(%rip)        # ffffff0000008018 <log::STATE>
ffffff0000002dbd:	02 00 00 00 
ffffff0000002dc1:	34 01                	xor    $0x1,%al
ffffff0000002dc3:	c3                   	ret    
ffffff0000002dc4:	48 83 f9 01          	cmp    $0x1,%rcx
ffffff0000002dc8:	75 22                	jne    ffffff0000002dec <log::set_logger+0x5c>
ffffff0000002dca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffff0000002dd0:	48 8b 0d 41 52 00 00 	mov    0x5241(%rip),%rcx        # ffffff0000008018 <log::STATE>
ffffff0000002dd7:	48 83 f9 01          	cmp    $0x1,%rcx
ffffff0000002ddb:	75 0f                	jne    ffffff0000002dec <log::set_logger+0x5c>
ffffff0000002ddd:	f3 90                	pause  
ffffff0000002ddf:	48 8b 0d 32 52 00 00 	mov    0x5232(%rip),%rcx        # ffffff0000008018 <log::STATE>
ffffff0000002de6:	48 83 f9 01          	cmp    $0x1,%rcx
ffffff0000002dea:	74 f1                	je     ffffff0000002ddd <log::set_logger+0x4d>
ffffff0000002dec:	34 01                	xor    $0x1,%al
ffffff0000002dee:	c3                   	ret    
ffffff0000002def:	cc                   	int3   

ffffff0000002df0 <<log::__private_api::GlobalLogger as log::Log>::log>:
<log::__private_api::GlobalLogger as log::Log>::log:
ffffff0000002df0:	48 8b 05 21 52 00 00 	mov    0x5221(%rip),%rax        # ffffff0000008018 <log::STATE>
ffffff0000002df7:	48 83 f8 02          	cmp    $0x2,%rax
ffffff0000002dfb:	48 8d 05 ae 35 00 00 	lea    0x35ae(%rip),%rax        # ffffff00000063b0 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051+0xae0>
ffffff0000002e02:	48 0f 44 05 de 35 00 	cmove  0x35de(%rip),%rax        # ffffff00000063e8 <_ZN3log6LOGGER17h1a1365b25a66c29cE.1>
ffffff0000002e09:	00 
ffffff0000002e0a:	48 8d 3d ad d7 ff ff 	lea    -0x2853(%rip),%rdi        # ffffff00000005be <anon.9f008dacf7fdd293cb38256ae16de0b9.2.llvm.12764318300441418232>
ffffff0000002e11:	48 0f 44 3d c7 35 00 	cmove  0x35c7(%rip),%rdi        # ffffff00000063e0 <_ZN3log6LOGGER17h1a1365b25a66c29cE.0>
ffffff0000002e18:	00 
ffffff0000002e19:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffff0000002e1d:	ff e0                	jmp    *%rax
ffffff0000002e1f:	cc                   	int3   

ffffff0000002e20 <log::__private_api::loc>:
log::__private_api::loc:
ffffff0000002e20:	48 89 f8             	mov    %rdi,%rax
ffffff0000002e23:	c3                   	ret    
ffffff0000002e24:	cc                   	int3   
ffffff0000002e25:	cc                   	int3   
ffffff0000002e26:	cc                   	int3   
ffffff0000002e27:	cc                   	int3   
ffffff0000002e28:	cc                   	int3   
ffffff0000002e29:	cc                   	int3   
ffffff0000002e2a:	cc                   	int3   
ffffff0000002e2b:	cc                   	int3   
ffffff0000002e2c:	cc                   	int3   
ffffff0000002e2d:	cc                   	int3   
ffffff0000002e2e:	cc                   	int3   
ffffff0000002e2f:	cc                   	int3   

ffffff0000002e30 <core::fmt::num::<impl core::fmt::LowerHex for i32>::fmt>:
core::fmt::num::<impl core::fmt::LowerHex for u32>::fmt:
ffffff0000002e30:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
ffffff0000002e37:	8b 07                	mov    (%rdi),%eax
ffffff0000002e39:	45 31 c9             	xor    %r9d,%r9d
ffffff0000002e3c:	89 c1                	mov    %eax,%ecx
ffffff0000002e3e:	66 90                	xchg   %ax,%ax
ffffff0000002e40:	c1 e9 04             	shr    $0x4,%ecx
ffffff0000002e43:	89 c2                	mov    %eax,%edx
ffffff0000002e45:	80 e2 0f             	and    $0xf,%dl
ffffff0000002e48:	8d 7a 30             	lea    0x30(%rdx),%edi
ffffff0000002e4b:	44 8d 42 57          	lea    0x57(%rdx),%r8d
ffffff0000002e4f:	80 fa 0a             	cmp    $0xa,%dl
ffffff0000002e52:	40 0f b6 d7          	movzbl %dil,%edx
ffffff0000002e56:	41 0f b6 f8          	movzbl %r8b,%edi
ffffff0000002e5a:	0f 42 fa             	cmovb  %edx,%edi
ffffff0000002e5d:	42 88 bc 0c 87 00 00 	mov    %dil,0x87(%rsp,%r9,1)
ffffff0000002e64:	00 
ffffff0000002e65:	49 ff c9             	dec    %r9
ffffff0000002e68:	83 f8 0f             	cmp    $0xf,%eax
ffffff0000002e6b:	89 c8                	mov    %ecx,%eax
ffffff0000002e6d:	77 d1                	ja     ffffff0000002e40 <core::fmt::num::<impl core::fmt::LowerHex for i32>::fmt+0x10>
ffffff0000002e6f:	4e 8d 04 0c          	lea    (%rsp,%r9,1),%r8
ffffff0000002e73:	49 81 c0 88 00 00 00 	add    $0x88,%r8
ffffff0000002e7a:	49 f7 d9             	neg    %r9
ffffff0000002e7d:	48 8d 15 3a d7 ff ff 	lea    -0x28c6(%rip),%rdx        # ffffff00000005be <anon.9f008dacf7fdd293cb38256ae16de0b9.2.llvm.12764318300441418232>
ffffff0000002e84:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffff0000002e89:	48 89 f7             	mov    %rsi,%rdi
ffffff0000002e8c:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000002e91:	e8 7a 0b 00 00       	call   ffffff0000003a10 <core::fmt::Formatter::pad_integral>
ffffff0000002e96:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffff0000002e9d:	c3                   	ret    
ffffff0000002e9e:	cc                   	int3   
ffffff0000002e9f:	cc                   	int3   

ffffff0000002ea0 <core::fmt::num::<impl core::fmt::UpperHex for i32>::fmt>:
core::fmt::num::<impl core::fmt::UpperHex for u32>::fmt:
ffffff0000002ea0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
ffffff0000002ea7:	8b 07                	mov    (%rdi),%eax
ffffff0000002ea9:	45 31 c9             	xor    %r9d,%r9d
ffffff0000002eac:	89 c1                	mov    %eax,%ecx
ffffff0000002eae:	66 90                	xchg   %ax,%ax
ffffff0000002eb0:	c1 e9 04             	shr    $0x4,%ecx
ffffff0000002eb3:	89 c2                	mov    %eax,%edx
ffffff0000002eb5:	80 e2 0f             	and    $0xf,%dl
ffffff0000002eb8:	8d 7a 30             	lea    0x30(%rdx),%edi
ffffff0000002ebb:	44 8d 42 37          	lea    0x37(%rdx),%r8d
ffffff0000002ebf:	80 fa 0a             	cmp    $0xa,%dl
ffffff0000002ec2:	40 0f b6 d7          	movzbl %dil,%edx
ffffff0000002ec6:	41 0f b6 f8          	movzbl %r8b,%edi
ffffff0000002eca:	0f 42 fa             	cmovb  %edx,%edi
ffffff0000002ecd:	42 88 bc 0c 87 00 00 	mov    %dil,0x87(%rsp,%r9,1)
ffffff0000002ed4:	00 
ffffff0000002ed5:	49 ff c9             	dec    %r9
ffffff0000002ed8:	83 f8 0f             	cmp    $0xf,%eax
ffffff0000002edb:	89 c8                	mov    %ecx,%eax
ffffff0000002edd:	77 d1                	ja     ffffff0000002eb0 <core::fmt::num::<impl core::fmt::UpperHex for i32>::fmt+0x10>
ffffff0000002edf:	4e 8d 04 0c          	lea    (%rsp,%r9,1),%r8
ffffff0000002ee3:	49 81 c0 88 00 00 00 	add    $0x88,%r8
ffffff0000002eea:	49 f7 d9             	neg    %r9
ffffff0000002eed:	48 8d 15 ca d6 ff ff 	lea    -0x2936(%rip),%rdx        # ffffff00000005be <anon.9f008dacf7fdd293cb38256ae16de0b9.2.llvm.12764318300441418232>
ffffff0000002ef4:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffff0000002ef9:	48 89 f7             	mov    %rsi,%rdi
ffffff0000002efc:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000002f01:	e8 0a 0b 00 00       	call   ffffff0000003a10 <core::fmt::Formatter::pad_integral>
ffffff0000002f06:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffff0000002f0d:	c3                   	ret    
ffffff0000002f0e:	cc                   	int3   
ffffff0000002f0f:	cc                   	int3   

ffffff0000002f10 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>:
core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt:
ffffff0000002f10:	48 89 f2             	mov    %rsi,%rdx
ffffff0000002f13:	8b 3f                	mov    (%rdi),%edi
ffffff0000002f15:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000002f1a:	e9 01 00 00 00       	jmp    ffffff0000002f20 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691>
ffffff0000002f1f:	cc                   	int3   

ffffff0000002f20 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691>:
_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691():
ffffff0000002f20:	55                   	push   %rbp
ffffff0000002f21:	41 56                	push   %r14
ffffff0000002f23:	53                   	push   %rbx
ffffff0000002f24:	48 83 ec 10          	sub    $0x10,%rsp
ffffff0000002f28:	48 89 d0             	mov    %rdx,%rax
ffffff0000002f2b:	b9 0a 00 00 00       	mov    $0xa,%ecx
ffffff0000002f30:	48 8d 15 89 d6 ff ff 	lea    -0x2977(%rip),%rdx        # ffffff00000005c0 <anon.9f008dacf7fdd293cb38256ae16de0b9.5.llvm.12764318300441418232>
ffffff0000002f37:	41 89 f8             	mov    %edi,%r8d
ffffff0000002f3a:	81 ff e8 03 00 00    	cmp    $0x3e8,%edi
ffffff0000002f40:	72 6f                	jb     ffffff0000002fb1 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691+0x91>
ffffff0000002f42:	41 bb 0a 00 00 00    	mov    $0xa,%r11d
ffffff0000002f48:	41 b9 59 17 b7 d1    	mov    $0xd1b71759,%r9d
ffffff0000002f4e:	41 89 fa             	mov    %edi,%r10d
ffffff0000002f51:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000002f58:	0f 1f 84 00 00 00 00 
ffffff0000002f5f:	00 
ffffff0000002f60:	49 8d 4b fc          	lea    -0x4(%r11),%rcx
ffffff0000002f64:	45 89 d0             	mov    %r10d,%r8d
ffffff0000002f67:	4d 0f af c1          	imul   %r9,%r8
ffffff0000002f6b:	49 c1 e8 2d          	shr    $0x2d,%r8
ffffff0000002f6f:	41 69 d8 10 27 00 00 	imul   $0x2710,%r8d,%ebx
ffffff0000002f76:	44 89 d5             	mov    %r10d,%ebp
ffffff0000002f79:	29 dd                	sub    %ebx,%ebp
ffffff0000002f7b:	69 dd 7b 14 00 00    	imul   $0x147b,%ebp,%ebx
ffffff0000002f81:	c1 eb 13             	shr    $0x13,%ebx
ffffff0000002f84:	44 6b f3 64          	imul   $0x64,%ebx,%r14d
ffffff0000002f88:	44 29 f5             	sub    %r14d,%ebp
ffffff0000002f8b:	0f b7 1c 5a          	movzwl (%rdx,%rbx,2),%ebx
ffffff0000002f8f:	66 42 89 5c 1c 02    	mov    %bx,0x2(%rsp,%r11,1)
ffffff0000002f95:	0f b7 dd             	movzwl %bp,%ebx
ffffff0000002f98:	0f b7 1c 5a          	movzwl (%rdx,%rbx,2),%ebx
ffffff0000002f9c:	66 42 89 5c 1c 04    	mov    %bx,0x4(%rsp,%r11,1)
ffffff0000002fa2:	49 89 cb             	mov    %rcx,%r11
ffffff0000002fa5:	41 81 fa 7f 96 98 00 	cmp    $0x98967f,%r10d
ffffff0000002fac:	45 89 c2             	mov    %r8d,%r10d
ffffff0000002faf:	77 af                	ja     ffffff0000002f60 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691+0x40>
ffffff0000002fb1:	41 83 f8 09          	cmp    $0x9,%r8d
ffffff0000002fb5:	76 30                	jbe    ffffff0000002fe7 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691+0xc7>
ffffff0000002fb7:	45 0f b7 c8          	movzwl %r8w,%r9d
ffffff0000002fbb:	41 c1 e9 02          	shr    $0x2,%r9d
ffffff0000002fbf:	45 69 c9 7b 14 00 00 	imul   $0x147b,%r9d,%r9d
ffffff0000002fc6:	41 c1 e9 11          	shr    $0x11,%r9d
ffffff0000002fca:	45 6b d1 64          	imul   $0x64,%r9d,%r10d
ffffff0000002fce:	45 29 d0             	sub    %r10d,%r8d
ffffff0000002fd1:	45 0f b7 c0          	movzwl %r8w,%r8d
ffffff0000002fd5:	46 0f b7 04 42       	movzwl (%rdx,%r8,2),%r8d
ffffff0000002fda:	66 44 89 44 0c 04    	mov    %r8w,0x4(%rsp,%rcx,1)
ffffff0000002fe0:	48 83 c1 fe          	add    $0xfffffffffffffffe,%rcx
ffffff0000002fe4:	45 89 c8             	mov    %r9d,%r8d
ffffff0000002fe7:	85 ff                	test   %edi,%edi
ffffff0000002fe9:	74 05                	je     ffffff0000002ff0 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691+0xd0>
ffffff0000002feb:	45 85 c0             	test   %r8d,%r8d
ffffff0000002fee:	74 11                	je     ffffff0000003001 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u32$GT$4_fmt17haf6223ef8914a493E.llvm.9356072628919187691+0xe1>
ffffff0000002ff0:	41 83 e0 0f          	and    $0xf,%r8d
ffffff0000002ff4:	42 0f b6 54 42 01    	movzbl 0x1(%rdx,%r8,2),%edx
ffffff0000002ffa:	88 54 0c 05          	mov    %dl,0x5(%rsp,%rcx,1)
ffffff0000002ffe:	48 ff c9             	dec    %rcx
ffffff0000003001:	41 b9 0a 00 00 00    	mov    $0xa,%r9d
ffffff0000003007:	49 29 c9             	sub    %rcx,%r9
ffffff000000300a:	4c 8d 04 0c          	lea    (%rsp,%rcx,1),%r8
ffffff000000300e:	49 83 c0 06          	add    $0x6,%r8
ffffff0000003012:	40 0f b6 f6          	movzbl %sil,%esi
ffffff0000003016:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff000000301b:	48 89 c7             	mov    %rax,%rdi
ffffff000000301e:	31 c9                	xor    %ecx,%ecx
ffffff0000003020:	e8 eb 09 00 00       	call   ffffff0000003a10 <core::fmt::Formatter::pad_integral>
ffffff0000003025:	48 83 c4 10          	add    $0x10,%rsp
ffffff0000003029:	5b                   	pop    %rbx
ffffff000000302a:	41 5e                	pop    %r14
ffffff000000302c:	5d                   	pop    %rbp
ffffff000000302d:	c3                   	ret    
ffffff000000302e:	cc                   	int3   
ffffff000000302f:	cc                   	int3   

ffffff0000003030 <core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt>:
core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt:
ffffff0000003030:	48 89 f2             	mov    %rsi,%rdx
ffffff0000003033:	48 8b 3f             	mov    (%rdi),%rdi
ffffff0000003036:	be 01 00 00 00       	mov    $0x1,%esi
ffffff000000303b:	e9 00 00 00 00       	jmp    ffffff0000003040 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691>

ffffff0000003040 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691>:
_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691():
ffffff0000003040:	55                   	push   %rbp
ffffff0000003041:	41 56                	push   %r14
ffffff0000003043:	53                   	push   %rbx
ffffff0000003044:	48 83 ec 20          	sub    $0x20,%rsp
ffffff0000003048:	48 89 d1             	mov    %rdx,%rcx
ffffff000000304b:	41 ba 14 00 00 00    	mov    $0x14,%r10d
ffffff0000003051:	4c 8d 0d 68 d5 ff ff 	lea    -0x2a98(%rip),%r9        # ffffff00000005c0 <anon.9f008dacf7fdd293cb38256ae16de0b9.5.llvm.12764318300441418232>
ffffff0000003058:	48 89 fa             	mov    %rdi,%rdx
ffffff000000305b:	48 81 ff e8 03 00 00 	cmp    $0x3e8,%rdi
ffffff0000003062:	72 6b                	jb     ffffff00000030cf <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691+0x8f>
ffffff0000003064:	bb 14 00 00 00       	mov    $0x14,%ebx
ffffff0000003069:	49 bb 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%r11
ffffff0000003070:	c5 6d 34 
ffffff0000003073:	49 89 f8             	mov    %rdi,%r8
ffffff0000003076:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffff000000307d:	00 00 00 
ffffff0000003080:	4c 8d 53 fc          	lea    -0x4(%rbx),%r10
ffffff0000003084:	4c 89 c0             	mov    %r8,%rax
ffffff0000003087:	49 f7 e3             	mul    %r11
ffffff000000308a:	48 c1 ea 0b          	shr    $0xb,%rdx
ffffff000000308e:	69 c2 10 27 00 00    	imul   $0x2710,%edx,%eax
ffffff0000003094:	44 89 c5             	mov    %r8d,%ebp
ffffff0000003097:	29 c5                	sub    %eax,%ebp
ffffff0000003099:	69 c5 7b 14 00 00    	imul   $0x147b,%ebp,%eax
ffffff000000309f:	c1 e8 13             	shr    $0x13,%eax
ffffff00000030a2:	44 6b f0 64          	imul   $0x64,%eax,%r14d
ffffff00000030a6:	44 29 f5             	sub    %r14d,%ebp
ffffff00000030a9:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
ffffff00000030ae:	66 89 44 1c 08       	mov    %ax,0x8(%rsp,%rbx,1)
ffffff00000030b3:	0f b7 c5             	movzwl %bp,%eax
ffffff00000030b6:	41 0f b7 04 41       	movzwl (%r9,%rax,2),%eax
ffffff00000030bb:	66 89 44 1c 0a       	mov    %ax,0xa(%rsp,%rbx,1)
ffffff00000030c0:	4c 89 d3             	mov    %r10,%rbx
ffffff00000030c3:	49 81 f8 7f 96 98 00 	cmp    $0x98967f,%r8
ffffff00000030ca:	49 89 d0             	mov    %rdx,%r8
ffffff00000030cd:	77 b1                	ja     ffffff0000003080 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691+0x40>
ffffff00000030cf:	48 83 fa 09          	cmp    $0x9,%rdx
ffffff00000030d3:	76 2d                	jbe    ffffff0000003102 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691+0xc2>
ffffff00000030d5:	89 d0                	mov    %edx,%eax
ffffff00000030d7:	c1 e8 02             	shr    $0x2,%eax
ffffff00000030da:	0f b7 c0             	movzwl %ax,%eax
ffffff00000030dd:	69 c0 7b 14 00 00    	imul   $0x147b,%eax,%eax
ffffff00000030e3:	c1 e8 11             	shr    $0x11,%eax
ffffff00000030e6:	44 6b c0 64          	imul   $0x64,%eax,%r8d
ffffff00000030ea:	44 29 c2             	sub    %r8d,%edx
ffffff00000030ed:	0f b7 d2             	movzwl %dx,%edx
ffffff00000030f0:	41 0f b7 14 51       	movzwl (%r9,%rdx,2),%edx
ffffff00000030f5:	66 42 89 54 14 0a    	mov    %dx,0xa(%rsp,%r10,1)
ffffff00000030fb:	49 83 c2 fe          	add    $0xfffffffffffffffe,%r10
ffffff00000030ff:	48 89 c2             	mov    %rax,%rdx
ffffff0000003102:	48 85 ff             	test   %rdi,%rdi
ffffff0000003105:	74 05                	je     ffffff000000310c <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691+0xcc>
ffffff0000003107:	48 85 d2             	test   %rdx,%rdx
ffffff000000310a:	74 11                	je     ffffff000000311d <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691+0xdd>
ffffff000000310c:	83 e2 0f             	and    $0xf,%edx
ffffff000000310f:	41 0f b6 44 51 01    	movzbl 0x1(%r9,%rdx,2),%eax
ffffff0000003115:	42 88 44 14 0b       	mov    %al,0xb(%rsp,%r10,1)
ffffff000000311a:	49 ff ca             	dec    %r10
ffffff000000311d:	41 b9 14 00 00 00    	mov    $0x14,%r9d
ffffff0000003123:	4d 29 d1             	sub    %r10,%r9
ffffff0000003126:	4e 8d 04 14          	lea    (%rsp,%r10,1),%r8
ffffff000000312a:	49 83 c0 0c          	add    $0xc,%r8
ffffff000000312e:	40 0f b6 f6          	movzbl %sil,%esi
ffffff0000003132:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff0000003137:	48 89 cf             	mov    %rcx,%rdi
ffffff000000313a:	31 c9                	xor    %ecx,%ecx
ffffff000000313c:	e8 cf 08 00 00       	call   ffffff0000003a10 <core::fmt::Formatter::pad_integral>
ffffff0000003141:	48 83 c4 20          	add    $0x20,%rsp
ffffff0000003145:	5b                   	pop    %rbx
ffffff0000003146:	41 5e                	pop    %r14
ffffff0000003148:	5d                   	pop    %rbp
ffffff0000003149:	c3                   	ret    
ffffff000000314a:	cc                   	int3   
ffffff000000314b:	cc                   	int3   
ffffff000000314c:	cc                   	int3   
ffffff000000314d:	cc                   	int3   
ffffff000000314e:	cc                   	int3   
ffffff000000314f:	cc                   	int3   

ffffff0000003150 <core::unicode::unicode_data::grapheme_extend::lookup_slow>:
core::unicode::unicode_data::grapheme_extend::lookup_slow:
ffffff0000003150:	89 f8                	mov    %edi,%eax
ffffff0000003152:	c1 e0 0b             	shl    $0xb,%eax
ffffff0000003155:	31 c9                	xor    %ecx,%ecx
ffffff0000003157:	81 ff 2f 18 01 00    	cmp    $0x1182f,%edi
ffffff000000315d:	be 11 00 00 00       	mov    $0x11,%esi
ffffff0000003162:	48 0f 42 f1          	cmovb  %rcx,%rsi
ffffff0000003166:	4c 8d 46 08          	lea    0x8(%rsi),%r8
ffffff000000316a:	48 8d 15 07 d8 ff ff 	lea    -0x27f9(%rip),%rdx        # ffffff0000000978 <core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS>
ffffff0000003171:	44 8b 4c b2 20       	mov    0x20(%rdx,%rsi,4),%r9d
ffffff0000003176:	41 c1 e1 0b          	shl    $0xb,%r9d
ffffff000000317a:	41 39 c1             	cmp    %eax,%r9d
ffffff000000317d:	4c 0f 47 c6          	cmova  %rsi,%r8
ffffff0000003181:	49 8d 70 04          	lea    0x4(%r8),%rsi
ffffff0000003185:	46 8b 4c 82 10       	mov    0x10(%rdx,%r8,4),%r9d
ffffff000000318a:	41 c1 e1 0b          	shl    $0xb,%r9d
ffffff000000318e:	41 39 c1             	cmp    %eax,%r9d
ffffff0000003191:	49 0f 47 f0          	cmova  %r8,%rsi
ffffff0000003195:	4c 8d 46 02          	lea    0x2(%rsi),%r8
ffffff0000003199:	44 8b 4c b2 08       	mov    0x8(%rdx,%rsi,4),%r9d
ffffff000000319e:	41 c1 e1 0b          	shl    $0xb,%r9d
ffffff00000031a2:	41 39 c1             	cmp    %eax,%r9d
ffffff00000031a5:	4c 0f 47 c6          	cmova  %rsi,%r8
ffffff00000031a9:	49 8d 70 01          	lea    0x1(%r8),%rsi
ffffff00000031ad:	46 8b 4c 82 04       	mov    0x4(%rdx,%r8,4),%r9d
ffffff00000031b2:	41 c1 e1 0b          	shl    $0xb,%r9d
ffffff00000031b6:	41 39 c1             	cmp    %eax,%r9d
ffffff00000031b9:	49 0f 47 f0          	cmova  %r8,%rsi
ffffff00000031bd:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
ffffff00000031c1:	44 8b 44 b2 04       	mov    0x4(%rdx,%rsi,4),%r8d
ffffff00000031c6:	41 c1 e0 0b          	shl    $0xb,%r8d
ffffff00000031ca:	41 39 c0             	cmp    %eax,%r8d
ffffff00000031cd:	4c 0f 47 ce          	cmova  %rsi,%r9
ffffff00000031d1:	42 8b 34 8a          	mov    (%rdx,%r9,4),%esi
ffffff00000031d5:	c1 e6 0b             	shl    $0xb,%esi
ffffff00000031d8:	45 31 c0             	xor    %r8d,%r8d
ffffff00000031db:	39 c6                	cmp    %eax,%esi
ffffff00000031dd:	41 0f 94 c0          	sete   %r8b
ffffff00000031e1:	4d 11 c8             	adc    %r9,%r8
ffffff00000031e4:	42 8b 04 82          	mov    (%rdx,%r8,4),%eax
ffffff00000031e8:	c1 e8 15             	shr    $0x15,%eax
ffffff00000031eb:	be ef 02 00 00       	mov    $0x2ef,%esi
ffffff00000031f0:	49 83 f8 20          	cmp    $0x20,%r8
ffffff00000031f4:	77 0d                	ja     ffffff0000003203 <core::unicode::unicode_data::grapheme_extend::lookup_slow+0xb3>
ffffff00000031f6:	42 8b 74 82 04       	mov    0x4(%rdx,%r8,4),%esi
ffffff00000031fb:	c1 ee 15             	shr    $0x15,%esi
ffffff00000031fe:	4d 85 c0             	test   %r8,%r8
ffffff0000003201:	74 0a                	je     ffffff000000320d <core::unicode::unicode_data::grapheme_extend::lookup_slow+0xbd>
ffffff0000003203:	b9 ff ff 1f 00       	mov    $0x1fffff,%ecx
ffffff0000003208:	42 23 4c 82 fc       	and    -0x4(%rdx,%r8,4),%ecx
ffffff000000320d:	48 89 c2             	mov    %rax,%rdx
ffffff0000003210:	48 f7 d2             	not    %rdx
ffffff0000003213:	48 01 f2             	add    %rsi,%rdx
ffffff0000003216:	74 2e                	je     ffffff0000003246 <core::unicode::unicode_data::grapheme_extend::lookup_slow+0xf6>
ffffff0000003218:	29 cf                	sub    %ecx,%edi
ffffff000000321a:	48 ff ce             	dec    %rsi
ffffff000000321d:	31 d2                	xor    %edx,%edx
ffffff000000321f:	48 8d 0d 62 d4 ff ff 	lea    -0x2b9e(%rip),%rcx        # ffffff0000000688 <core::unicode::unicode_data::grapheme_extend::OFFSETS>
ffffff0000003226:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffff000000322d:	00 00 00 
ffffff0000003230:	41 89 d0             	mov    %edx,%r8d
ffffff0000003233:	0f b6 14 08          	movzbl (%rax,%rcx,1),%edx
ffffff0000003237:	44 01 c2             	add    %r8d,%edx
ffffff000000323a:	39 fa                	cmp    %edi,%edx
ffffff000000323c:	77 08                	ja     ffffff0000003246 <core::unicode::unicode_data::grapheme_extend::lookup_slow+0xf6>
ffffff000000323e:	48 ff c0             	inc    %rax
ffffff0000003241:	48 39 c6             	cmp    %rax,%rsi
ffffff0000003244:	75 ea                	jne    ffffff0000003230 <core::unicode::unicode_data::grapheme_extend::lookup_slow+0xe0>
ffffff0000003246:	24 01                	and    $0x1,%al
ffffff0000003248:	c3                   	ret    
ffffff0000003249:	cc                   	int3   
ffffff000000324a:	cc                   	int3   
ffffff000000324b:	cc                   	int3   
ffffff000000324c:	cc                   	int3   
ffffff000000324d:	cc                   	int3   
ffffff000000324e:	cc                   	int3   
ffffff000000324f:	cc                   	int3   

ffffff0000003250 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>:
<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt:
ffffff0000003250:	41 56                	push   %r14
ffffff0000003252:	53                   	push   %rbx
ffffff0000003253:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
ffffff000000325a:	48 89 f3             	mov    %rsi,%rbx
ffffff000000325d:	49 89 fe             	mov    %rdi,%r14
ffffff0000003260:	8b 46 10             	mov    0x10(%rsi),%eax
ffffff0000003263:	a9 00 00 00 02       	test   $0x2000000,%eax
ffffff0000003268:	75 2e                	jne    ffffff0000003298 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x48>
ffffff000000326a:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffff000000326f:	75 72                	jne    ffffff00000032e3 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x93>
ffffff0000003271:	49 8b 3e             	mov    (%r14),%rdi
ffffff0000003274:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000003279:	48 89 da             	mov    %rbx,%rdx
ffffff000000327c:	e8 bf fd ff ff       	call   ffffff0000003040 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691>
ffffff0000003281:	89 c1                	mov    %eax,%ecx
ffffff0000003283:	b0 01                	mov    $0x1,%al
ffffff0000003285:	84 c9                	test   %cl,%cl
ffffff0000003287:	0f 84 c7 00 00 00    	je     ffffff0000003354 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x104>
ffffff000000328d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffff0000003294:	5b                   	pop    %rbx
ffffff0000003295:	41 5e                	pop    %r14
ffffff0000003297:	c3                   	ret    
ffffff0000003298:	49 8b 06             	mov    (%r14),%rax
ffffff000000329b:	45 31 c9             	xor    %r9d,%r9d
ffffff000000329e:	48 89 c1             	mov    %rax,%rcx
ffffff00000032a1:	66 66 66 66 66 66 2e 	data16 data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff00000032a8:	0f 1f 84 00 00 00 00 
ffffff00000032af:	00 
ffffff00000032b0:	48 c1 e9 04          	shr    $0x4,%rcx
ffffff00000032b4:	89 c2                	mov    %eax,%edx
ffffff00000032b6:	80 e2 0f             	and    $0xf,%dl
ffffff00000032b9:	8d 72 30             	lea    0x30(%rdx),%esi
ffffff00000032bc:	8d 7a 57             	lea    0x57(%rdx),%edi
ffffff00000032bf:	80 fa 0a             	cmp    $0xa,%dl
ffffff00000032c2:	40 0f b6 d6          	movzbl %sil,%edx
ffffff00000032c6:	40 0f b6 f7          	movzbl %dil,%esi
ffffff00000032ca:	0f 42 f2             	cmovb  %edx,%esi
ffffff00000032cd:	42 88 b4 0c 87 00 00 	mov    %sil,0x87(%rsp,%r9,1)
ffffff00000032d4:	00 
ffffff00000032d5:	49 ff c9             	dec    %r9
ffffff00000032d8:	48 83 f8 0f          	cmp    $0xf,%rax
ffffff00000032dc:	48 89 c8             	mov    %rcx,%rax
ffffff00000032df:	77 cf                	ja     ffffff00000032b0 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x60>
ffffff00000032e1:	eb 3e                	jmp    ffffff0000003321 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0xd1>
ffffff00000032e3:	49 8b 06             	mov    (%r14),%rax
ffffff00000032e6:	45 31 c9             	xor    %r9d,%r9d
ffffff00000032e9:	48 89 c1             	mov    %rax,%rcx
ffffff00000032ec:	0f 1f 40 00          	nopl   0x0(%rax)
ffffff00000032f0:	48 c1 e9 04          	shr    $0x4,%rcx
ffffff00000032f4:	89 c2                	mov    %eax,%edx
ffffff00000032f6:	80 e2 0f             	and    $0xf,%dl
ffffff00000032f9:	8d 72 30             	lea    0x30(%rdx),%esi
ffffff00000032fc:	8d 7a 37             	lea    0x37(%rdx),%edi
ffffff00000032ff:	80 fa 0a             	cmp    $0xa,%dl
ffffff0000003302:	40 0f b6 d6          	movzbl %sil,%edx
ffffff0000003306:	40 0f b6 f7          	movzbl %dil,%esi
ffffff000000330a:	0f 42 f2             	cmovb  %edx,%esi
ffffff000000330d:	42 88 b4 0c 87 00 00 	mov    %sil,0x87(%rsp,%r9,1)
ffffff0000003314:	00 
ffffff0000003315:	49 ff c9             	dec    %r9
ffffff0000003318:	48 83 f8 0f          	cmp    $0xf,%rax
ffffff000000331c:	48 89 c8             	mov    %rcx,%rax
ffffff000000331f:	77 cf                	ja     ffffff00000032f0 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0xa0>
ffffff0000003321:	4e 8d 04 0c          	lea    (%rsp,%r9,1),%r8
ffffff0000003325:	49 81 c0 88 00 00 00 	add    $0x88,%r8
ffffff000000332c:	49 f7 d9             	neg    %r9
ffffff000000332f:	48 8d 15 88 d2 ff ff 	lea    -0x2d78(%rip),%rdx        # ffffff00000005be <anon.9f008dacf7fdd293cb38256ae16de0b9.2.llvm.12764318300441418232>
ffffff0000003336:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffff000000333b:	48 89 df             	mov    %rbx,%rdi
ffffff000000333e:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000003343:	e8 c8 06 00 00       	call   ffffff0000003a10 <core::fmt::Formatter::pad_integral>
ffffff0000003348:	89 c1                	mov    %eax,%ecx
ffffff000000334a:	b0 01                	mov    $0x1,%al
ffffff000000334c:	84 c9                	test   %cl,%cl
ffffff000000334e:	0f 85 39 ff ff ff    	jne    ffffff000000328d <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x3d>
ffffff0000003354:	48 8b 3b             	mov    (%rbx),%rdi
ffffff0000003357:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffff000000335b:	48 8d 35 9e d6 ff ff 	lea    -0x2962(%rip),%rsi        # ffffff0000000a00 <core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS+0x88>
ffffff0000003362:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff0000003367:	ff 50 18             	call   *0x18(%rax)
ffffff000000336a:	89 c1                	mov    %eax,%ecx
ffffff000000336c:	b0 01                	mov    $0x1,%al
ffffff000000336e:	84 c9                	test   %cl,%cl
ffffff0000003370:	0f 85 17 ff ff ff    	jne    ffffff000000328d <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x3d>
ffffff0000003376:	8b 43 10             	mov    0x10(%rbx),%eax
ffffff0000003379:	a9 00 00 00 02       	test   $0x2000000,%eax
ffffff000000337e:	75 22                	jne    ffffff00000033a2 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x152>
ffffff0000003380:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffff0000003385:	75 5c                	jne    ffffff00000033e3 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x193>
ffffff0000003387:	49 8b 7e 08          	mov    0x8(%r14),%rdi
ffffff000000338b:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000003390:	48 89 da             	mov    %rbx,%rdx
ffffff0000003393:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffff000000339a:	5b                   	pop    %rbx
ffffff000000339b:	41 5e                	pop    %r14
ffffff000000339d:	e9 9e fc ff ff       	jmp    ffffff0000003040 <_ZN4core3fmt3num3imp21_$LT$impl$u20$u64$GT$4_fmt17h76c4d1aa532e33f6E.llvm.9356072628919187691>
ffffff00000033a2:	49 8b 46 08          	mov    0x8(%r14),%rax
ffffff00000033a6:	45 31 c9             	xor    %r9d,%r9d
ffffff00000033a9:	48 89 c1             	mov    %rax,%rcx
ffffff00000033ac:	0f 1f 40 00          	nopl   0x0(%rax)
ffffff00000033b0:	48 c1 e9 04          	shr    $0x4,%rcx
ffffff00000033b4:	89 c2                	mov    %eax,%edx
ffffff00000033b6:	80 e2 0f             	and    $0xf,%dl
ffffff00000033b9:	8d 72 30             	lea    0x30(%rdx),%esi
ffffff00000033bc:	8d 7a 57             	lea    0x57(%rdx),%edi
ffffff00000033bf:	80 fa 0a             	cmp    $0xa,%dl
ffffff00000033c2:	40 0f b6 d6          	movzbl %sil,%edx
ffffff00000033c6:	40 0f b6 f7          	movzbl %dil,%esi
ffffff00000033ca:	0f 42 f2             	cmovb  %edx,%esi
ffffff00000033cd:	42 88 b4 0c 87 00 00 	mov    %sil,0x87(%rsp,%r9,1)
ffffff00000033d4:	00 
ffffff00000033d5:	49 ff c9             	dec    %r9
ffffff00000033d8:	48 83 f8 0f          	cmp    $0xf,%rax
ffffff00000033dc:	48 89 c8             	mov    %rcx,%rax
ffffff00000033df:	77 cf                	ja     ffffff00000033b0 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x160>
ffffff00000033e1:	eb 3e                	jmp    ffffff0000003421 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x1d1>
ffffff00000033e3:	49 8b 46 08          	mov    0x8(%r14),%rax
ffffff00000033e7:	45 31 c9             	xor    %r9d,%r9d
ffffff00000033ea:	48 89 c1             	mov    %rax,%rcx
ffffff00000033ed:	0f 1f 00             	nopl   (%rax)
ffffff00000033f0:	48 c1 e9 04          	shr    $0x4,%rcx
ffffff00000033f4:	89 c2                	mov    %eax,%edx
ffffff00000033f6:	80 e2 0f             	and    $0xf,%dl
ffffff00000033f9:	8d 72 30             	lea    0x30(%rdx),%esi
ffffff00000033fc:	8d 7a 37             	lea    0x37(%rdx),%edi
ffffff00000033ff:	80 fa 0a             	cmp    $0xa,%dl
ffffff0000003402:	40 0f b6 d6          	movzbl %sil,%edx
ffffff0000003406:	40 0f b6 f7          	movzbl %dil,%esi
ffffff000000340a:	0f 42 f2             	cmovb  %edx,%esi
ffffff000000340d:	42 88 b4 0c 87 00 00 	mov    %sil,0x87(%rsp,%r9,1)
ffffff0000003414:	00 
ffffff0000003415:	49 ff c9             	dec    %r9
ffffff0000003418:	48 83 f8 0f          	cmp    $0xf,%rax
ffffff000000341c:	48 89 c8             	mov    %rcx,%rax
ffffff000000341f:	77 cf                	ja     ffffff00000033f0 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt+0x1a0>
ffffff0000003421:	4e 8d 04 0c          	lea    (%rsp,%r9,1),%r8
ffffff0000003425:	49 81 c0 88 00 00 00 	add    $0x88,%r8
ffffff000000342c:	49 f7 d9             	neg    %r9
ffffff000000342f:	48 8d 15 88 d1 ff ff 	lea    -0x2e78(%rip),%rdx        # ffffff00000005be <anon.9f008dacf7fdd293cb38256ae16de0b9.2.llvm.12764318300441418232>
ffffff0000003436:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffff000000343b:	48 89 df             	mov    %rbx,%rdi
ffffff000000343e:	be 01 00 00 00       	mov    $0x1,%esi
ffffff0000003443:	e8 c8 05 00 00       	call   ffffff0000003a10 <core::fmt::Formatter::pad_integral>
ffffff0000003448:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
ffffff000000344f:	5b                   	pop    %rbx
ffffff0000003450:	41 5e                	pop    %r14
ffffff0000003452:	c3                   	ret    
ffffff0000003453:	cc                   	int3   
ffffff0000003454:	cc                   	int3   
ffffff0000003455:	cc                   	int3   
ffffff0000003456:	cc                   	int3   
ffffff0000003457:	cc                   	int3   
ffffff0000003458:	cc                   	int3   
ffffff0000003459:	cc                   	int3   
ffffff000000345a:	cc                   	int3   
ffffff000000345b:	cc                   	int3   
ffffff000000345c:	cc                   	int3   
ffffff000000345d:	cc                   	int3   
ffffff000000345e:	cc                   	int3   
ffffff000000345f:	cc                   	int3   

ffffff0000003460 <core::result::unwrap_failed>:
core::result::unwrap_failed:
ffffff0000003460:	48 83 ec 78          	sub    $0x78,%rsp
ffffff0000003464:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffff0000003469:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff000000346e:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
ffffff0000003473:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
ffffff0000003478:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
ffffff000000347d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffff0000003482:	48 8d 05 c7 13 00 00 	lea    0x13c7(%rip),%rax        # ffffff0000004850 <<&T as core::fmt::Display>::fmt>
ffffff0000003489:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
ffffff000000348e:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
ffffff0000003493:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
ffffff0000003498:	48 8d 05 a1 13 00 00 	lea    0x13a1(%rip),%rax        # ffffff0000004840 <<&T as core::fmt::Debug>::fmt>
ffffff000000349f:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
ffffff00000034a4:	48 8d 05 a5 2f 00 00 	lea    0x2fa5(%rip),%rax        # ffffff0000006450 <log::LOG_LEVEL_NAMES+0x60>
ffffff00000034ab:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff00000034b0:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
ffffff00000034b7:	00 00 
ffffff00000034b9:	48 c7 44 24 68 00 00 	movq   $0x0,0x68(%rsp)
ffffff00000034c0:	00 00 
ffffff00000034c2:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
ffffff00000034c7:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
ffffff00000034cc:	48 c7 44 24 60 02 00 	movq   $0x2,0x60(%rsp)
ffffff00000034d3:	00 00 
ffffff00000034d5:	48 8d 7c 24 48       	lea    0x48(%rsp),%rdi
ffffff00000034da:	4c 89 c6             	mov    %r8,%rsi
ffffff00000034dd:	e8 0e 00 00 00       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff00000034e2:	cc                   	int3   
ffffff00000034e3:	cc                   	int3   
ffffff00000034e4:	cc                   	int3   
ffffff00000034e5:	cc                   	int3   
ffffff00000034e6:	cc                   	int3   
ffffff00000034e7:	cc                   	int3   
ffffff00000034e8:	cc                   	int3   
ffffff00000034e9:	cc                   	int3   
ffffff00000034ea:	cc                   	int3   
ffffff00000034eb:	cc                   	int3   
ffffff00000034ec:	cc                   	int3   
ffffff00000034ed:	cc                   	int3   
ffffff00000034ee:	cc                   	int3   
ffffff00000034ef:	cc                   	int3   

ffffff00000034f0 <core::panicking::panic_fmt>:
core::panicking::panic_fmt:
ffffff00000034f0:	48 83 ec 18          	sub    $0x18,%rsp
ffffff00000034f4:	48 89 3c 24          	mov    %rdi,(%rsp)
ffffff00000034f8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
ffffff00000034fd:	66 c7 44 24 10 01 00 	movw   $0x1,0x10(%rsp)
ffffff0000003504:	48 89 e7             	mov    %rsp,%rdi
ffffff0000003507:	e8 04 f1 ff ff       	call   ffffff0000002610 <__rustc::rust_begin_unwind>
ffffff000000350c:	cc                   	int3   
ffffff000000350d:	cc                   	int3   
ffffff000000350e:	cc                   	int3   
ffffff000000350f:	cc                   	int3   

ffffff0000003510 <core::panicking::panic>:
core::panicking::panic:
ffffff0000003510:	48 83 ec 48          	sub    $0x48,%rsp
ffffff0000003514:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffff0000003519:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff000000351e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
ffffff0000003523:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000003528:	48 c7 44 24 20 01 00 	movq   $0x1,0x20(%rsp)
ffffff000000352f:	00 00 
ffffff0000003531:	48 c7 44 24 38 00 00 	movq   $0x0,0x38(%rsp)
ffffff0000003538:	00 00 
ffffff000000353a:	48 c7 44 24 28 08 00 	movq   $0x8,0x28(%rsp)
ffffff0000003541:	00 00 
ffffff0000003543:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
ffffff000000354a:	00 00 
ffffff000000354c:	48 8d 7c 24 18       	lea    0x18(%rsp),%rdi
ffffff0000003551:	48 89 d6             	mov    %rdx,%rsi
ffffff0000003554:	e8 97 ff ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff0000003559:	cc                   	int3   
ffffff000000355a:	cc                   	int3   
ffffff000000355b:	cc                   	int3   
ffffff000000355c:	cc                   	int3   
ffffff000000355d:	cc                   	int3   
ffffff000000355e:	cc                   	int3   
ffffff000000355f:	cc                   	int3   

ffffff0000003560 <core::char::methods::<impl char>::escape_debug_ext>:
core::char::methods::<impl char>::escape_debug_ext:
ffffff0000003560:	41 56                	push   %r14
ffffff0000003562:	53                   	push   %rbx
ffffff0000003563:	48 83 ec 18          	sub    $0x18,%rsp
ffffff0000003567:	89 f3                	mov    %esi,%ebx
ffffff0000003569:	83 fe 27             	cmp    $0x27,%esi
ffffff000000356c:	77 1c                	ja     ffffff000000358a <core::char::methods::<impl char>::escape_debug_ext+0x2a>
ffffff000000356e:	89 d8                	mov    %ebx,%eax
ffffff0000003570:	48 8d 0d 8d d4 ff ff 	lea    -0x2b73(%rip),%rcx        # ffffff0000000a04 <core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS+0x8c>
ffffff0000003577:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
ffffff000000357b:	48 01 c8             	add    %rcx,%rax
ffffff000000357e:	ff e0                	jmp    *%rax
ffffff0000003580:	66 c7 07 5c 30       	movw   $0x305c,(%rdi)
ffffff0000003585:	e9 03 02 00 00       	jmp    ffffff000000378d <core::char::methods::<impl char>::escape_debug_ext+0x22d>
ffffff000000358a:	83 fb 5c             	cmp    $0x5c,%ebx
ffffff000000358d:	75 0a                	jne    ffffff0000003599 <core::char::methods::<impl char>::escape_debug_ext+0x39>
ffffff000000358f:	66 c7 07 5c 5c       	movw   $0x5c5c,(%rdi)
ffffff0000003594:	e9 f4 01 00 00       	jmp    ffffff000000378d <core::char::methods::<impl char>::escape_debug_ext+0x22d>
ffffff0000003599:	81 fb 00 03 00 00    	cmp    $0x300,%ebx
ffffff000000359f:	0f 93 c0             	setae  %al
ffffff00000035a2:	84 c2                	test   %al,%dl
ffffff00000035a4:	0f 84 0a 01 00 00    	je     ffffff00000036b4 <core::char::methods::<impl char>::escape_debug_ext+0x154>
ffffff00000035aa:	49 89 fe             	mov    %rdi,%r14
ffffff00000035ad:	89 df                	mov    %ebx,%edi
ffffff00000035af:	e8 9c fb ff ff       	call   ffffff0000003150 <core::unicode::unicode_data::grapheme_extend::lookup_slow>
ffffff00000035b4:	4c 89 f7             	mov    %r14,%rdi
ffffff00000035b7:	84 c0                	test   %al,%al
ffffff00000035b9:	0f 84 f5 00 00 00    	je     ffffff00000036b4 <core::char::methods::<impl char>::escape_debug_ext+0x154>
ffffff00000035bf:	89 d8                	mov    %ebx,%eax
ffffff00000035c1:	83 c8 01             	or     $0x1,%eax
ffffff00000035c4:	0f bd c0             	bsr    %eax,%eax
ffffff00000035c7:	83 f0 1c             	xor    $0x1c,%eax
ffffff00000035ca:	c1 e8 02             	shr    $0x2,%eax
ffffff00000035cd:	48 8d 48 fe          	lea    -0x2(%rax),%rcx
ffffff00000035d1:	c6 44 24 06 00       	movb   $0x0,0x6(%rsp)
ffffff00000035d6:	66 c7 44 24 04 00 00 	movw   $0x0,0x4(%rsp)
ffffff00000035dd:	89 de                	mov    %ebx,%esi
ffffff00000035df:	c1 ee 14             	shr    $0x14,%esi
ffffff00000035e2:	48 8d 15 7f d5 ff ff 	lea    -0x2a81(%rip),%rdx        # ffffff0000000b68 <anon.1ef54cdc354b9592f614fb3b2114e93c.12.llvm.15289313529707102921>
ffffff00000035e9:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff00000035ed:	40 88 74 24 07       	mov    %sil,0x7(%rsp)
ffffff00000035f2:	89 de                	mov    %ebx,%esi
ffffff00000035f4:	c1 ee 10             	shr    $0x10,%esi
ffffff00000035f7:	83 e6 0f             	and    $0xf,%esi
ffffff00000035fa:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff00000035fe:	40 88 74 24 08       	mov    %sil,0x8(%rsp)
ffffff0000003603:	89 de                	mov    %ebx,%esi
ffffff0000003605:	c1 ee 0c             	shr    $0xc,%esi
ffffff0000003608:	83 e6 0f             	and    $0xf,%esi
ffffff000000360b:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff000000360f:	40 88 74 24 09       	mov    %sil,0x9(%rsp)
ffffff0000003614:	89 de                	mov    %ebx,%esi
ffffff0000003616:	c1 ee 08             	shr    $0x8,%esi
ffffff0000003619:	83 e6 0f             	and    $0xf,%esi
ffffff000000361c:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003620:	40 88 74 24 0a       	mov    %sil,0xa(%rsp)
ffffff0000003625:	89 de                	mov    %ebx,%esi
ffffff0000003627:	c1 ee 04             	shr    $0x4,%esi
ffffff000000362a:	83 e6 0f             	and    $0xf,%esi
ffffff000000362d:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003631:	40 88 74 24 0b       	mov    %sil,0xb(%rsp)
ffffff0000003636:	83 e3 0f             	and    $0xf,%ebx
ffffff0000003639:	0f b6 14 13          	movzbl (%rbx,%rdx,1),%edx
ffffff000000363d:	88 54 24 0c          	mov    %dl,0xc(%rsp)
ffffff0000003641:	c6 44 24 0d 7d       	movb   $0x7d,0xd(%rsp)
ffffff0000003646:	66 c7 44 04 02 5c 75 	movw   $0x755c,0x2(%rsp,%rax,1)
ffffff000000364d:	c6 44 04 04 7b       	movb   $0x7b,0x4(%rsp,%rax,1)
ffffff0000003652:	0f b7 44 24 0c       	movzwl 0xc(%rsp),%eax
ffffff0000003657:	66 89 47 08          	mov    %ax,0x8(%rdi)
ffffff000000365b:	48 8b 44 24 04       	mov    0x4(%rsp),%rax
ffffff0000003660:	48 89 07             	mov    %rax,(%rdi)
ffffff0000003663:	88 4f 0a             	mov    %cl,0xa(%rdi)
ffffff0000003666:	c6 47 0b 0a          	movb   $0xa,0xb(%rdi)
ffffff000000366a:	48 83 c4 18          	add    $0x18,%rsp
ffffff000000366e:	5b                   	pop    %rbx
ffffff000000366f:	41 5e                	pop    %r14
ffffff0000003671:	c3                   	ret    
ffffff0000003672:	66 c7 07 5c 6e       	movw   $0x6e5c,(%rdi)
ffffff0000003677:	e9 11 01 00 00       	jmp    ffffff000000378d <core::char::methods::<impl char>::escape_debug_ext+0x22d>
ffffff000000367c:	f7 c2 00 01 00 00    	test   $0x100,%edx
ffffff0000003682:	74 30                	je     ffffff00000036b4 <core::char::methods::<impl char>::escape_debug_ext+0x154>
ffffff0000003684:	66 c7 07 5c 27       	movw   $0x275c,(%rdi)
ffffff0000003689:	e9 ff 00 00 00       	jmp    ffffff000000378d <core::char::methods::<impl char>::escape_debug_ext+0x22d>
ffffff000000368e:	66 c7 07 5c 72       	movw   $0x725c,(%rdi)
ffffff0000003693:	e9 f5 00 00 00       	jmp    ffffff000000378d <core::char::methods::<impl char>::escape_debug_ext+0x22d>
ffffff0000003698:	66 c7 07 5c 74       	movw   $0x745c,(%rdi)
ffffff000000369d:	e9 eb 00 00 00       	jmp    ffffff000000378d <core::char::methods::<impl char>::escape_debug_ext+0x22d>
ffffff00000036a2:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
ffffff00000036a8:	81 fa 00 00 01 00    	cmp    $0x10000,%edx
ffffff00000036ae:	0f 83 d4 00 00 00    	jae    ffffff0000003788 <core::char::methods::<impl char>::escape_debug_ext+0x228>
ffffff00000036b4:	49 89 fe             	mov    %rdi,%r14
ffffff00000036b7:	89 df                	mov    %ebx,%edi
ffffff00000036b9:	e8 62 1c 00 00       	call   ffffff0000005320 <core::unicode::printable::is_printable>
ffffff00000036be:	84 c0                	test   %al,%al
ffffff00000036c0:	74 10                	je     ffffff00000036d2 <core::char::methods::<impl char>::escape_debug_ext+0x172>
ffffff00000036c2:	41 c6 06 80          	movb   $0x80,(%r14)
ffffff00000036c6:	41 89 5e 04          	mov    %ebx,0x4(%r14)
ffffff00000036ca:	48 83 c4 18          	add    $0x18,%rsp
ffffff00000036ce:	5b                   	pop    %rbx
ffffff00000036cf:	41 5e                	pop    %r14
ffffff00000036d1:	c3                   	ret    
ffffff00000036d2:	89 d8                	mov    %ebx,%eax
ffffff00000036d4:	83 c8 01             	or     $0x1,%eax
ffffff00000036d7:	0f bd c0             	bsr    %eax,%eax
ffffff00000036da:	83 f0 1c             	xor    $0x1c,%eax
ffffff00000036dd:	c1 e8 02             	shr    $0x2,%eax
ffffff00000036e0:	48 8d 48 fe          	lea    -0x2(%rax),%rcx
ffffff00000036e4:	c6 44 24 10 00       	movb   $0x0,0x10(%rsp)
ffffff00000036e9:	66 c7 44 24 0e 00 00 	movw   $0x0,0xe(%rsp)
ffffff00000036f0:	89 de                	mov    %ebx,%esi
ffffff00000036f2:	c1 ee 14             	shr    $0x14,%esi
ffffff00000036f5:	48 8d 15 6c d4 ff ff 	lea    -0x2b94(%rip),%rdx        # ffffff0000000b68 <anon.1ef54cdc354b9592f614fb3b2114e93c.12.llvm.15289313529707102921>
ffffff00000036fc:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003700:	40 88 74 24 11       	mov    %sil,0x11(%rsp)
ffffff0000003705:	89 de                	mov    %ebx,%esi
ffffff0000003707:	c1 ee 10             	shr    $0x10,%esi
ffffff000000370a:	83 e6 0f             	and    $0xf,%esi
ffffff000000370d:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003711:	40 88 74 24 12       	mov    %sil,0x12(%rsp)
ffffff0000003716:	89 de                	mov    %ebx,%esi
ffffff0000003718:	c1 ee 0c             	shr    $0xc,%esi
ffffff000000371b:	83 e6 0f             	and    $0xf,%esi
ffffff000000371e:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003722:	40 88 74 24 13       	mov    %sil,0x13(%rsp)
ffffff0000003727:	89 de                	mov    %ebx,%esi
ffffff0000003729:	c1 ee 08             	shr    $0x8,%esi
ffffff000000372c:	83 e6 0f             	and    $0xf,%esi
ffffff000000372f:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003733:	40 88 74 24 14       	mov    %sil,0x14(%rsp)
ffffff0000003738:	89 de                	mov    %ebx,%esi
ffffff000000373a:	c1 ee 04             	shr    $0x4,%esi
ffffff000000373d:	83 e6 0f             	and    $0xf,%esi
ffffff0000003740:	0f b6 34 16          	movzbl (%rsi,%rdx,1),%esi
ffffff0000003744:	40 88 74 24 15       	mov    %sil,0x15(%rsp)
ffffff0000003749:	83 e3 0f             	and    $0xf,%ebx
ffffff000000374c:	0f b6 14 13          	movzbl (%rbx,%rdx,1),%edx
ffffff0000003750:	88 54 24 16          	mov    %dl,0x16(%rsp)
ffffff0000003754:	c6 44 24 17 7d       	movb   $0x7d,0x17(%rsp)
ffffff0000003759:	66 c7 44 04 0c 5c 75 	movw   $0x755c,0xc(%rsp,%rax,1)
ffffff0000003760:	c6 44 04 0e 7b       	movb   $0x7b,0xe(%rsp,%rax,1)
ffffff0000003765:	0f b7 44 24 16       	movzwl 0x16(%rsp),%eax
ffffff000000376a:	66 41 89 46 08       	mov    %ax,0x8(%r14)
ffffff000000376f:	48 8b 44 24 0e       	mov    0xe(%rsp),%rax
ffffff0000003774:	49 89 06             	mov    %rax,(%r14)
ffffff0000003777:	41 88 4e 0a          	mov    %cl,0xa(%r14)
ffffff000000377b:	41 c6 46 0b 0a       	movb   $0xa,0xb(%r14)
ffffff0000003780:	48 83 c4 18          	add    $0x18,%rsp
ffffff0000003784:	5b                   	pop    %rbx
ffffff0000003785:	41 5e                	pop    %r14
ffffff0000003787:	c3                   	ret    
ffffff0000003788:	66 c7 07 5c 22       	movw   $0x225c,(%rdi)
ffffff000000378d:	48 c7 47 02 00 00 00 	movq   $0x0,0x2(%rdi)
ffffff0000003794:	00 
ffffff0000003795:	66 c7 47 0a 00 02    	movw   $0x200,0xa(%rdi)
ffffff000000379b:	48 83 c4 18          	add    $0x18,%rsp
ffffff000000379f:	5b                   	pop    %rbx
ffffff00000037a0:	41 5e                	pop    %r14
ffffff00000037a2:	c3                   	ret    
ffffff00000037a3:	cc                   	int3   
ffffff00000037a4:	cc                   	int3   
ffffff00000037a5:	cc                   	int3   
ffffff00000037a6:	cc                   	int3   
ffffff00000037a7:	cc                   	int3   
ffffff00000037a8:	cc                   	int3   
ffffff00000037a9:	cc                   	int3   
ffffff00000037aa:	cc                   	int3   
ffffff00000037ab:	cc                   	int3   
ffffff00000037ac:	cc                   	int3   
ffffff00000037ad:	cc                   	int3   
ffffff00000037ae:	cc                   	int3   
ffffff00000037af:	cc                   	int3   

ffffff00000037b0 <<core::fmt::Arguments as core::fmt::Debug>::fmt>:
<core::fmt::Arguments as core::fmt::Debug>::fmt:
ffffff00000037b0:	48 89 fa             	mov    %rdi,%rdx
ffffff00000037b3:	48 8b 3e             	mov    (%rsi),%rdi
ffffff00000037b6:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffff00000037ba:	e9 11 00 00 00       	jmp    ffffff00000037d0 <core::fmt::write>
ffffff00000037bf:	cc                   	int3   

ffffff00000037c0 <<core::fmt::Arguments as core::fmt::Display>::fmt>:
<core::fmt::Arguments as core::fmt::Display>::fmt:
ffffff00000037c0:	48 89 fa             	mov    %rdi,%rdx
ffffff00000037c3:	48 8b 3e             	mov    (%rsi),%rdi
ffffff00000037c6:	48 8b 76 08          	mov    0x8(%rsi),%rsi
ffffff00000037ca:	e9 01 00 00 00       	jmp    ffffff00000037d0 <core::fmt::write>
ffffff00000037cf:	cc                   	int3   

ffffff00000037d0 <core::fmt::write>:
core::fmt::write:
ffffff00000037d0:	55                   	push   %rbp
ffffff00000037d1:	41 57                	push   %r15
ffffff00000037d3:	41 56                	push   %r14
ffffff00000037d5:	41 55                	push   %r13
ffffff00000037d7:	41 54                	push   %r12
ffffff00000037d9:	53                   	push   %rbx
ffffff00000037da:	48 83 ec 28          	sub    $0x28,%rsp
ffffff00000037de:	b8 20 00 00 e0       	mov    $0xe0000020,%eax
ffffff00000037e3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffff00000037e8:	48 89 3c 24          	mov    %rdi,(%rsp)
ffffff00000037ec:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
ffffff00000037f1:	48 8b 5a 20          	mov    0x20(%rdx),%rbx
ffffff00000037f5:	48 85 db             	test   %rbx,%rbx
ffffff00000037f8:	0f 84 2a 01 00 00    	je     ffffff0000003928 <core::fmt::write+0x158>
ffffff00000037fe:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
ffffff0000003802:	48 85 c9             	test   %rcx,%rcx
ffffff0000003805:	0f 84 c2 01 00 00    	je     ffffff00000039cd <core::fmt::write+0x1fd>
ffffff000000380b:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
ffffff000000380f:	48 c1 e0 04          	shl    $0x4,%rax
ffffff0000003813:	48 01 d8             	add    %rbx,%rax
ffffff0000003816:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff000000381b:	48 8d 43 30          	lea    0x30(%rbx),%rax
ffffff000000381f:	4c 8b 2a             	mov    (%rdx),%r13
ffffff0000003822:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
ffffff0000003827:	48 8b 6a 10          	mov    0x10(%rdx),%rbp
ffffff000000382b:	48 ff c9             	dec    %rcx
ffffff000000382e:	49 bf ff ff ff ff ff 	movabs $0xfffffffffffffff,%r15
ffffff0000003835:	ff ff 0f 
ffffff0000003838:	49 21 cf             	and    %rcx,%r15
ffffff000000383b:	49 ff c7             	inc    %r15
ffffff000000383e:	49 83 c5 08          	add    $0x8,%r13
ffffff0000003842:	45 31 f6             	xor    %r14d,%r14d
ffffff0000003845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000384c:	00 00 00 00 
ffffff0000003850:	49 89 c4             	mov    %rax,%r12
ffffff0000003853:	49 8b 55 00          	mov    0x0(%r13),%rdx
ffffff0000003857:	48 85 d2             	test   %rdx,%rdx
ffffff000000385a:	74 18                	je     ffffff0000003874 <core::fmt::write+0xa4>
ffffff000000385c:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffff0000003860:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff0000003865:	49 8b 75 f8          	mov    -0x8(%r13),%rsi
ffffff0000003869:	ff 50 18             	call   *0x18(%rax)
ffffff000000386c:	84 c0                	test   %al,%al
ffffff000000386e:	0f 85 55 01 00 00    	jne    ffffff00000039c9 <core::fmt::write+0x1f9>
ffffff0000003874:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
ffffff0000003878:	85 c0                	test   %eax,%eax
ffffff000000387a:	74 34                	je     ffffff00000038b0 <core::fmt::write+0xe0>
ffffff000000387c:	83 f8 01             	cmp    $0x1,%eax
ffffff000000387f:	75 3f                	jne    ffffff00000038c0 <core::fmt::write+0xf0>
ffffff0000003881:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffff0000003885:	48 c1 e0 04          	shl    $0x4,%rax
ffffff0000003889:	0f b7 44 05 08       	movzwl 0x8(%rbp,%rax,1),%eax
ffffff000000388e:	0f b7 0b             	movzwl (%rbx),%ecx
ffffff0000003891:	83 f9 02             	cmp    $0x2,%ecx
ffffff0000003894:	74 26                	je     ffffff00000038bc <core::fmt::write+0xec>
ffffff0000003896:	83 f9 01             	cmp    $0x1,%ecx
ffffff0000003899:	75 35                	jne    ffffff00000038d0 <core::fmt::write+0x100>
ffffff000000389b:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
ffffff000000389f:	48 c1 e1 04          	shl    $0x4,%rcx
ffffff00000038a3:	0f b7 4c 0d 08       	movzwl 0x8(%rbp,%rcx,1),%ecx
ffffff00000038a8:	eb 2a                	jmp    ffffff00000038d4 <core::fmt::write+0x104>
ffffff00000038aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffff00000038b0:	0f b7 43 12          	movzwl 0x12(%rbx),%eax
ffffff00000038b4:	0f b7 0b             	movzwl (%rbx),%ecx
ffffff00000038b7:	83 f9 02             	cmp    $0x2,%ecx
ffffff00000038ba:	75 da                	jne    ffffff0000003896 <core::fmt::write+0xc6>
ffffff00000038bc:	31 c9                	xor    %ecx,%ecx
ffffff00000038be:	eb 14                	jmp    ffffff00000038d4 <core::fmt::write+0x104>
ffffff00000038c0:	31 c0                	xor    %eax,%eax
ffffff00000038c2:	0f b7 0b             	movzwl (%rbx),%ecx
ffffff00000038c5:	83 f9 02             	cmp    $0x2,%ecx
ffffff00000038c8:	75 cc                	jne    ffffff0000003896 <core::fmt::write+0xc6>
ffffff00000038ca:	eb f0                	jmp    ffffff00000038bc <core::fmt::write+0xec>
ffffff00000038cc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffff00000038d0:	0f b7 4b 02          	movzwl 0x2(%rbx),%ecx
ffffff00000038d4:	8b 53 28             	mov    0x28(%rbx),%edx
ffffff00000038d7:	4c 8b 43 20          	mov    0x20(%rbx),%r8
ffffff00000038db:	49 c1 e0 04          	shl    $0x4,%r8
ffffff00000038df:	89 54 24 10          	mov    %edx,0x10(%rsp)
ffffff00000038e3:	66 89 44 24 14       	mov    %ax,0x14(%rsp)
ffffff00000038e8:	66 89 4c 24 16       	mov    %cx,0x16(%rsp)
ffffff00000038ed:	4a 8b 7c 05 00       	mov    0x0(%rbp,%r8,1),%rdi
ffffff00000038f2:	48 89 e6             	mov    %rsp,%rsi
ffffff00000038f5:	42 ff 54 05 08       	call   *0x8(%rbp,%r8,1)
ffffff00000038fa:	84 c0                	test   %al,%al
ffffff00000038fc:	0f 85 c7 00 00 00    	jne    ffffff00000039c9 <core::fmt::write+0x1f9>
ffffff0000003902:	49 ff c6             	inc    %r14
ffffff0000003905:	49 8d 44 24 30       	lea    0x30(%r12),%rax
ffffff000000390a:	4c 3b 64 24 20       	cmp    0x20(%rsp),%r12
ffffff000000390f:	49 0f 44 c4          	cmove  %r12,%rax
ffffff0000003913:	49 83 c5 10          	add    $0x10,%r13
ffffff0000003917:	4c 89 e3             	mov    %r12,%rbx
ffffff000000391a:	4d 39 f7             	cmp    %r14,%r15
ffffff000000391d:	0f 85 2d ff ff ff    	jne    ffffff0000003850 <core::fmt::write+0x80>
ffffff0000003923:	e9 94 00 00 00       	jmp    ffffff00000039bc <core::fmt::write+0x1ec>
ffffff0000003928:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
ffffff000000392c:	48 85 c9             	test   %rcx,%rcx
ffffff000000392f:	0f 84 98 00 00 00    	je     ffffff00000039cd <core::fmt::write+0x1fd>
ffffff0000003935:	48 8b 6a 10          	mov    0x10(%rdx),%rbp
ffffff0000003939:	48 89 cb             	mov    %rcx,%rbx
ffffff000000393c:	48 c1 e3 04          	shl    $0x4,%rbx
ffffff0000003940:	48 01 eb             	add    %rbp,%rbx
ffffff0000003943:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffff0000003947:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
ffffff000000394c:	4c 8b 22             	mov    (%rdx),%r12
ffffff000000394f:	48 ff c9             	dec    %rcx
ffffff0000003952:	49 bf ff ff ff ff ff 	movabs $0xfffffffffffffff,%r15
ffffff0000003959:	ff ff 0f 
ffffff000000395c:	49 21 cf             	and    %rcx,%r15
ffffff000000395f:	49 ff c7             	inc    %r15
ffffff0000003962:	49 83 c4 08          	add    $0x8,%r12
ffffff0000003966:	45 31 ed             	xor    %r13d,%r13d
ffffff0000003969:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffff0000003970:	49 89 c6             	mov    %rax,%r14
ffffff0000003973:	49 8b 14 24          	mov    (%r12),%rdx
ffffff0000003977:	48 85 d2             	test   %rdx,%rdx
ffffff000000397a:	74 15                	je     ffffff0000003991 <core::fmt::write+0x1c1>
ffffff000000397c:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffff0000003980:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff0000003985:	49 8b 74 24 f8       	mov    -0x8(%r12),%rsi
ffffff000000398a:	ff 50 18             	call   *0x18(%rax)
ffffff000000398d:	84 c0                	test   %al,%al
ffffff000000398f:	75 38                	jne    ffffff00000039c9 <core::fmt::write+0x1f9>
ffffff0000003991:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
ffffff0000003995:	48 89 e6             	mov    %rsp,%rsi
ffffff0000003998:	ff 55 08             	call   *0x8(%rbp)
ffffff000000399b:	84 c0                	test   %al,%al
ffffff000000399d:	75 2a                	jne    ffffff00000039c9 <core::fmt::write+0x1f9>
ffffff000000399f:	49 ff c5             	inc    %r13
ffffff00000039a2:	31 c0                	xor    %eax,%eax
ffffff00000039a4:	49 39 de             	cmp    %rbx,%r14
ffffff00000039a7:	0f 95 c0             	setne  %al
ffffff00000039aa:	c1 e0 04             	shl    $0x4,%eax
ffffff00000039ad:	4c 01 f0             	add    %r14,%rax
ffffff00000039b0:	49 83 c4 10          	add    $0x10,%r12
ffffff00000039b4:	4c 89 f5             	mov    %r14,%rbp
ffffff00000039b7:	4d 39 ef             	cmp    %r13,%r15
ffffff00000039ba:	75 b4                	jne    ffffff0000003970 <core::fmt::write+0x1a0>
ffffff00000039bc:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffff00000039c1:	4c 3b 7a 08          	cmp    0x8(%rdx),%r15
ffffff00000039c5:	72 0f                	jb     ffffff00000039d6 <core::fmt::write+0x206>
ffffff00000039c7:	eb 31                	jmp    ffffff00000039fa <core::fmt::write+0x22a>
ffffff00000039c9:	b0 01                	mov    $0x1,%al
ffffff00000039cb:	eb 2f                	jmp    ffffff00000039fc <core::fmt::write+0x22c>
ffffff00000039cd:	45 31 ff             	xor    %r15d,%r15d
ffffff00000039d0:	4c 3b 7a 08          	cmp    0x8(%rdx),%r15
ffffff00000039d4:	73 24                	jae    ffffff00000039fa <core::fmt::write+0x22a>
ffffff00000039d6:	48 8b 02             	mov    (%rdx),%rax
ffffff00000039d9:	49 c1 e7 04          	shl    $0x4,%r15
ffffff00000039dd:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffff00000039e1:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
ffffff00000039e6:	4a 8b 34 38          	mov    (%rax,%r15,1),%rsi
ffffff00000039ea:	4a 8b 54 38 08       	mov    0x8(%rax,%r15,1),%rdx
ffffff00000039ef:	ff 51 18             	call   *0x18(%rcx)
ffffff00000039f2:	89 c1                	mov    %eax,%ecx
ffffff00000039f4:	b0 01                	mov    $0x1,%al
ffffff00000039f6:	84 c9                	test   %cl,%cl
ffffff00000039f8:	75 02                	jne    ffffff00000039fc <core::fmt::write+0x22c>
ffffff00000039fa:	31 c0                	xor    %eax,%eax
ffffff00000039fc:	48 83 c4 28          	add    $0x28,%rsp
ffffff0000003a00:	5b                   	pop    %rbx
ffffff0000003a01:	41 5c                	pop    %r12
ffffff0000003a03:	41 5d                	pop    %r13
ffffff0000003a05:	41 5e                	pop    %r14
ffffff0000003a07:	41 5f                	pop    %r15
ffffff0000003a09:	5d                   	pop    %rbp
ffffff0000003a0a:	c3                   	ret    
ffffff0000003a0b:	cc                   	int3   
ffffff0000003a0c:	cc                   	int3   
ffffff0000003a0d:	cc                   	int3   
ffffff0000003a0e:	cc                   	int3   
ffffff0000003a0f:	cc                   	int3   

ffffff0000003a10 <core::fmt::Formatter::pad_integral>:
core::fmt::Formatter::pad_integral:
ffffff0000003a10:	55                   	push   %rbp
ffffff0000003a11:	41 57                	push   %r15
ffffff0000003a13:	41 56                	push   %r14
ffffff0000003a15:	41 55                	push   %r13
ffffff0000003a17:	41 54                	push   %r12
ffffff0000003a19:	53                   	push   %rbx
ffffff0000003a1a:	48 83 ec 38          	sub    $0x38,%rsp
ffffff0000003a1e:	4d 89 cc             	mov    %r9,%r12
ffffff0000003a21:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffff0000003a26:	49 89 ce             	mov    %rcx,%r14
ffffff0000003a29:	49 89 d5             	mov    %rdx,%r13
ffffff0000003a2c:	49 89 ff             	mov    %rdi,%r15
ffffff0000003a2f:	85 f6                	test   %esi,%esi
ffffff0000003a31:	74 5c                	je     ffffff0000003a8f <core::fmt::Formatter::pad_integral+0x7f>
ffffff0000003a33:	41 8b 6f 10          	mov    0x10(%r15),%ebp
ffffff0000003a37:	89 eb                	mov    %ebp,%ebx
ffffff0000003a39:	81 e3 00 00 20 00    	and    $0x200000,%ebx
ffffff0000003a3f:	b8 00 00 11 00       	mov    $0x110000,%eax
ffffff0000003a44:	b9 2b 00 00 00       	mov    $0x2b,%ecx
ffffff0000003a49:	0f 44 c8             	cmove  %eax,%ecx
ffffff0000003a4c:	89 4c 24 04          	mov    %ecx,0x4(%rsp)
ffffff0000003a50:	c1 eb 15             	shr    $0x15,%ebx
ffffff0000003a53:	4c 01 e3             	add    %r12,%rbx
ffffff0000003a56:	f7 c5 00 00 80 00    	test   $0x800000,%ebp
ffffff0000003a5c:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
ffffff0000003a61:	74 4a                	je     ffffff0000003aad <core::fmt::Formatter::pad_integral+0x9d>
ffffff0000003a63:	49 83 fe 20          	cmp    $0x20,%r14
ffffff0000003a67:	0f 83 99 00 00 00    	jae    ffffff0000003b06 <core::fmt::Formatter::pad_integral+0xf6>
ffffff0000003a6d:	4d 85 f6             	test   %r14,%r14
ffffff0000003a70:	0f 84 a0 00 00 00    	je     ffffff0000003b16 <core::fmt::Formatter::pad_integral+0x106>
ffffff0000003a76:	44 89 f1             	mov    %r14d,%ecx
ffffff0000003a79:	83 e1 03             	and    $0x3,%ecx
ffffff0000003a7c:	49 83 fe 04          	cmp    $0x4,%r14
ffffff0000003a80:	0f 83 94 00 00 00    	jae    ffffff0000003b1a <core::fmt::Formatter::pad_integral+0x10a>
ffffff0000003a86:	31 c0                	xor    %eax,%eax
ffffff0000003a88:	31 d2                	xor    %edx,%edx
ffffff0000003a8a:	e9 e5 00 00 00       	jmp    ffffff0000003b74 <core::fmt::Formatter::pad_integral+0x164>
ffffff0000003a8f:	49 8d 5c 24 01       	lea    0x1(%r12),%rbx
ffffff0000003a94:	41 8b 6f 10          	mov    0x10(%r15),%ebp
ffffff0000003a98:	c7 44 24 04 2d 00 00 	movl   $0x2d,0x4(%rsp)
ffffff0000003a9f:	00 
ffffff0000003aa0:	f7 c5 00 00 80 00    	test   $0x800000,%ebp
ffffff0000003aa6:	4c 89 74 24 18       	mov    %r14,0x18(%rsp)
ffffff0000003aab:	75 b6                	jne    ffffff0000003a63 <core::fmt::Formatter::pad_integral+0x53>
ffffff0000003aad:	45 31 ed             	xor    %r13d,%r13d
ffffff0000003ab0:	45 0f b7 77 14       	movzwl 0x14(%r15),%r14d
ffffff0000003ab5:	4c 39 f3             	cmp    %r14,%rbx
ffffff0000003ab8:	0f 82 e8 00 00 00    	jb     ffffff0000003ba6 <core::fmt::Formatter::pad_integral+0x196>
ffffff0000003abe:	49 8b 1f             	mov    (%r15),%rbx
ffffff0000003ac1:	4d 8b 7f 08          	mov    0x8(%r15),%r15
ffffff0000003ac5:	48 89 df             	mov    %rbx,%rdi
ffffff0000003ac8:	4c 89 fe             	mov    %r15,%rsi
ffffff0000003acb:	8b 54 24 04          	mov    0x4(%rsp),%edx
ffffff0000003acf:	4c 89 e9             	mov    %r13,%rcx
ffffff0000003ad2:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffff0000003ad7:	e8 64 02 00 00       	call   ffffff0000003d40 <core::fmt::Formatter::pad_integral::write_prefix>
ffffff0000003adc:	41 b5 01             	mov    $0x1,%r13b
ffffff0000003adf:	84 c0                	test   %al,%al
ffffff0000003ae1:	0f 85 40 02 00 00    	jne    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003ae7:	49 8b 47 18          	mov    0x18(%r15),%rax
ffffff0000003aeb:	48 89 df             	mov    %rbx,%rdi
ffffff0000003aee:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffff0000003af3:	4c 89 e2             	mov    %r12,%rdx
ffffff0000003af6:	48 83 c4 38          	add    $0x38,%rsp
ffffff0000003afa:	5b                   	pop    %rbx
ffffff0000003afb:	41 5c                	pop    %r12
ffffff0000003afd:	41 5d                	pop    %r13
ffffff0000003aff:	41 5e                	pop    %r14
ffffff0000003b01:	41 5f                	pop    %r15
ffffff0000003b03:	5d                   	pop    %rbp
ffffff0000003b04:	ff e0                	jmp    *%rax
ffffff0000003b06:	4c 89 ef             	mov    %r13,%rdi
ffffff0000003b09:	4c 89 f6             	mov    %r14,%rsi
ffffff0000003b0c:	e8 5f 0d 00 00       	call   ffffff0000004870 <core::str::count::do_count_chars>
ffffff0000003b11:	e9 7f 00 00 00       	jmp    ffffff0000003b95 <core::fmt::Formatter::pad_integral+0x185>
ffffff0000003b16:	31 c0                	xor    %eax,%eax
ffffff0000003b18:	eb 7b                	jmp    ffffff0000003b95 <core::fmt::Formatter::pad_integral+0x185>
ffffff0000003b1a:	44 89 f6             	mov    %r14d,%esi
ffffff0000003b1d:	83 e6 1c             	and    $0x1c,%esi
ffffff0000003b20:	31 c0                	xor    %eax,%eax
ffffff0000003b22:	31 d2                	xor    %edx,%edx
ffffff0000003b24:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000003b2b:	00 00 00 00 00 
ffffff0000003b30:	31 ff                	xor    %edi,%edi
ffffff0000003b32:	41 80 7c 15 00 c0    	cmpb   $0xc0,0x0(%r13,%rdx,1)
ffffff0000003b38:	40 0f 9d c7          	setge  %dil
ffffff0000003b3c:	48 01 c7             	add    %rax,%rdi
ffffff0000003b3f:	31 c0                	xor    %eax,%eax
ffffff0000003b41:	41 80 7c 15 01 c0    	cmpb   $0xc0,0x1(%r13,%rdx,1)
ffffff0000003b47:	0f 9d c0             	setge  %al
ffffff0000003b4a:	45 31 c0             	xor    %r8d,%r8d
ffffff0000003b4d:	41 80 7c 15 02 c0    	cmpb   $0xc0,0x2(%r13,%rdx,1)
ffffff0000003b53:	41 0f 9d c0          	setge  %r8b
ffffff0000003b57:	49 01 c0             	add    %rax,%r8
ffffff0000003b5a:	49 01 f8             	add    %rdi,%r8
ffffff0000003b5d:	31 c0                	xor    %eax,%eax
ffffff0000003b5f:	41 80 7c 15 03 c0    	cmpb   $0xc0,0x3(%r13,%rdx,1)
ffffff0000003b65:	0f 9d c0             	setge  %al
ffffff0000003b68:	4c 01 c0             	add    %r8,%rax
ffffff0000003b6b:	48 83 c2 04          	add    $0x4,%rdx
ffffff0000003b6f:	48 39 d6             	cmp    %rdx,%rsi
ffffff0000003b72:	75 bc                	jne    ffffff0000003b30 <core::fmt::Formatter::pad_integral+0x120>
ffffff0000003b74:	48 85 c9             	test   %rcx,%rcx
ffffff0000003b77:	74 1c                	je     ffffff0000003b95 <core::fmt::Formatter::pad_integral+0x185>
ffffff0000003b79:	4c 01 ea             	add    %r13,%rdx
ffffff0000003b7c:	31 f6                	xor    %esi,%esi
ffffff0000003b7e:	66 90                	xchg   %ax,%ax
ffffff0000003b80:	31 ff                	xor    %edi,%edi
ffffff0000003b82:	80 3c 32 c0          	cmpb   $0xc0,(%rdx,%rsi,1)
ffffff0000003b86:	40 0f 9d c7          	setge  %dil
ffffff0000003b8a:	48 01 f8             	add    %rdi,%rax
ffffff0000003b8d:	48 ff c6             	inc    %rsi
ffffff0000003b90:	48 39 f1             	cmp    %rsi,%rcx
ffffff0000003b93:	75 eb                	jne    ffffff0000003b80 <core::fmt::Formatter::pad_integral+0x170>
ffffff0000003b95:	48 01 c3             	add    %rax,%rbx
ffffff0000003b98:	45 0f b7 77 14       	movzwl 0x14(%r15),%r14d
ffffff0000003b9d:	4c 39 f3             	cmp    %r14,%rbx
ffffff0000003ba0:	0f 83 18 ff ff ff    	jae    ffffff0000003abe <core::fmt::Formatter::pad_integral+0xae>
ffffff0000003ba6:	f7 c5 00 00 00 01    	test   $0x1000000,%ebp
ffffff0000003bac:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
ffffff0000003bb1:	75 2d                	jne    ffffff0000003be0 <core::fmt::Formatter::pad_integral+0x1d0>
ffffff0000003bb3:	44 89 f2             	mov    %r14d,%edx
ffffff0000003bb6:	29 da                	sub    %ebx,%edx
ffffff0000003bb8:	89 e8                	mov    %ebp,%eax
ffffff0000003bba:	c1 e8 1d             	shr    $0x1d,%eax
ffffff0000003bbd:	83 e0 03             	and    $0x3,%eax
ffffff0000003bc0:	48 8d 0d dd ce ff ff 	lea    -0x3123(%rip),%rcx        # ffffff0000000aa4 <core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS+0x12c>
ffffff0000003bc7:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
ffffff0000003bcb:	48 01 c8             	add    %rcx,%rax
ffffff0000003bce:	4c 89 64 24 30       	mov    %r12,0x30(%rsp)
ffffff0000003bd3:	89 54 24 08          	mov    %edx,0x8(%rsp)
ffffff0000003bd7:	ff e0                	jmp    *%rax
ffffff0000003bd9:	89 d0                	mov    %edx,%eax
ffffff0000003bdb:	e9 9a 00 00 00       	jmp    ffffff0000003c7a <core::fmt::Formatter::pad_integral+0x26a>
ffffff0000003be0:	49 8b 47 10          	mov    0x10(%r15),%rax
ffffff0000003be4:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffff0000003be9:	25 00 00 e0 9f       	and    $0x9fe00000,%eax
ffffff0000003bee:	0d 30 00 00 20       	or     $0x20000030,%eax
ffffff0000003bf3:	41 89 47 10          	mov    %eax,0x10(%r15)
ffffff0000003bf7:	49 8b 2f             	mov    (%r15),%rbp
ffffff0000003bfa:	49 8b 5f 08          	mov    0x8(%r15),%rbx
ffffff0000003bfe:	48 89 ef             	mov    %rbp,%rdi
ffffff0000003c01:	48 89 de             	mov    %rbx,%rsi
ffffff0000003c04:	8b 54 24 04          	mov    0x4(%rsp),%edx
ffffff0000003c08:	4c 89 e9             	mov    %r13,%rcx
ffffff0000003c0b:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffff0000003c10:	e8 2b 01 00 00       	call   ffffff0000003d40 <core::fmt::Formatter::pad_integral::write_prefix>
ffffff0000003c15:	41 b5 01             	mov    $0x1,%r13b
ffffff0000003c18:	84 c0                	test   %al,%al
ffffff0000003c1a:	0f 85 07 01 00 00    	jne    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003c20:	44 2b 74 24 20       	sub    0x20(%rsp),%r14d
ffffff0000003c25:	41 ff c6             	inc    %r14d
ffffff0000003c28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffff0000003c2f:	00 
ffffff0000003c30:	66 41 ff ce          	dec    %r14w
ffffff0000003c34:	74 14                	je     ffffff0000003c4a <core::fmt::Formatter::pad_integral+0x23a>
ffffff0000003c36:	48 89 ef             	mov    %rbp,%rdi
ffffff0000003c39:	be 30 00 00 00       	mov    $0x30,%esi
ffffff0000003c3e:	ff 53 20             	call   *0x20(%rbx)
ffffff0000003c41:	84 c0                	test   %al,%al
ffffff0000003c43:	74 eb                	je     ffffff0000003c30 <core::fmt::Formatter::pad_integral+0x220>
ffffff0000003c45:	e9 dd 00 00 00       	jmp    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003c4a:	48 89 ef             	mov    %rbp,%rdi
ffffff0000003c4d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffff0000003c52:	4c 89 e2             	mov    %r12,%rdx
ffffff0000003c55:	ff 53 18             	call   *0x18(%rbx)
ffffff0000003c58:	84 c0                	test   %al,%al
ffffff0000003c5a:	0f 85 c7 00 00 00    	jne    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003c60:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff0000003c65:	49 89 47 10          	mov    %rax,0x10(%r15)
ffffff0000003c69:	45 31 ed             	xor    %r13d,%r13d
ffffff0000003c6c:	e9 b6 00 00 00       	jmp    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003c71:	31 c0                	xor    %eax,%eax
ffffff0000003c73:	eb 05                	jmp    ffffff0000003c7a <core::fmt::Formatter::pad_integral+0x26a>
ffffff0000003c75:	0f b7 c2             	movzwl %dx,%eax
ffffff0000003c78:	d1 e8                	shr    %eax
ffffff0000003c7a:	81 e5 ff ff 1f 00    	and    $0x1fffff,%ebp
ffffff0000003c80:	49 8b 1f             	mov    (%r15),%rbx
ffffff0000003c83:	4d 8b 7f 08          	mov    0x8(%r15),%r15
ffffff0000003c87:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffff0000003c8c:	44 8d 60 01          	lea    0x1(%rax),%r12d
ffffff0000003c90:	48 89 df             	mov    %rbx,%rdi
ffffff0000003c93:	66 41 ff cc          	dec    %r12w
ffffff0000003c97:	74 0f                	je     ffffff0000003ca8 <core::fmt::Formatter::pad_integral+0x298>
ffffff0000003c99:	89 ee                	mov    %ebp,%esi
ffffff0000003c9b:	41 ff 57 20          	call   *0x20(%r15)
ffffff0000003c9f:	84 c0                	test   %al,%al
ffffff0000003ca1:	74 ed                	je     ffffff0000003c90 <core::fmt::Formatter::pad_integral+0x280>
ffffff0000003ca3:	41 b5 01             	mov    $0x1,%r13b
ffffff0000003ca6:	eb 7f                	jmp    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003ca8:	4c 89 fe             	mov    %r15,%rsi
ffffff0000003cab:	8b 54 24 04          	mov    0x4(%rsp),%edx
ffffff0000003caf:	4c 89 e9             	mov    %r13,%rcx
ffffff0000003cb2:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
ffffff0000003cb7:	e8 84 00 00 00       	call   ffffff0000003d40 <core::fmt::Formatter::pad_integral::write_prefix>
ffffff0000003cbc:	41 b5 01             	mov    $0x1,%r13b
ffffff0000003cbf:	84 c0                	test   %al,%al
ffffff0000003cc1:	75 64                	jne    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003cc3:	48 89 df             	mov    %rbx,%rdi
ffffff0000003cc6:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffff0000003ccb:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffff0000003cd0:	41 ff 57 18          	call   *0x18(%r15)
ffffff0000003cd4:	84 c0                	test   %al,%al
ffffff0000003cd6:	75 4f                	jne    ffffff0000003d27 <core::fmt::Formatter::pad_integral+0x317>
ffffff0000003cd8:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
ffffff0000003cdd:	4c 8b 6c 24 28       	mov    0x28(%rsp),%r13
ffffff0000003ce2:	45 29 ec             	sub    %r13d,%r12d
ffffff0000003ce5:	44 03 6c 24 20       	add    0x20(%rsp),%r13d
ffffff0000003cea:	45 29 f5             	sub    %r14d,%r13d
ffffff0000003ced:	66 41 be ff ff       	mov    $0xffff,%r14w
ffffff0000003cf2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000003cf9:	1f 84 00 00 00 00 00 
ffffff0000003d00:	43 8d 04 2e          	lea    (%r14,%r13,1),%eax
ffffff0000003d04:	66 83 f8 ff          	cmp    $0xffff,%ax
ffffff0000003d08:	74 12                	je     ffffff0000003d1c <core::fmt::Formatter::pad_integral+0x30c>
ffffff0000003d0a:	48 89 df             	mov    %rbx,%rdi
ffffff0000003d0d:	89 ee                	mov    %ebp,%esi
ffffff0000003d0f:	41 ff 57 20          	call   *0x20(%r15)
ffffff0000003d13:	41 ff c6             	inc    %r14d
ffffff0000003d16:	84 c0                	test   %al,%al
ffffff0000003d18:	74 e6                	je     ffffff0000003d00 <core::fmt::Formatter::pad_integral+0x2f0>
ffffff0000003d1a:	eb 03                	jmp    ffffff0000003d1f <core::fmt::Formatter::pad_integral+0x30f>
ffffff0000003d1c:	45 89 e6             	mov    %r12d,%r14d
ffffff0000003d1f:	66 45 39 e6          	cmp    %r12w,%r14w
ffffff0000003d23:	41 0f 92 c5          	setb   %r13b
ffffff0000003d27:	44 89 e8             	mov    %r13d,%eax
ffffff0000003d2a:	48 83 c4 38          	add    $0x38,%rsp
ffffff0000003d2e:	5b                   	pop    %rbx
ffffff0000003d2f:	41 5c                	pop    %r12
ffffff0000003d31:	41 5d                	pop    %r13
ffffff0000003d33:	41 5e                	pop    %r14
ffffff0000003d35:	41 5f                	pop    %r15
ffffff0000003d37:	5d                   	pop    %rbp
ffffff0000003d38:	c3                   	ret    
ffffff0000003d39:	cc                   	int3   
ffffff0000003d3a:	cc                   	int3   
ffffff0000003d3b:	cc                   	int3   
ffffff0000003d3c:	cc                   	int3   
ffffff0000003d3d:	cc                   	int3   
ffffff0000003d3e:	cc                   	int3   
ffffff0000003d3f:	cc                   	int3   

ffffff0000003d40 <core::fmt::Formatter::pad_integral::write_prefix>:
core::fmt::Formatter::pad_integral::write_prefix:
ffffff0000003d40:	41 57                	push   %r15
ffffff0000003d42:	41 56                	push   %r14
ffffff0000003d44:	41 54                	push   %r12
ffffff0000003d46:	53                   	push   %rbx
ffffff0000003d47:	50                   	push   %rax
ffffff0000003d48:	4c 89 c3             	mov    %r8,%rbx
ffffff0000003d4b:	49 89 ce             	mov    %rcx,%r14
ffffff0000003d4e:	49 89 f7             	mov    %rsi,%r15
ffffff0000003d51:	81 fa 00 00 11 00    	cmp    $0x110000,%edx
ffffff0000003d57:	74 14                	je     ffffff0000003d6d <core::fmt::Formatter::pad_integral::write_prefix+0x2d>
ffffff0000003d59:	49 89 fc             	mov    %rdi,%r12
ffffff0000003d5c:	89 d6                	mov    %edx,%esi
ffffff0000003d5e:	41 ff 57 20          	call   *0x20(%r15)
ffffff0000003d62:	4c 89 e7             	mov    %r12,%rdi
ffffff0000003d65:	89 c1                	mov    %eax,%ecx
ffffff0000003d67:	b0 01                	mov    $0x1,%al
ffffff0000003d69:	84 c9                	test   %cl,%cl
ffffff0000003d6b:	75 1e                	jne    ffffff0000003d8b <core::fmt::Formatter::pad_integral::write_prefix+0x4b>
ffffff0000003d6d:	4d 85 f6             	test   %r14,%r14
ffffff0000003d70:	74 17                	je     ffffff0000003d89 <core::fmt::Formatter::pad_integral::write_prefix+0x49>
ffffff0000003d72:	49 8b 47 18          	mov    0x18(%r15),%rax
ffffff0000003d76:	4c 89 f6             	mov    %r14,%rsi
ffffff0000003d79:	48 89 da             	mov    %rbx,%rdx
ffffff0000003d7c:	48 83 c4 08          	add    $0x8,%rsp
ffffff0000003d80:	5b                   	pop    %rbx
ffffff0000003d81:	41 5c                	pop    %r12
ffffff0000003d83:	41 5e                	pop    %r14
ffffff0000003d85:	41 5f                	pop    %r15
ffffff0000003d87:	ff e0                	jmp    *%rax
ffffff0000003d89:	31 c0                	xor    %eax,%eax
ffffff0000003d8b:	48 83 c4 08          	add    $0x8,%rsp
ffffff0000003d8f:	5b                   	pop    %rbx
ffffff0000003d90:	41 5c                	pop    %r12
ffffff0000003d92:	41 5e                	pop    %r14
ffffff0000003d94:	41 5f                	pop    %r15
ffffff0000003d96:	c3                   	ret    
ffffff0000003d97:	cc                   	int3   
ffffff0000003d98:	cc                   	int3   
ffffff0000003d99:	cc                   	int3   
ffffff0000003d9a:	cc                   	int3   
ffffff0000003d9b:	cc                   	int3   
ffffff0000003d9c:	cc                   	int3   
ffffff0000003d9d:	cc                   	int3   
ffffff0000003d9e:	cc                   	int3   
ffffff0000003d9f:	cc                   	int3   

ffffff0000003da0 <core::fmt::Formatter::pad>:
core::fmt::Formatter::pad:
ffffff0000003da0:	55                   	push   %rbp
ffffff0000003da1:	41 57                	push   %r15
ffffff0000003da3:	41 56                	push   %r14
ffffff0000003da5:	41 55                	push   %r13
ffffff0000003da7:	41 54                	push   %r12
ffffff0000003da9:	53                   	push   %rbx
ffffff0000003daa:	48 83 ec 28          	sub    $0x28,%rsp
ffffff0000003dae:	49 89 d5             	mov    %rdx,%r13
ffffff0000003db1:	49 89 f6             	mov    %rsi,%r14
ffffff0000003db4:	8b 5f 10             	mov    0x10(%rdi),%ebx
ffffff0000003db7:	f7 c3 00 00 00 18    	test   $0x18000000,%ebx
ffffff0000003dbd:	0f 84 ed 00 00 00    	je     ffffff0000003eb0 <core::fmt::Formatter::pad+0x110>
ffffff0000003dc3:	f7 c3 00 00 00 10    	test   $0x10000000,%ebx
ffffff0000003dc9:	75 2d                	jne    ffffff0000003df8 <core::fmt::Formatter::pad+0x58>
ffffff0000003dcb:	49 83 fd 20          	cmp    $0x20,%r13
ffffff0000003dcf:	0f 83 7e 00 00 00    	jae    ffffff0000003e53 <core::fmt::Formatter::pad+0xb3>
ffffff0000003dd5:	4d 85 ed             	test   %r13,%r13
ffffff0000003dd8:	0f 84 94 01 00 00    	je     ffffff0000003f72 <core::fmt::Formatter::pad+0x1d2>
ffffff0000003dde:	44 89 e8             	mov    %r13d,%eax
ffffff0000003de1:	83 e0 03             	and    $0x3,%eax
ffffff0000003de4:	49 83 fd 04          	cmp    $0x4,%r13
ffffff0000003de8:	0f 83 8f 01 00 00    	jae    ffffff0000003f7d <core::fmt::Formatter::pad+0x1dd>
ffffff0000003dee:	45 31 e4             	xor    %r12d,%r12d
ffffff0000003df1:	31 c9                	xor    %ecx,%ecx
ffffff0000003df3:	e9 df 01 00 00       	jmp    ffffff0000003fd7 <core::fmt::Formatter::pad+0x237>
ffffff0000003df8:	44 0f b7 67 16       	movzwl 0x16(%rdi),%r12d
ffffff0000003dfd:	4d 85 e4             	test   %r12,%r12
ffffff0000003e00:	74 67                	je     ffffff0000003e69 <core::fmt::Formatter::pad+0xc9>
ffffff0000003e02:	4d 01 f5             	add    %r14,%r13
ffffff0000003e05:	4c 89 e0             	mov    %r12,%rax
ffffff0000003e08:	31 f6                	xor    %esi,%esi
ffffff0000003e0a:	4c 89 f1             	mov    %r14,%rcx
ffffff0000003e0d:	eb 16                	jmp    ffffff0000003e25 <core::fmt::Formatter::pad+0x85>
ffffff0000003e0f:	90                   	nop
ffffff0000003e10:	4c 8d 41 01          	lea    0x1(%rcx),%r8
ffffff0000003e14:	4c 89 c6             	mov    %r8,%rsi
ffffff0000003e17:	48 29 ce             	sub    %rcx,%rsi
ffffff0000003e1a:	48 01 d6             	add    %rdx,%rsi
ffffff0000003e1d:	4c 89 c1             	mov    %r8,%rcx
ffffff0000003e20:	48 ff c8             	dec    %rax
ffffff0000003e23:	74 46                	je     ffffff0000003e6b <core::fmt::Formatter::pad+0xcb>
ffffff0000003e25:	48 89 f2             	mov    %rsi,%rdx
ffffff0000003e28:	4c 39 e9             	cmp    %r13,%rcx
ffffff0000003e2b:	74 42                	je     ffffff0000003e6f <core::fmt::Formatter::pad+0xcf>
ffffff0000003e2d:	0f b6 31             	movzbl (%rcx),%esi
ffffff0000003e30:	40 84 f6             	test   %sil,%sil
ffffff0000003e33:	79 db                	jns    ffffff0000003e10 <core::fmt::Formatter::pad+0x70>
ffffff0000003e35:	40 80 fe e0          	cmp    $0xe0,%sil
ffffff0000003e39:	72 0c                	jb     ffffff0000003e47 <core::fmt::Formatter::pad+0xa7>
ffffff0000003e3b:	40 80 fe f0          	cmp    $0xf0,%sil
ffffff0000003e3f:	72 0c                	jb     ffffff0000003e4d <core::fmt::Formatter::pad+0xad>
ffffff0000003e41:	4c 8d 41 04          	lea    0x4(%rcx),%r8
ffffff0000003e45:	eb cd                	jmp    ffffff0000003e14 <core::fmt::Formatter::pad+0x74>
ffffff0000003e47:	4c 8d 41 02          	lea    0x2(%rcx),%r8
ffffff0000003e4b:	eb c7                	jmp    ffffff0000003e14 <core::fmt::Formatter::pad+0x74>
ffffff0000003e4d:	4c 8d 41 03          	lea    0x3(%rcx),%r8
ffffff0000003e51:	eb c1                	jmp    ffffff0000003e14 <core::fmt::Formatter::pad+0x74>
ffffff0000003e53:	49 89 ff             	mov    %rdi,%r15
ffffff0000003e56:	4c 89 f7             	mov    %r14,%rdi
ffffff0000003e59:	4c 89 ee             	mov    %r13,%rsi
ffffff0000003e5c:	e8 0f 0a 00 00       	call   ffffff0000004870 <core::str::count::do_count_chars>
ffffff0000003e61:	4c 89 ff             	mov    %r15,%rdi
ffffff0000003e64:	49 89 c4             	mov    %rax,%r12
ffffff0000003e67:	eb 0f                	jmp    ffffff0000003e78 <core::fmt::Formatter::pad+0xd8>
ffffff0000003e69:	31 f6                	xor    %esi,%esi
ffffff0000003e6b:	31 c0                	xor    %eax,%eax
ffffff0000003e6d:	eb 03                	jmp    ffffff0000003e72 <core::fmt::Formatter::pad+0xd2>
ffffff0000003e6f:	48 89 d6             	mov    %rdx,%rsi
ffffff0000003e72:	49 29 c4             	sub    %rax,%r12
ffffff0000003e75:	49 89 f5             	mov    %rsi,%r13
ffffff0000003e78:	0f b7 47 14          	movzwl 0x14(%rdi),%eax
ffffff0000003e7c:	49 39 c4             	cmp    %rax,%r12
ffffff0000003e7f:	73 2f                	jae    ffffff0000003eb0 <core::fmt::Formatter::pad+0x110>
ffffff0000003e81:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffff0000003e86:	89 c2                	mov    %eax,%edx
ffffff0000003e88:	44 29 e2             	sub    %r12d,%edx
ffffff0000003e8b:	89 d8                	mov    %ebx,%eax
ffffff0000003e8d:	c1 e8 1d             	shr    $0x1d,%eax
ffffff0000003e90:	83 e0 03             	and    $0x3,%eax
ffffff0000003e93:	48 8d 0d 1a cc ff ff 	lea    -0x33e6(%rip),%rcx        # ffffff0000000ab4 <core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS+0x13c>
ffffff0000003e9a:	48 63 04 81          	movslq (%rcx,%rax,4),%rax
ffffff0000003e9e:	48 01 c8             	add    %rcx,%rax
ffffff0000003ea1:	4c 89 6c 24 20       	mov    %r13,0x20(%rsp)
ffffff0000003ea6:	89 54 24 0c          	mov    %edx,0xc(%rsp)
ffffff0000003eaa:	ff e0                	jmp    *%rax
ffffff0000003eac:	31 c0                	xor    %eax,%eax
ffffff0000003eae:	eb 2d                	jmp    ffffff0000003edd <core::fmt::Formatter::pad+0x13d>
ffffff0000003eb0:	48 8b 07             	mov    (%rdi),%rax
ffffff0000003eb3:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffff0000003eb7:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffff0000003ebb:	48 89 c7             	mov    %rax,%rdi
ffffff0000003ebe:	4c 89 f6             	mov    %r14,%rsi
ffffff0000003ec1:	4c 89 ea             	mov    %r13,%rdx
ffffff0000003ec4:	48 83 c4 28          	add    $0x28,%rsp
ffffff0000003ec8:	5b                   	pop    %rbx
ffffff0000003ec9:	41 5c                	pop    %r12
ffffff0000003ecb:	41 5d                	pop    %r13
ffffff0000003ecd:	41 5e                	pop    %r14
ffffff0000003ecf:	41 5f                	pop    %r15
ffffff0000003ed1:	5d                   	pop    %rbp
ffffff0000003ed2:	ff e1                	jmp    *%rcx
ffffff0000003ed4:	89 d0                	mov    %edx,%eax
ffffff0000003ed6:	eb 05                	jmp    ffffff0000003edd <core::fmt::Formatter::pad+0x13d>
ffffff0000003ed8:	0f b7 c2             	movzwl %dx,%eax
ffffff0000003edb:	d1 e8                	shr    %eax
ffffff0000003edd:	81 e3 ff ff 1f 00    	and    $0x1fffff,%ebx
ffffff0000003ee3:	4c 8b 2f             	mov    (%rdi),%r13
ffffff0000003ee6:	48 8b 6f 08          	mov    0x8(%rdi),%rbp
ffffff0000003eea:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000003eef:	44 8d 78 01          	lea    0x1(%rax),%r15d
ffffff0000003ef3:	66 66 66 66 2e 0f 1f 	data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000003efa:	84 00 00 00 00 00 
ffffff0000003f00:	4c 89 ef             	mov    %r13,%rdi
ffffff0000003f03:	66 41 ff cf          	dec    %r15w
ffffff0000003f07:	74 10                	je     ffffff0000003f19 <core::fmt::Formatter::pad+0x179>
ffffff0000003f09:	89 de                	mov    %ebx,%esi
ffffff0000003f0b:	ff 55 20             	call   *0x20(%rbp)
ffffff0000003f0e:	84 c0                	test   %al,%al
ffffff0000003f10:	74 ee                	je     ffffff0000003f00 <core::fmt::Formatter::pad+0x160>
ffffff0000003f12:	b0 01                	mov    $0x1,%al
ffffff0000003f14:	e9 fb 00 00 00       	jmp    ffffff0000004014 <core::fmt::Formatter::pad+0x274>
ffffff0000003f19:	4c 89 f6             	mov    %r14,%rsi
ffffff0000003f1c:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffff0000003f21:	ff 55 18             	call   *0x18(%rbp)
ffffff0000003f24:	89 c1                	mov    %eax,%ecx
ffffff0000003f26:	b0 01                	mov    $0x1,%al
ffffff0000003f28:	84 c9                	test   %cl,%cl
ffffff0000003f2a:	0f 85 e4 00 00 00    	jne    ffffff0000004014 <core::fmt::Formatter::pad+0x274>
ffffff0000003f30:	44 8b 7c 24 0c       	mov    0xc(%rsp),%r15d
ffffff0000003f35:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffff0000003f3a:	41 29 c7             	sub    %eax,%r15d
ffffff0000003f3d:	44 01 e0             	add    %r12d,%eax
ffffff0000003f40:	49 89 c4             	mov    %rax,%r12
ffffff0000003f43:	44 2b 64 24 10       	sub    0x10(%rsp),%r12d
ffffff0000003f48:	66 41 be ff ff       	mov    $0xffff,%r14w
ffffff0000003f4d:	0f 1f 00             	nopl   (%rax)
ffffff0000003f50:	43 8d 04 34          	lea    (%r12,%r14,1),%eax
ffffff0000003f54:	66 83 f8 ff          	cmp    $0xffff,%ax
ffffff0000003f58:	0f 84 ac 00 00 00    	je     ffffff000000400a <core::fmt::Formatter::pad+0x26a>
ffffff0000003f5e:	4c 89 ef             	mov    %r13,%rdi
ffffff0000003f61:	89 de                	mov    %ebx,%esi
ffffff0000003f63:	ff 55 20             	call   *0x20(%rbp)
ffffff0000003f66:	41 ff c6             	inc    %r14d
ffffff0000003f69:	84 c0                	test   %al,%al
ffffff0000003f6b:	74 e3                	je     ffffff0000003f50 <core::fmt::Formatter::pad+0x1b0>
ffffff0000003f6d:	e9 9b 00 00 00       	jmp    ffffff000000400d <core::fmt::Formatter::pad+0x26d>
ffffff0000003f72:	45 31 ed             	xor    %r13d,%r13d
ffffff0000003f75:	45 31 e4             	xor    %r12d,%r12d
ffffff0000003f78:	e9 fb fe ff ff       	jmp    ffffff0000003e78 <core::fmt::Formatter::pad+0xd8>
ffffff0000003f7d:	44 89 ea             	mov    %r13d,%edx
ffffff0000003f80:	83 e2 1c             	and    $0x1c,%edx
ffffff0000003f83:	45 31 e4             	xor    %r12d,%r12d
ffffff0000003f86:	31 c9                	xor    %ecx,%ecx
ffffff0000003f88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffff0000003f8f:	00 
ffffff0000003f90:	31 f6                	xor    %esi,%esi
ffffff0000003f92:	41 80 3c 0e c0       	cmpb   $0xc0,(%r14,%rcx,1)
ffffff0000003f97:	40 0f 9d c6          	setge  %sil
ffffff0000003f9b:	4c 01 e6             	add    %r12,%rsi
ffffff0000003f9e:	45 31 c0             	xor    %r8d,%r8d
ffffff0000003fa1:	41 80 7c 0e 01 c0    	cmpb   $0xc0,0x1(%r14,%rcx,1)
ffffff0000003fa7:	41 0f 9d c0          	setge  %r8b
ffffff0000003fab:	45 31 c9             	xor    %r9d,%r9d
ffffff0000003fae:	41 80 7c 0e 02 c0    	cmpb   $0xc0,0x2(%r14,%rcx,1)
ffffff0000003fb4:	41 0f 9d c1          	setge  %r9b
ffffff0000003fb8:	4d 01 c1             	add    %r8,%r9
ffffff0000003fbb:	49 01 f1             	add    %rsi,%r9
ffffff0000003fbe:	45 31 e4             	xor    %r12d,%r12d
ffffff0000003fc1:	41 80 7c 0e 03 c0    	cmpb   $0xc0,0x3(%r14,%rcx,1)
ffffff0000003fc7:	41 0f 9d c4          	setge  %r12b
ffffff0000003fcb:	4d 01 cc             	add    %r9,%r12
ffffff0000003fce:	48 83 c1 04          	add    $0x4,%rcx
ffffff0000003fd2:	48 39 ca             	cmp    %rcx,%rdx
ffffff0000003fd5:	75 b9                	jne    ffffff0000003f90 <core::fmt::Formatter::pad+0x1f0>
ffffff0000003fd7:	48 85 c0             	test   %rax,%rax
ffffff0000003fda:	0f 84 98 fe ff ff    	je     ffffff0000003e78 <core::fmt::Formatter::pad+0xd8>
ffffff0000003fe0:	4c 01 f1             	add    %r14,%rcx
ffffff0000003fe3:	31 d2                	xor    %edx,%edx
ffffff0000003fe5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000003fec:	00 00 00 00 
ffffff0000003ff0:	31 f6                	xor    %esi,%esi
ffffff0000003ff2:	80 3c 11 c0          	cmpb   $0xc0,(%rcx,%rdx,1)
ffffff0000003ff6:	40 0f 9d c6          	setge  %sil
ffffff0000003ffa:	49 01 f4             	add    %rsi,%r12
ffffff0000003ffd:	48 ff c2             	inc    %rdx
ffffff0000004000:	48 39 d0             	cmp    %rdx,%rax
ffffff0000004003:	75 eb                	jne    ffffff0000003ff0 <core::fmt::Formatter::pad+0x250>
ffffff0000004005:	e9 6e fe ff ff       	jmp    ffffff0000003e78 <core::fmt::Formatter::pad+0xd8>
ffffff000000400a:	45 89 fe             	mov    %r15d,%r14d
ffffff000000400d:	66 45 39 fe          	cmp    %r15w,%r14w
ffffff0000004011:	0f 92 c0             	setb   %al
ffffff0000004014:	48 83 c4 28          	add    $0x28,%rsp
ffffff0000004018:	5b                   	pop    %rbx
ffffff0000004019:	41 5c                	pop    %r12
ffffff000000401b:	41 5d                	pop    %r13
ffffff000000401d:	41 5e                	pop    %r14
ffffff000000401f:	41 5f                	pop    %r15
ffffff0000004021:	5d                   	pop    %rbp
ffffff0000004022:	c3                   	ret    
ffffff0000004023:	cc                   	int3   
ffffff0000004024:	cc                   	int3   
ffffff0000004025:	cc                   	int3   
ffffff0000004026:	cc                   	int3   
ffffff0000004027:	cc                   	int3   
ffffff0000004028:	cc                   	int3   
ffffff0000004029:	cc                   	int3   
ffffff000000402a:	cc                   	int3   
ffffff000000402b:	cc                   	int3   
ffffff000000402c:	cc                   	int3   
ffffff000000402d:	cc                   	int3   
ffffff000000402e:	cc                   	int3   
ffffff000000402f:	cc                   	int3   

ffffff0000004030 <core::fmt::Formatter::write_str>:
core::fmt::Formatter::write_str:
ffffff0000004030:	48 8b 07             	mov    (%rdi),%rax
ffffff0000004033:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffff0000004037:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffff000000403b:	48 89 c7             	mov    %rax,%rdi
ffffff000000403e:	ff e1                	jmp    *%rcx

ffffff0000004040 <core::fmt::Formatter::debug_struct_field3_finish>:
core::fmt::Formatter::debug_struct_field3_finish:
ffffff0000004040:	55                   	push   %rbp
ffffff0000004041:	41 57                	push   %r15
ffffff0000004043:	41 56                	push   %r14
ffffff0000004045:	41 55                	push   %r13
ffffff0000004047:	41 54                	push   %r12
ffffff0000004049:	53                   	push   %rbx
ffffff000000404a:	48 83 ec 18          	sub    $0x18,%rsp
ffffff000000404e:	4d 89 cd             	mov    %r9,%r13
ffffff0000004051:	4c 89 c5             	mov    %r8,%rbp
ffffff0000004054:	48 89 cb             	mov    %rcx,%rbx
ffffff0000004057:	49 89 fe             	mov    %rdi,%r14
ffffff000000405a:	4c 8b 64 24 60       	mov    0x60(%rsp),%r12
ffffff000000405f:	4c 8b 7c 24 50       	mov    0x50(%rsp),%r15
ffffff0000004064:	48 8b 3f             	mov    (%rdi),%rdi
ffffff0000004067:	49 8b 46 08          	mov    0x8(%r14),%rax
ffffff000000406b:	ff 50 18             	call   *0x18(%rax)
ffffff000000406e:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
ffffff0000004073:	88 44 24 10          	mov    %al,0x10(%rsp)
ffffff0000004077:	c6 44 24 11 00       	movb   $0x0,0x11(%rsp)
ffffff000000407c:	4c 8d 74 24 08       	lea    0x8(%rsp),%r14
ffffff0000004081:	4c 89 f7             	mov    %r14,%rdi
ffffff0000004084:	48 89 de             	mov    %rbx,%rsi
ffffff0000004087:	48 89 ea             	mov    %rbp,%rdx
ffffff000000408a:	4c 89 e9             	mov    %r13,%rcx
ffffff000000408d:	4d 89 f8             	mov    %r15,%r8
ffffff0000004090:	e8 9b 16 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff0000004095:	4c 89 f7             	mov    %r14,%rdi
ffffff0000004098:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
ffffff000000409d:	4c 89 e2             	mov    %r12,%rdx
ffffff00000040a0:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
ffffff00000040a5:	4c 8b 44 24 70       	mov    0x70(%rsp),%r8
ffffff00000040aa:	e8 81 16 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff00000040af:	4c 89 f7             	mov    %r14,%rdi
ffffff00000040b2:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
ffffff00000040b7:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
ffffff00000040be:	00 
ffffff00000040bf:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
ffffff00000040c6:	00 
ffffff00000040c7:	4c 8b 84 24 90 00 00 	mov    0x90(%rsp),%r8
ffffff00000040ce:	00 
ffffff00000040cf:	e8 5c 16 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff00000040d4:	0f b6 4c 24 10       	movzbl 0x10(%rsp),%ecx
ffffff00000040d9:	0f b6 44 24 11       	movzbl 0x11(%rsp),%eax
ffffff00000040de:	89 c2                	mov    %eax,%edx
ffffff00000040e0:	f6 d2                	not    %dl
ffffff00000040e2:	08 ca                	or     %cl,%dl
ffffff00000040e4:	f6 c2 01             	test   $0x1,%dl
ffffff00000040e7:	74 04                	je     ffffff00000040ed <core::fmt::Formatter::debug_struct_field3_finish+0xad>
ffffff00000040e9:	08 c8                	or     %cl,%al
ffffff00000040eb:	eb 36                	jmp    ffffff0000004123 <core::fmt::Formatter::debug_struct_field3_finish+0xe3>
ffffff00000040ed:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff00000040f2:	f6 40 12 80          	testb  $0x80,0x12(%rax)
ffffff00000040f6:	75 15                	jne    ffffff000000410d <core::fmt::Formatter::debug_struct_field3_finish+0xcd>
ffffff00000040f8:	48 8b 38             	mov    (%rax),%rdi
ffffff00000040fb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffff00000040ff:	48 8d 35 df d1 ff ff 	lea    -0x2e21(%rip),%rsi        # ffffff00000012e5 <anon.451ba7122ea5ee56ce5542689b8bca16.22.llvm.3806639450086334051>
ffffff0000004106:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff000000410b:	eb 13                	jmp    ffffff0000004120 <core::fmt::Formatter::debug_struct_field3_finish+0xe0>
ffffff000000410d:	48 8b 38             	mov    (%rax),%rdi
ffffff0000004110:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffff0000004114:	48 8d 35 c9 d1 ff ff 	lea    -0x2e37(%rip),%rsi        # ffffff00000012e4 <anon.451ba7122ea5ee56ce5542689b8bca16.21.llvm.3806639450086334051>
ffffff000000411b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff0000004120:	ff 50 18             	call   *0x18(%rax)
ffffff0000004123:	24 01                	and    $0x1,%al
ffffff0000004125:	48 83 c4 18          	add    $0x18,%rsp
ffffff0000004129:	5b                   	pop    %rbx
ffffff000000412a:	41 5c                	pop    %r12
ffffff000000412c:	41 5d                	pop    %r13
ffffff000000412e:	41 5e                	pop    %r14
ffffff0000004130:	41 5f                	pop    %r15
ffffff0000004132:	5d                   	pop    %rbp
ffffff0000004133:	c3                   	ret    
ffffff0000004134:	cc                   	int3   
ffffff0000004135:	cc                   	int3   
ffffff0000004136:	cc                   	int3   
ffffff0000004137:	cc                   	int3   
ffffff0000004138:	cc                   	int3   
ffffff0000004139:	cc                   	int3   
ffffff000000413a:	cc                   	int3   
ffffff000000413b:	cc                   	int3   
ffffff000000413c:	cc                   	int3   
ffffff000000413d:	cc                   	int3   
ffffff000000413e:	cc                   	int3   
ffffff000000413f:	cc                   	int3   

ffffff0000004140 <core::fmt::Formatter::debug_struct_field4_finish>:
core::fmt::Formatter::debug_struct_field4_finish:
ffffff0000004140:	55                   	push   %rbp
ffffff0000004141:	41 57                	push   %r15
ffffff0000004143:	41 56                	push   %r14
ffffff0000004145:	41 55                	push   %r13
ffffff0000004147:	41 54                	push   %r12
ffffff0000004149:	53                   	push   %rbx
ffffff000000414a:	48 83 ec 18          	sub    $0x18,%rsp
ffffff000000414e:	4d 89 cf             	mov    %r9,%r15
ffffff0000004151:	4d 89 c4             	mov    %r8,%r12
ffffff0000004154:	48 89 cb             	mov    %rcx,%rbx
ffffff0000004157:	49 89 fe             	mov    %rdi,%r14
ffffff000000415a:	48 8b 6c 24 60       	mov    0x60(%rsp),%rbp
ffffff000000415f:	4c 8b 6c 24 50       	mov    0x50(%rsp),%r13
ffffff0000004164:	48 8b 3f             	mov    (%rdi),%rdi
ffffff0000004167:	49 8b 46 08          	mov    0x8(%r14),%rax
ffffff000000416b:	ff 50 18             	call   *0x18(%rax)
ffffff000000416e:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
ffffff0000004173:	88 44 24 10          	mov    %al,0x10(%rsp)
ffffff0000004177:	c6 44 24 11 00       	movb   $0x0,0x11(%rsp)
ffffff000000417c:	4c 8d 74 24 08       	lea    0x8(%rsp),%r14
ffffff0000004181:	4c 89 f7             	mov    %r14,%rdi
ffffff0000004184:	48 89 de             	mov    %rbx,%rsi
ffffff0000004187:	4c 89 e2             	mov    %r12,%rdx
ffffff000000418a:	4c 89 f9             	mov    %r15,%rcx
ffffff000000418d:	4d 89 e8             	mov    %r13,%r8
ffffff0000004190:	e8 9b 15 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff0000004195:	4c 89 f7             	mov    %r14,%rdi
ffffff0000004198:	48 8b 74 24 58       	mov    0x58(%rsp),%rsi
ffffff000000419d:	48 89 ea             	mov    %rbp,%rdx
ffffff00000041a0:	48 8b 4c 24 68       	mov    0x68(%rsp),%rcx
ffffff00000041a5:	4c 8b 44 24 70       	mov    0x70(%rsp),%r8
ffffff00000041aa:	e8 81 15 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff00000041af:	4c 89 f7             	mov    %r14,%rdi
ffffff00000041b2:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
ffffff00000041b7:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
ffffff00000041be:	00 
ffffff00000041bf:	48 8b 8c 24 88 00 00 	mov    0x88(%rsp),%rcx
ffffff00000041c6:	00 
ffffff00000041c7:	4c 8b 84 24 90 00 00 	mov    0x90(%rsp),%r8
ffffff00000041ce:	00 
ffffff00000041cf:	e8 5c 15 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff00000041d4:	4c 89 f7             	mov    %r14,%rdi
ffffff00000041d7:	48 8b b4 24 98 00 00 	mov    0x98(%rsp),%rsi
ffffff00000041de:	00 
ffffff00000041df:	48 8b 94 24 a0 00 00 	mov    0xa0(%rsp),%rdx
ffffff00000041e6:	00 
ffffff00000041e7:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
ffffff00000041ee:	00 
ffffff00000041ef:	4c 8b 84 24 b0 00 00 	mov    0xb0(%rsp),%r8
ffffff00000041f6:	00 
ffffff00000041f7:	e8 34 15 00 00       	call   ffffff0000005730 <core::fmt::builders::DebugStruct::field>
ffffff00000041fc:	0f b6 4c 24 10       	movzbl 0x10(%rsp),%ecx
ffffff0000004201:	0f b6 44 24 11       	movzbl 0x11(%rsp),%eax
ffffff0000004206:	89 c2                	mov    %eax,%edx
ffffff0000004208:	f6 d2                	not    %dl
ffffff000000420a:	08 ca                	or     %cl,%dl
ffffff000000420c:	f6 c2 01             	test   $0x1,%dl
ffffff000000420f:	74 04                	je     ffffff0000004215 <core::fmt::Formatter::debug_struct_field4_finish+0xd5>
ffffff0000004211:	08 c8                	or     %cl,%al
ffffff0000004213:	eb 36                	jmp    ffffff000000424b <core::fmt::Formatter::debug_struct_field4_finish+0x10b>
ffffff0000004215:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff000000421a:	f6 40 12 80          	testb  $0x80,0x12(%rax)
ffffff000000421e:	75 15                	jne    ffffff0000004235 <core::fmt::Formatter::debug_struct_field4_finish+0xf5>
ffffff0000004220:	48 8b 38             	mov    (%rax),%rdi
ffffff0000004223:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffff0000004227:	48 8d 35 b7 d0 ff ff 	lea    -0x2f49(%rip),%rsi        # ffffff00000012e5 <anon.451ba7122ea5ee56ce5542689b8bca16.22.llvm.3806639450086334051>
ffffff000000422e:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff0000004233:	eb 13                	jmp    ffffff0000004248 <core::fmt::Formatter::debug_struct_field4_finish+0x108>
ffffff0000004235:	48 8b 38             	mov    (%rax),%rdi
ffffff0000004238:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffff000000423c:	48 8d 35 a1 d0 ff ff 	lea    -0x2f5f(%rip),%rsi        # ffffff00000012e4 <anon.451ba7122ea5ee56ce5542689b8bca16.21.llvm.3806639450086334051>
ffffff0000004243:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff0000004248:	ff 50 18             	call   *0x18(%rax)
ffffff000000424b:	24 01                	and    $0x1,%al
ffffff000000424d:	48 83 c4 18          	add    $0x18,%rsp
ffffff0000004251:	5b                   	pop    %rbx
ffffff0000004252:	41 5c                	pop    %r12
ffffff0000004254:	41 5d                	pop    %r13
ffffff0000004256:	41 5e                	pop    %r14
ffffff0000004258:	41 5f                	pop    %r15
ffffff000000425a:	5d                   	pop    %rbp
ffffff000000425b:	c3                   	ret    
ffffff000000425c:	cc                   	int3   
ffffff000000425d:	cc                   	int3   
ffffff000000425e:	cc                   	int3   
ffffff000000425f:	cc                   	int3   

ffffff0000004260 <core::fmt::Formatter::debug_tuple_field1_finish>:
core::fmt::Formatter::debug_tuple_field1_finish:
ffffff0000004260:	55                   	push   %rbp
ffffff0000004261:	41 57                	push   %r15
ffffff0000004263:	41 56                	push   %r14
ffffff0000004265:	41 55                	push   %r13
ffffff0000004267:	41 54                	push   %r12
ffffff0000004269:	53                   	push   %rbx
ffffff000000426a:	48 83 ec 48          	sub    $0x48,%rsp
ffffff000000426e:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffff0000004273:	49 89 cd             	mov    %rcx,%r13
ffffff0000004276:	49 89 d7             	mov    %rdx,%r15
ffffff0000004279:	49 89 fe             	mov    %rdi,%r14
ffffff000000427c:	48 8b 2f             	mov    (%rdi),%rbp
ffffff000000427f:	4c 8b 67 08          	mov    0x8(%rdi),%r12
ffffff0000004283:	49 8b 5c 24 18       	mov    0x18(%r12),%rbx
ffffff0000004288:	48 89 ef             	mov    %rbp,%rdi
ffffff000000428b:	ff d3                	call   *%rbx
ffffff000000428d:	b1 01                	mov    $0x1,%cl
ffffff000000428f:	84 c0                	test   %al,%al
ffffff0000004291:	0f 85 bb 00 00 00    	jne    ffffff0000004352 <core::fmt::Formatter::debug_tuple_field1_finish+0xf2>
ffffff0000004297:	41 f6 46 12 80       	testb  $0x80,0x12(%r14)
ffffff000000429c:	75 34                	jne    ffffff00000042d2 <core::fmt::Formatter::debug_tuple_field1_finish+0x72>
ffffff000000429e:	48 8d 35 42 d0 ff ff 	lea    -0x2fbe(%rip),%rsi        # ffffff00000012e7 <anon.451ba7122ea5ee56ce5542689b8bca16.23.llvm.3806639450086334051>
ffffff00000042a5:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff00000042aa:	48 89 ef             	mov    %rbp,%rdi
ffffff00000042ad:	ff d3                	call   *%rbx
ffffff00000042af:	84 c0                	test   %al,%al
ffffff00000042b1:	0f 85 99 00 00 00    	jne    ffffff0000004350 <core::fmt::Formatter::debug_tuple_field1_finish+0xf0>
ffffff00000042b7:	4c 89 ef             	mov    %r13,%rdi
ffffff00000042ba:	4c 89 f6             	mov    %r14,%rsi
ffffff00000042bd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff00000042c2:	ff 50 18             	call   *0x18(%rax)
ffffff00000042c5:	84 c0                	test   %al,%al
ffffff00000042c7:	0f 85 83 00 00 00    	jne    ffffff0000004350 <core::fmt::Formatter::debug_tuple_field1_finish+0xf0>
ffffff00000042cd:	e9 91 00 00 00       	jmp    ffffff0000004363 <core::fmt::Formatter::debug_tuple_field1_finish+0x103>
ffffff00000042d2:	48 8d 35 0f d0 ff ff 	lea    -0x2ff1(%rip),%rsi        # ffffff00000012e8 <anon.451ba7122ea5ee56ce5542689b8bca16.24.llvm.3806639450086334051>
ffffff00000042d9:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff00000042de:	48 89 ef             	mov    %rbp,%rdi
ffffff00000042e1:	ff d3                	call   *%rbx
ffffff00000042e3:	84 c0                	test   %al,%al
ffffff00000042e5:	75 69                	jne    ffffff0000004350 <core::fmt::Formatter::debug_tuple_field1_finish+0xf0>
ffffff00000042e7:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
ffffff00000042ec:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
ffffff00000042f1:	4c 89 64 24 38       	mov    %r12,0x38(%rsp)
ffffff00000042f6:	48 8d 44 24 0f       	lea    0xf(%rsp),%rax
ffffff00000042fb:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
ffffff0000004300:	49 8b 46 10          	mov    0x10(%r14),%rax
ffffff0000004304:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffff0000004309:	48 8d 44 24 30       	lea    0x30(%rsp),%rax
ffffff000000430e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000004313:	48 8d 05 ce 22 00 00 	lea    0x22ce(%rip),%rax        # ffffff00000065e8 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051>
ffffff000000431a:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff000000431f:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
ffffff0000004324:	4c 89 ef             	mov    %r13,%rdi
ffffff0000004327:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff000000432c:	ff 50 18             	call   *0x18(%rax)
ffffff000000432f:	84 c0                	test   %al,%al
ffffff0000004331:	75 1d                	jne    ffffff0000004350 <core::fmt::Formatter::debug_tuple_field1_finish+0xf0>
ffffff0000004333:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffff0000004338:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffff000000433d:	48 8d 35 9e cf ff ff 	lea    -0x3062(%rip),%rsi        # ffffff00000012e2 <anon.451ba7122ea5ee56ce5542689b8bca16.17.llvm.3806639450086334051>
ffffff0000004344:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff0000004349:	ff 50 18             	call   *0x18(%rax)
ffffff000000434c:	84 c0                	test   %al,%al
ffffff000000434e:	74 13                	je     ffffff0000004363 <core::fmt::Formatter::debug_tuple_field1_finish+0x103>
ffffff0000004350:	b1 01                	mov    $0x1,%cl
ffffff0000004352:	89 c8                	mov    %ecx,%eax
ffffff0000004354:	48 83 c4 48          	add    $0x48,%rsp
ffffff0000004358:	5b                   	pop    %rbx
ffffff0000004359:	41 5c                	pop    %r12
ffffff000000435b:	41 5d                	pop    %r13
ffffff000000435d:	41 5e                	pop    %r14
ffffff000000435f:	41 5f                	pop    %r15
ffffff0000004361:	5d                   	pop    %rbp
ffffff0000004362:	c3                   	ret    
ffffff0000004363:	4d 85 ff             	test   %r15,%r15
ffffff0000004366:	75 23                	jne    ffffff000000438b <core::fmt::Formatter::debug_tuple_field1_finish+0x12b>
ffffff0000004368:	41 f6 46 12 80       	testb  $0x80,0x12(%r14)
ffffff000000436d:	75 1c                	jne    ffffff000000438b <core::fmt::Formatter::debug_tuple_field1_finish+0x12b>
ffffff000000436f:	49 8b 3e             	mov    (%r14),%rdi
ffffff0000004372:	49 8b 46 08          	mov    0x8(%r14),%rax
ffffff0000004376:	48 8d 35 6e cf ff ff 	lea    -0x3092(%rip),%rsi        # ffffff00000012eb <anon.451ba7122ea5ee56ce5542689b8bca16.28.llvm.3806639450086334051>
ffffff000000437d:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff0000004382:	ff 50 18             	call   *0x18(%rax)
ffffff0000004385:	b1 01                	mov    $0x1,%cl
ffffff0000004387:	84 c0                	test   %al,%al
ffffff0000004389:	75 c7                	jne    ffffff0000004352 <core::fmt::Formatter::debug_tuple_field1_finish+0xf2>
ffffff000000438b:	49 8b 3e             	mov    (%r14),%rdi
ffffff000000438e:	49 8b 46 08          	mov    0x8(%r14),%rax
ffffff0000004392:	48 8d 35 51 cf ff ff 	lea    -0x30af(%rip),%rsi        # ffffff00000012ea <anon.451ba7122ea5ee56ce5542689b8bca16.27.llvm.3806639450086334051>
ffffff0000004399:	ba 01 00 00 00       	mov    $0x1,%edx
ffffff000000439e:	ff 50 18             	call   *0x18(%rax)
ffffff00000043a1:	89 c1                	mov    %eax,%ecx
ffffff00000043a3:	eb ad                	jmp    ffffff0000004352 <core::fmt::Formatter::debug_tuple_field1_finish+0xf2>
ffffff00000043a5:	cc                   	int3   
ffffff00000043a6:	cc                   	int3   
ffffff00000043a7:	cc                   	int3   
ffffff00000043a8:	cc                   	int3   
ffffff00000043a9:	cc                   	int3   
ffffff00000043aa:	cc                   	int3   
ffffff00000043ab:	cc                   	int3   
ffffff00000043ac:	cc                   	int3   
ffffff00000043ad:	cc                   	int3   
ffffff00000043ae:	cc                   	int3   
ffffff00000043af:	cc                   	int3   

ffffff00000043b0 <<bool as core::fmt::Display>::fmt>:
<bool as core::fmt::Display>::fmt:
ffffff00000043b0:	48 89 f0             	mov    %rsi,%rax
ffffff00000043b3:	80 3f 00             	cmpb   $0x0,(%rdi)
ffffff00000043b6:	74 14                	je     ffffff00000043cc <<bool as core::fmt::Display>::fmt+0x1c>
ffffff00000043b8:	48 8d 35 67 bd ff ff 	lea    -0x4299(%rip),%rsi        # ffffff0000000126 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044>
ffffff00000043bf:	ba 04 00 00 00       	mov    $0x4,%edx
ffffff00000043c4:	48 89 c7             	mov    %rax,%rdi
ffffff00000043c7:	e9 d4 f9 ff ff       	jmp    ffffff0000003da0 <core::fmt::Formatter::pad>
ffffff00000043cc:	48 8d 35 5f c7 ff ff 	lea    -0x38a1(%rip),%rsi        # ffffff0000000b32 <anon.a3833c486386bd6a8cad30d19d8ae92e.11.llvm.11412667768712930044>
ffffff00000043d3:	ba 05 00 00 00       	mov    $0x5,%edx
ffffff00000043d8:	48 89 c7             	mov    %rax,%rdi
ffffff00000043db:	e9 c0 f9 ff ff       	jmp    ffffff0000003da0 <core::fmt::Formatter::pad>

ffffff00000043e0 <<str as core::fmt::Debug>::fmt>:
<str as core::fmt::Debug>::fmt:
ffffff00000043e0:	55                   	push   %rbp
ffffff00000043e1:	41 57                	push   %r15
ffffff00000043e3:	41 56                	push   %r14
ffffff00000043e5:	41 55                	push   %r13
ffffff00000043e7:	41 54                	push   %r12
ffffff00000043e9:	53                   	push   %rbx
ffffff00000043ea:	48 83 ec 58          	sub    $0x58,%rsp
ffffff00000043ee:	49 89 f7             	mov    %rsi,%r15
ffffff00000043f1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffff00000043f6:	48 8b 1a             	mov    (%rdx),%rbx
ffffff00000043f9:	4c 8b 62 08          	mov    0x8(%rdx),%r12
ffffff00000043fd:	4d 8b 74 24 20       	mov    0x20(%r12),%r14
ffffff0000004402:	48 89 df             	mov    %rbx,%rdi
ffffff0000004405:	be 22 00 00 00       	mov    $0x22,%esi
ffffff000000440a:	41 ff d6             	call   *%r14
ffffff000000440d:	40 b5 01             	mov    $0x1,%bpl
ffffff0000004410:	84 c0                	test   %al,%al
ffffff0000004412:	0f 85 0d 03 00 00    	jne    ffffff0000004725 <<str as core::fmt::Debug>::fmt+0x345>
ffffff0000004418:	4c 89 64 24 40       	mov    %r12,0x40(%rsp)
ffffff000000441d:	4d 85 ff             	test   %r15,%r15
ffffff0000004420:	0f 84 af 02 00 00    	je     ffffff00000046d5 <<str as core::fmt::Debug>::fmt+0x2f5>
ffffff0000004426:	4c 89 74 24 38       	mov    %r14,0x38(%rsp)
ffffff000000442b:	4c 89 f8             	mov    %r15,%rax
ffffff000000442e:	48 f7 d8             	neg    %rax
ffffff0000004431:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff0000004436:	45 31 e4             	xor    %r12d,%r12d
ffffff0000004439:	31 ed                	xor    %ebp,%ebp
ffffff000000443b:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
ffffff0000004440:	4c 89 7c 24 28       	mov    %r15,0x28(%rsp)
ffffff0000004445:	4c 89 f8             	mov    %r15,%rax
ffffff0000004448:	eb 17                	jmp    ffffff0000004461 <<str as core::fmt::Debug>::fmt+0x81>
ffffff000000444a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffff0000004450:	48 01 cd             	add    %rcx,%rbp
ffffff0000004453:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
ffffff0000004458:	4c 29 f0             	sub    %r14,%rax
ffffff000000445b:	0f 84 d5 02 00 00    	je     ffffff0000004736 <<str as core::fmt::Debug>::fmt+0x356>
ffffff0000004461:	49 8d 34 06          	lea    (%r14,%rax,1),%rsi
ffffff0000004465:	45 31 ff             	xor    %r15d,%r15d
ffffff0000004468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffff000000446f:	00 
ffffff0000004470:	43 0f b6 0c 3e       	movzbl (%r14,%r15,1),%ecx
ffffff0000004475:	8d 51 81             	lea    -0x7f(%rcx),%edx
ffffff0000004478:	80 fa a1             	cmp    $0xa1,%dl
ffffff000000447b:	72 23                	jb     ffffff00000044a0 <<str as core::fmt::Debug>::fmt+0xc0>
ffffff000000447d:	83 f9 22             	cmp    $0x22,%ecx
ffffff0000004480:	74 1e                	je     ffffff00000044a0 <<str as core::fmt::Debug>::fmt+0xc0>
ffffff0000004482:	83 f9 5c             	cmp    $0x5c,%ecx
ffffff0000004485:	74 19                	je     ffffff00000044a0 <<str as core::fmt::Debug>::fmt+0xc0>
ffffff0000004487:	49 ff c7             	inc    %r15
ffffff000000448a:	4c 39 f8             	cmp    %r15,%rax
ffffff000000448d:	75 e1                	jne    ffffff0000004470 <<str as core::fmt::Debug>::fmt+0x90>
ffffff000000448f:	e9 0d 02 00 00       	jmp    ffffff00000046a1 <<str as core::fmt::Debug>::fmt+0x2c1>
ffffff0000004494:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000449b:	00 00 00 00 00 
ffffff00000044a0:	48 89 74 24 50       	mov    %rsi,0x50(%rsp)
ffffff00000044a5:	47 0f b6 2c 3e       	movzbl (%r14,%r15,1),%r13d
ffffff00000044aa:	45 84 ed             	test   %r13b,%r13b
ffffff00000044ad:	78 11                	js     ffffff00000044c0 <<str as core::fmt::Debug>::fmt+0xe0>
ffffff00000044af:	4d 01 fe             	add    %r15,%r14
ffffff00000044b2:	49 ff c6             	inc    %r14
ffffff00000044b5:	eb 79                	jmp    ffffff0000004530 <<str as core::fmt::Debug>::fmt+0x150>
ffffff00000044b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffff00000044be:	00 00 
ffffff00000044c0:	44 89 e8             	mov    %r13d,%eax
ffffff00000044c3:	83 e0 1f             	and    $0x1f,%eax
ffffff00000044c6:	43 0f b6 54 3e 01    	movzbl 0x1(%r14,%r15,1),%edx
ffffff00000044cc:	83 e2 3f             	and    $0x3f,%edx
ffffff00000044cf:	41 80 fd df          	cmp    $0xdf,%r13b
ffffff00000044d3:	76 36                	jbe    ffffff000000450b <<str as core::fmt::Debug>::fmt+0x12b>
ffffff00000044d5:	43 0f b6 4c 3e 02    	movzbl 0x2(%r14,%r15,1),%ecx
ffffff00000044db:	c1 e2 06             	shl    $0x6,%edx
ffffff00000044de:	83 e1 3f             	and    $0x3f,%ecx
ffffff00000044e1:	09 d1                	or     %edx,%ecx
ffffff00000044e3:	41 80 fd f0          	cmp    $0xf0,%r13b
ffffff00000044e7:	72 33                	jb     ffffff000000451c <<str as core::fmt::Debug>::fmt+0x13c>
ffffff00000044e9:	47 0f b6 6c 3e 03    	movzbl 0x3(%r14,%r15,1),%r13d
ffffff00000044ef:	4d 01 fe             	add    %r15,%r14
ffffff00000044f2:	49 83 c6 04          	add    $0x4,%r14
ffffff00000044f6:	83 e0 07             	and    $0x7,%eax
ffffff00000044f9:	c1 e0 12             	shl    $0x12,%eax
ffffff00000044fc:	c1 e1 06             	shl    $0x6,%ecx
ffffff00000044ff:	41 83 e5 3f          	and    $0x3f,%r13d
ffffff0000004503:	41 09 cd             	or     %ecx,%r13d
ffffff0000004506:	41 09 c5             	or     %eax,%r13d
ffffff0000004509:	eb 25                	jmp    ffffff0000004530 <<str as core::fmt::Debug>::fmt+0x150>
ffffff000000450b:	4d 01 fe             	add    %r15,%r14
ffffff000000450e:	49 83 c6 02          	add    $0x2,%r14
ffffff0000004512:	c1 e0 06             	shl    $0x6,%eax
ffffff0000004515:	09 d0                	or     %edx,%eax
ffffff0000004517:	41 89 c5             	mov    %eax,%r13d
ffffff000000451a:	eb 14                	jmp    ffffff0000004530 <<str as core::fmt::Debug>::fmt+0x150>
ffffff000000451c:	4d 01 fe             	add    %r15,%r14
ffffff000000451f:	49 83 c6 03          	add    $0x3,%r14
ffffff0000004523:	c1 e0 0c             	shl    $0xc,%eax
ffffff0000004526:	09 c1                	or     %eax,%ecx
ffffff0000004528:	41 89 cd             	mov    %ecx,%r13d
ffffff000000452b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffff0000004530:	48 89 6c 24 30       	mov    %rbp,0x30(%rsp)
ffffff0000004535:	4c 01 fd             	add    %r15,%rbp
ffffff0000004538:	48 8d 7c 24 14       	lea    0x14(%rsp),%rdi
ffffff000000453d:	44 89 ee             	mov    %r13d,%esi
ffffff0000004540:	ba 01 00 01 00       	mov    $0x10001,%edx
ffffff0000004545:	e8 16 f0 ff ff       	call   ffffff0000003560 <core::char::methods::<impl char>::escape_debug_ext>
ffffff000000454a:	31 c0                	xor    %eax,%eax
ffffff000000454c:	3a 44 24 14          	cmp    0x14(%rsp),%al
ffffff0000004550:	0f 80 12 01 00 00    	jo     ffffff0000004668 <<str as core::fmt::Debug>::fmt+0x288>
ffffff0000004556:	0f b6 44 24 1f       	movzbl 0x1f(%rsp),%eax
ffffff000000455b:	2a 44 24 1e          	sub    0x1e(%rsp),%al
ffffff000000455f:	3c 01                	cmp    $0x1,%al
ffffff0000004561:	0f 84 01 01 00 00    	je     ffffff0000004668 <<str as core::fmt::Debug>::fmt+0x288>
ffffff0000004567:	48 89 5c 24 20       	mov    %rbx,0x20(%rsp)
ffffff000000456c:	49 39 ec             	cmp    %rbp,%r12
ffffff000000456f:	0f 87 ea 01 00 00    	ja     ffffff000000475f <<str as core::fmt::Debug>::fmt+0x37f>
ffffff0000004575:	4d 85 e4             	test   %r12,%r12
ffffff0000004578:	74 1e                	je     ffffff0000004598 <<str as core::fmt::Debug>::fmt+0x1b8>
ffffff000000457a:	4c 3b 64 24 28       	cmp    0x28(%rsp),%r12
ffffff000000457f:	73 11                	jae    ffffff0000004592 <<str as core::fmt::Debug>::fmt+0x1b2>
ffffff0000004581:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff0000004586:	42 80 3c 20 bf       	cmpb   $0xbf,(%rax,%r12,1)
ffffff000000458b:	7f 0b                	jg     ffffff0000004598 <<str as core::fmt::Debug>::fmt+0x1b8>
ffffff000000458d:	e9 cd 01 00 00       	jmp    ffffff000000475f <<str as core::fmt::Debug>::fmt+0x37f>
ffffff0000004592:	0f 85 c7 01 00 00    	jne    ffffff000000475f <<str as core::fmt::Debug>::fmt+0x37f>
ffffff0000004598:	48 85 ed             	test   %rbp,%rbp
ffffff000000459b:	74 2e                	je     ffffff00000045cb <<str as core::fmt::Debug>::fmt+0x1eb>
ffffff000000459d:	48 3b 6c 24 28       	cmp    0x28(%rsp),%rbp
ffffff00000045a2:	73 19                	jae    ffffff00000045bd <<str as core::fmt::Debug>::fmt+0x1dd>
ffffff00000045a4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff00000045a9:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
ffffff00000045ae:	48 01 c8             	add    %rcx,%rax
ffffff00000045b1:	41 80 3c 07 c0       	cmpb   $0xc0,(%r15,%rax,1)
ffffff00000045b6:	7d 13                	jge    ffffff00000045cb <<str as core::fmt::Debug>::fmt+0x1eb>
ffffff00000045b8:	e9 a2 01 00 00       	jmp    ffffff000000475f <<str as core::fmt::Debug>::fmt+0x37f>
ffffff00000045bd:	48 89 e8             	mov    %rbp,%rax
ffffff00000045c0:	48 03 44 24 48       	add    0x48(%rsp),%rax
ffffff00000045c5:	0f 85 94 01 00 00    	jne    ffffff000000475f <<str as core::fmt::Debug>::fmt+0x37f>
ffffff00000045cb:	48 8b 54 24 30       	mov    0x30(%rsp),%rdx
ffffff00000045d0:	4c 29 e2             	sub    %r12,%rdx
ffffff00000045d3:	4c 01 fa             	add    %r15,%rdx
ffffff00000045d6:	4c 03 64 24 08       	add    0x8(%rsp),%r12
ffffff00000045db:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffff00000045e0:	48 8b 58 18          	mov    0x18(%rax),%rbx
ffffff00000045e4:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
ffffff00000045e9:	4c 89 e6             	mov    %r12,%rsi
ffffff00000045ec:	ff d3                	call   *%rbx
ffffff00000045ee:	84 c0                	test   %al,%al
ffffff00000045f0:	0f 85 4d 01 00 00    	jne    ffffff0000004743 <<str as core::fmt::Debug>::fmt+0x363>
ffffff00000045f6:	31 c0                	xor    %eax,%eax
ffffff00000045f8:	3a 44 24 14          	cmp    0x14(%rsp),%al
ffffff00000045fc:	71 0f                	jno    ffffff000000460d <<str as core::fmt::Debug>::fmt+0x22d>
ffffff00000045fe:	8b 74 24 18          	mov    0x18(%rsp),%esi
ffffff0000004602:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
ffffff0000004607:	ff 54 24 38          	call   *0x38(%rsp)
ffffff000000460b:	eb 1c                	jmp    ffffff0000004629 <<str as core::fmt::Debug>::fmt+0x249>
ffffff000000460d:	0f b6 44 24 1e       	movzbl 0x1e(%rsp),%eax
ffffff0000004612:	0f b6 54 24 1f       	movzbl 0x1f(%rsp),%edx
ffffff0000004617:	48 29 c2             	sub    %rax,%rdx
ffffff000000461a:	48 8d 34 04          	lea    (%rsp,%rax,1),%rsi
ffffff000000461e:	48 83 c6 14          	add    $0x14,%rsi
ffffff0000004622:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
ffffff0000004627:	ff d3                	call   *%rbx
ffffff0000004629:	84 c0                	test   %al,%al
ffffff000000462b:	0f 85 12 01 00 00    	jne    ffffff0000004743 <<str as core::fmt::Debug>::fmt+0x363>
ffffff0000004631:	41 bc 01 00 00 00    	mov    $0x1,%r12d
ffffff0000004637:	41 81 fd 80 00 00 00 	cmp    $0x80,%r13d
ffffff000000463e:	72 20                	jb     ffffff0000004660 <<str as core::fmt::Debug>::fmt+0x280>
ffffff0000004640:	41 bc 02 00 00 00    	mov    $0x2,%r12d
ffffff0000004646:	41 81 fd 00 08 00 00 	cmp    $0x800,%r13d
ffffff000000464d:	72 11                	jb     ffffff0000004660 <<str as core::fmt::Debug>::fmt+0x280>
ffffff000000464f:	41 81 fd 00 00 01 00 	cmp    $0x10000,%r13d
ffffff0000004656:	41 bc 04 00 00 00    	mov    $0x4,%r12d
ffffff000000465c:	49 83 dc 00          	sbb    $0x0,%r12
ffffff0000004660:	49 01 ec             	add    %rbp,%r12
ffffff0000004663:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
ffffff0000004668:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffff000000466d:	41 81 fd 80 00 00 00 	cmp    $0x80,%r13d
ffffff0000004674:	0f 82 d6 fd ff ff    	jb     ffffff0000004450 <<str as core::fmt::Debug>::fmt+0x70>
ffffff000000467a:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffff000000467f:	41 81 fd 00 08 00 00 	cmp    $0x800,%r13d
ffffff0000004686:	0f 82 c4 fd ff ff    	jb     ffffff0000004450 <<str as core::fmt::Debug>::fmt+0x70>
ffffff000000468c:	41 81 fd 00 00 01 00 	cmp    $0x10000,%r13d
ffffff0000004693:	b9 04 00 00 00       	mov    $0x4,%ecx
ffffff0000004698:	48 83 d9 00          	sbb    $0x0,%rcx
ffffff000000469c:	e9 af fd ff ff       	jmp    ffffff0000004450 <<str as core::fmt::Debug>::fmt+0x70>
ffffff00000046a1:	48 01 e8             	add    %rbp,%rax
ffffff00000046a4:	48 89 c1             	mov    %rax,%rcx
ffffff00000046a7:	49 39 cc             	cmp    %rcx,%r12
ffffff00000046aa:	4c 8b 74 24 38       	mov    0x38(%rsp),%r14
ffffff00000046af:	40 b5 01             	mov    $0x1,%bpl
ffffff00000046b2:	48 8b 54 24 28       	mov    0x28(%rsp),%rdx
ffffff00000046b7:	0f 87 8b 00 00 00    	ja     ffffff0000004748 <<str as core::fmt::Debug>::fmt+0x368>
ffffff00000046bd:	4d 85 e4             	test   %r12,%r12
ffffff00000046c0:	74 1c                	je     ffffff00000046de <<str as core::fmt::Debug>::fmt+0x2fe>
ffffff00000046c2:	49 39 d4             	cmp    %rdx,%r12
ffffff00000046c5:	73 15                	jae    ffffff00000046dc <<str as core::fmt::Debug>::fmt+0x2fc>
ffffff00000046c7:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff00000046cc:	42 80 3c 20 bf       	cmpb   $0xbf,(%rax,%r12,1)
ffffff00000046d1:	7f 0b                	jg     ffffff00000046de <<str as core::fmt::Debug>::fmt+0x2fe>
ffffff00000046d3:	eb 73                	jmp    ffffff0000004748 <<str as core::fmt::Debug>::fmt+0x368>
ffffff00000046d5:	31 d2                	xor    %edx,%edx
ffffff00000046d7:	45 31 e4             	xor    %r12d,%r12d
ffffff00000046da:	eb 22                	jmp    ffffff00000046fe <<str as core::fmt::Debug>::fmt+0x31e>
ffffff00000046dc:	75 6a                	jne    ffffff0000004748 <<str as core::fmt::Debug>::fmt+0x368>
ffffff00000046de:	48 85 c9             	test   %rcx,%rcx
ffffff00000046e1:	74 15                	je     ffffff00000046f8 <<str as core::fmt::Debug>::fmt+0x318>
ffffff00000046e3:	48 39 d1             	cmp    %rdx,%rcx
ffffff00000046e6:	73 14                	jae    ffffff00000046fc <<str as core::fmt::Debug>::fmt+0x31c>
ffffff00000046e8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffff00000046ed:	80 3c 08 bf          	cmpb   $0xbf,(%rax,%rcx,1)
ffffff00000046f1:	7e 55                	jle    ffffff0000004748 <<str as core::fmt::Debug>::fmt+0x368>
ffffff00000046f3:	48 89 ca             	mov    %rcx,%rdx
ffffff00000046f6:	eb 06                	jmp    ffffff00000046fe <<str as core::fmt::Debug>::fmt+0x31e>
ffffff00000046f8:	31 d2                	xor    %edx,%edx
ffffff00000046fa:	eb 02                	jmp    ffffff00000046fe <<str as core::fmt::Debug>::fmt+0x31e>
ffffff00000046fc:	75 4a                	jne    ffffff0000004748 <<str as core::fmt::Debug>::fmt+0x368>
ffffff00000046fe:	4c 29 e2             	sub    %r12,%rdx
ffffff0000004701:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
ffffff0000004706:	4c 01 e6             	add    %r12,%rsi
ffffff0000004709:	48 89 df             	mov    %rbx,%rdi
ffffff000000470c:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
ffffff0000004711:	ff 50 18             	call   *0x18(%rax)
ffffff0000004714:	84 c0                	test   %al,%al
ffffff0000004716:	75 0d                	jne    ffffff0000004725 <<str as core::fmt::Debug>::fmt+0x345>
ffffff0000004718:	48 89 df             	mov    %rbx,%rdi
ffffff000000471b:	be 22 00 00 00       	mov    $0x22,%esi
ffffff0000004720:	41 ff d6             	call   *%r14
ffffff0000004723:	89 c5                	mov    %eax,%ebp
ffffff0000004725:	89 e8                	mov    %ebp,%eax
ffffff0000004727:	48 83 c4 58          	add    $0x58,%rsp
ffffff000000472b:	5b                   	pop    %rbx
ffffff000000472c:	41 5c                	pop    %r12
ffffff000000472e:	41 5d                	pop    %r13
ffffff0000004730:	41 5e                	pop    %r14
ffffff0000004732:	41 5f                	pop    %r15
ffffff0000004734:	5d                   	pop    %rbp
ffffff0000004735:	c3                   	ret    
ffffff0000004736:	48 03 4c 24 30       	add    0x30(%rsp),%rcx
ffffff000000473b:	4c 01 f9             	add    %r15,%rcx
ffffff000000473e:	e9 64 ff ff ff       	jmp    ffffff00000046a7 <<str as core::fmt::Debug>::fmt+0x2c7>
ffffff0000004743:	40 b5 01             	mov    $0x1,%bpl
ffffff0000004746:	eb dd                	jmp    ffffff0000004725 <<str as core::fmt::Debug>::fmt+0x345>
ffffff0000004748:	4c 8d 05 39 1d 00 00 	lea    0x1d39(%rip),%r8        # ffffff0000006488 <log::LOG_LEVEL_NAMES+0x98>
ffffff000000474f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffff0000004754:	48 89 d6             	mov    %rdx,%rsi
ffffff0000004757:	4c 89 e2             	mov    %r12,%rdx
ffffff000000475a:	e8 71 06 00 00       	call   ffffff0000004dd0 <core::str::slice_error_fail>
ffffff000000475f:	4c 8d 05 0a 1d 00 00 	lea    0x1d0a(%rip),%r8        # ffffff0000006470 <log::LOG_LEVEL_NAMES+0x80>
ffffff0000004766:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffff000000476b:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
ffffff0000004770:	4c 89 e2             	mov    %r12,%rdx
ffffff0000004773:	48 89 e9             	mov    %rbp,%rcx
ffffff0000004776:	e8 55 06 00 00       	call   ffffff0000004dd0 <core::str::slice_error_fail>
ffffff000000477b:	cc                   	int3   
ffffff000000477c:	cc                   	int3   
ffffff000000477d:	cc                   	int3   
ffffff000000477e:	cc                   	int3   
ffffff000000477f:	cc                   	int3   

ffffff0000004780 <<str as core::fmt::Display>::fmt>:
<str as core::fmt::Display>::fmt:
ffffff0000004780:	48 89 d0             	mov    %rdx,%rax
ffffff0000004783:	48 89 f2             	mov    %rsi,%rdx
ffffff0000004786:	48 89 fe             	mov    %rdi,%rsi
ffffff0000004789:	48 89 c7             	mov    %rax,%rdi
ffffff000000478c:	e9 0f f6 ff ff       	jmp    ffffff0000003da0 <core::fmt::Formatter::pad>
ffffff0000004791:	cc                   	int3   
ffffff0000004792:	cc                   	int3   
ffffff0000004793:	cc                   	int3   
ffffff0000004794:	cc                   	int3   
ffffff0000004795:	cc                   	int3   
ffffff0000004796:	cc                   	int3   
ffffff0000004797:	cc                   	int3   
ffffff0000004798:	cc                   	int3   
ffffff0000004799:	cc                   	int3   
ffffff000000479a:	cc                   	int3   
ffffff000000479b:	cc                   	int3   
ffffff000000479c:	cc                   	int3   
ffffff000000479d:	cc                   	int3   
ffffff000000479e:	cc                   	int3   
ffffff000000479f:	cc                   	int3   

ffffff00000047a0 <<char as core::fmt::Debug>::fmt>:
<char as core::fmt::Debug>::fmt:
ffffff00000047a0:	41 57                	push   %r15
ffffff00000047a2:	41 56                	push   %r14
ffffff00000047a4:	41 54                	push   %r12
ffffff00000047a6:	53                   	push   %rbx
ffffff00000047a7:	48 83 ec 18          	sub    $0x18,%rsp
ffffff00000047ab:	49 89 fe             	mov    %rdi,%r14
ffffff00000047ae:	48 8b 1e             	mov    (%rsi),%rbx
ffffff00000047b1:	4c 8b 66 08          	mov    0x8(%rsi),%r12
ffffff00000047b5:	4d 8b 7c 24 20       	mov    0x20(%r12),%r15
ffffff00000047ba:	48 89 df             	mov    %rbx,%rdi
ffffff00000047bd:	be 27 00 00 00       	mov    $0x27,%esi
ffffff00000047c2:	41 ff d7             	call   *%r15
ffffff00000047c5:	89 c1                	mov    %eax,%ecx
ffffff00000047c7:	b0 01                	mov    $0x1,%al
ffffff00000047c9:	84 c9                	test   %cl,%cl
ffffff00000047cb:	75 5e                	jne    ffffff000000482b <<char as core::fmt::Debug>::fmt+0x8b>
ffffff00000047cd:	41 8b 36             	mov    (%r14),%esi
ffffff00000047d0:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
ffffff00000047d5:	ba 01 01 00 00       	mov    $0x101,%edx
ffffff00000047da:	e8 81 ed ff ff       	call   ffffff0000003560 <core::char::methods::<impl char>::escape_debug_ext>
ffffff00000047df:	31 c0                	xor    %eax,%eax
ffffff00000047e1:	3a 44 24 0c          	cmp    0xc(%rsp),%al
ffffff00000047e5:	71 14                	jno    ffffff00000047fb <<char as core::fmt::Debug>::fmt+0x5b>
ffffff00000047e7:	8b 74 24 10          	mov    0x10(%rsp),%esi
ffffff00000047eb:	48 89 df             	mov    %rbx,%rdi
ffffff00000047ee:	41 ff d7             	call   *%r15
ffffff00000047f1:	89 c1                	mov    %eax,%ecx
ffffff00000047f3:	b0 01                	mov    $0x1,%al
ffffff00000047f5:	84 c9                	test   %cl,%cl
ffffff00000047f7:	74 27                	je     ffffff0000004820 <<char as core::fmt::Debug>::fmt+0x80>
ffffff00000047f9:	eb 30                	jmp    ffffff000000482b <<char as core::fmt::Debug>::fmt+0x8b>
ffffff00000047fb:	0f b6 44 24 16       	movzbl 0x16(%rsp),%eax
ffffff0000004800:	0f b6 54 24 17       	movzbl 0x17(%rsp),%edx
ffffff0000004805:	48 29 c2             	sub    %rax,%rdx
ffffff0000004808:	48 8d 34 04          	lea    (%rsp,%rax,1),%rsi
ffffff000000480c:	48 83 c6 0c          	add    $0xc,%rsi
ffffff0000004810:	48 89 df             	mov    %rbx,%rdi
ffffff0000004813:	41 ff 54 24 18       	call   *0x18(%r12)
ffffff0000004818:	89 c1                	mov    %eax,%ecx
ffffff000000481a:	b0 01                	mov    $0x1,%al
ffffff000000481c:	84 c9                	test   %cl,%cl
ffffff000000481e:	75 0b                	jne    ffffff000000482b <<char as core::fmt::Debug>::fmt+0x8b>
ffffff0000004820:	48 89 df             	mov    %rbx,%rdi
ffffff0000004823:	be 27 00 00 00       	mov    $0x27,%esi
ffffff0000004828:	41 ff d7             	call   *%r15
ffffff000000482b:	48 83 c4 18          	add    $0x18,%rsp
ffffff000000482f:	5b                   	pop    %rbx
ffffff0000004830:	41 5c                	pop    %r12
ffffff0000004832:	41 5e                	pop    %r14
ffffff0000004834:	41 5f                	pop    %r15
ffffff0000004836:	c3                   	ret    
ffffff0000004837:	cc                   	int3   
ffffff0000004838:	cc                   	int3   
ffffff0000004839:	cc                   	int3   
ffffff000000483a:	cc                   	int3   
ffffff000000483b:	cc                   	int3   
ffffff000000483c:	cc                   	int3   
ffffff000000483d:	cc                   	int3   
ffffff000000483e:	cc                   	int3   
ffffff000000483f:	cc                   	int3   

ffffff0000004840 <<&T as core::fmt::Debug>::fmt>:
<&T as core::fmt::Debug>::fmt:
ffffff0000004840:	48 8b 07             	mov    (%rdi),%rax
ffffff0000004843:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
ffffff0000004847:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffff000000484b:	48 89 c7             	mov    %rax,%rdi
ffffff000000484e:	ff e1                	jmp    *%rcx

ffffff0000004850 <<&T as core::fmt::Display>::fmt>:
<&T as core::fmt::Display>::fmt:
ffffff0000004850:	48 89 f0             	mov    %rsi,%rax
ffffff0000004853:	48 8b 37             	mov    (%rdi),%rsi
ffffff0000004856:	48 8b 57 08          	mov    0x8(%rdi),%rdx
ffffff000000485a:	48 89 c7             	mov    %rax,%rdi
ffffff000000485d:	e9 3e f5 ff ff       	jmp    ffffff0000003da0 <core::fmt::Formatter::pad>
ffffff0000004862:	cc                   	int3   
ffffff0000004863:	cc                   	int3   
ffffff0000004864:	cc                   	int3   
ffffff0000004865:	cc                   	int3   
ffffff0000004866:	cc                   	int3   
ffffff0000004867:	cc                   	int3   
ffffff0000004868:	cc                   	int3   
ffffff0000004869:	cc                   	int3   
ffffff000000486a:	cc                   	int3   
ffffff000000486b:	cc                   	int3   
ffffff000000486c:	cc                   	int3   
ffffff000000486d:	cc                   	int3   
ffffff000000486e:	cc                   	int3   
ffffff000000486f:	cc                   	int3   

ffffff0000004870 <core::str::count::do_count_chars>:
core::str::count::do_count_chars:
ffffff0000004870:	4c 8d 4f 07          	lea    0x7(%rdi),%r9
ffffff0000004874:	49 83 e1 f8          	and    $0xfffffffffffffff8,%r9
ffffff0000004878:	4c 89 c8             	mov    %r9,%rax
ffffff000000487b:	48 29 f8             	sub    %rdi,%rax
ffffff000000487e:	48 89 f1             	mov    %rsi,%rcx
ffffff0000004881:	48 29 c1             	sub    %rax,%rcx
ffffff0000004884:	73 19                	jae    ffffff000000489f <core::str::count::do_count_chars+0x2f>
ffffff0000004886:	48 85 f6             	test   %rsi,%rsi
ffffff0000004889:	74 53                	je     ffffff00000048de <core::str::count::do_count_chars+0x6e>
ffffff000000488b:	89 f1                	mov    %esi,%ecx
ffffff000000488d:	83 e1 03             	and    $0x3,%ecx
ffffff0000004890:	48 83 fe 04          	cmp    $0x4,%rsi
ffffff0000004894:	73 4b                	jae    ffffff00000048e1 <core::str::count::do_count_chars+0x71>
ffffff0000004896:	31 c0                	xor    %eax,%eax
ffffff0000004898:	31 d2                	xor    %edx,%edx
ffffff000000489a:	e9 91 00 00 00       	jmp    ffffff0000004930 <core::str::count::do_count_chars+0xc0>
ffffff000000489f:	48 83 f9 08          	cmp    $0x8,%rcx
ffffff00000048a3:	72 e1                	jb     ffffff0000004886 <core::str::count::do_count_chars+0x16>
ffffff00000048a5:	41 57                	push   %r15
ffffff00000048a7:	41 56                	push   %r14
ffffff00000048a9:	41 54                	push   %r12
ffffff00000048ab:	53                   	push   %rbx
ffffff00000048ac:	89 ca                	mov    %ecx,%edx
ffffff00000048ae:	83 e2 07             	and    $0x7,%edx
ffffff00000048b1:	49 39 f9             	cmp    %rdi,%r9
ffffff00000048b4:	75 07                	jne    ffffff00000048bd <core::str::count::do_count_chars+0x4d>
ffffff00000048b6:	31 f6                	xor    %esi,%esi
ffffff00000048b8:	e9 1a 01 00 00       	jmp    ffffff00000049d7 <core::str::count::do_count_chars+0x167>
ffffff00000048bd:	41 89 c0             	mov    %eax,%r8d
ffffff00000048c0:	41 83 e0 03          	and    $0x3,%r8d
ffffff00000048c4:	48 89 fe             	mov    %rdi,%rsi
ffffff00000048c7:	4c 29 ce             	sub    %r9,%rsi
ffffff00000048ca:	48 83 fe fc          	cmp    $0xfffffffffffffffc,%rsi
ffffff00000048ce:	0f 86 82 00 00 00    	jbe    ffffff0000004956 <core::str::count::do_count_chars+0xe6>
ffffff00000048d4:	31 f6                	xor    %esi,%esi
ffffff00000048d6:	45 31 c9             	xor    %r9d,%r9d
ffffff00000048d9:	e9 d6 00 00 00       	jmp    ffffff00000049b4 <core::str::count::do_count_chars+0x144>
ffffff00000048de:	31 c0                	xor    %eax,%eax
ffffff00000048e0:	c3                   	ret    
ffffff00000048e1:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
ffffff00000048e5:	31 c0                	xor    %eax,%eax
ffffff00000048e7:	31 d2                	xor    %edx,%edx
ffffff00000048e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffff00000048f0:	45 31 c0             	xor    %r8d,%r8d
ffffff00000048f3:	80 3c 17 c0          	cmpb   $0xc0,(%rdi,%rdx,1)
ffffff00000048f7:	41 0f 9d c0          	setge  %r8b
ffffff00000048fb:	49 01 c0             	add    %rax,%r8
ffffff00000048fe:	31 c0                	xor    %eax,%eax
ffffff0000004900:	80 7c 17 01 c0       	cmpb   $0xc0,0x1(%rdi,%rdx,1)
ffffff0000004905:	0f 9d c0             	setge  %al
ffffff0000004908:	45 31 c9             	xor    %r9d,%r9d
ffffff000000490b:	80 7c 17 02 c0       	cmpb   $0xc0,0x2(%rdi,%rdx,1)
ffffff0000004910:	41 0f 9d c1          	setge  %r9b
ffffff0000004914:	49 01 c1             	add    %rax,%r9
ffffff0000004917:	4d 01 c1             	add    %r8,%r9
ffffff000000491a:	31 c0                	xor    %eax,%eax
ffffff000000491c:	80 7c 17 03 c0       	cmpb   $0xc0,0x3(%rdi,%rdx,1)
ffffff0000004921:	0f 9d c0             	setge  %al
ffffff0000004924:	4c 01 c8             	add    %r9,%rax
ffffff0000004927:	48 83 c2 04          	add    $0x4,%rdx
ffffff000000492b:	48 39 d6             	cmp    %rdx,%rsi
ffffff000000492e:	75 c0                	jne    ffffff00000048f0 <core::str::count::do_count_chars+0x80>
ffffff0000004930:	48 85 c9             	test   %rcx,%rcx
ffffff0000004933:	74 20                	je     ffffff0000004955 <core::str::count::do_count_chars+0xe5>
ffffff0000004935:	48 01 d7             	add    %rdx,%rdi
ffffff0000004938:	31 d2                	xor    %edx,%edx
ffffff000000493a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffff0000004940:	31 f6                	xor    %esi,%esi
ffffff0000004942:	80 3c 17 c0          	cmpb   $0xc0,(%rdi,%rdx,1)
ffffff0000004946:	40 0f 9d c6          	setge  %sil
ffffff000000494a:	48 01 f0             	add    %rsi,%rax
ffffff000000494d:	48 ff c2             	inc    %rdx
ffffff0000004950:	48 39 d1             	cmp    %rdx,%rcx
ffffff0000004953:	75 eb                	jne    ffffff0000004940 <core::str::count::do_count_chars+0xd0>
ffffff0000004955:	c3                   	ret    
ffffff0000004956:	41 89 c2             	mov    %eax,%r10d
ffffff0000004959:	41 83 e2 04          	and    $0x4,%r10d
ffffff000000495d:	31 f6                	xor    %esi,%esi
ffffff000000495f:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004962:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000004969:	1f 84 00 00 00 00 00 
ffffff0000004970:	45 31 db             	xor    %r11d,%r11d
ffffff0000004973:	42 80 3c 0f c0       	cmpb   $0xc0,(%rdi,%r9,1)
ffffff0000004978:	41 0f 9d c3          	setge  %r11b
ffffff000000497c:	49 01 f3             	add    %rsi,%r11
ffffff000000497f:	31 f6                	xor    %esi,%esi
ffffff0000004981:	42 80 7c 0f 01 c0    	cmpb   $0xc0,0x1(%rdi,%r9,1)
ffffff0000004987:	40 0f 9d c6          	setge  %sil
ffffff000000498b:	31 db                	xor    %ebx,%ebx
ffffff000000498d:	42 80 7c 0f 02 c0    	cmpb   $0xc0,0x2(%rdi,%r9,1)
ffffff0000004993:	0f 9d c3             	setge  %bl
ffffff0000004996:	48 01 f3             	add    %rsi,%rbx
ffffff0000004999:	4c 01 db             	add    %r11,%rbx
ffffff000000499c:	31 f6                	xor    %esi,%esi
ffffff000000499e:	42 80 7c 0f 03 c0    	cmpb   $0xc0,0x3(%rdi,%r9,1)
ffffff00000049a4:	40 0f 9d c6          	setge  %sil
ffffff00000049a8:	48 01 de             	add    %rbx,%rsi
ffffff00000049ab:	49 83 c1 04          	add    $0x4,%r9
ffffff00000049af:	4d 39 ca             	cmp    %r9,%r10
ffffff00000049b2:	75 bc                	jne    ffffff0000004970 <core::str::count::do_count_chars+0x100>
ffffff00000049b4:	4d 85 c0             	test   %r8,%r8
ffffff00000049b7:	74 1e                	je     ffffff00000049d7 <core::str::count::do_count_chars+0x167>
ffffff00000049b9:	49 01 f9             	add    %rdi,%r9
ffffff00000049bc:	45 31 d2             	xor    %r10d,%r10d
ffffff00000049bf:	90                   	nop
ffffff00000049c0:	45 31 db             	xor    %r11d,%r11d
ffffff00000049c3:	43 80 3c 11 c0       	cmpb   $0xc0,(%r9,%r10,1)
ffffff00000049c8:	41 0f 9d c3          	setge  %r11b
ffffff00000049cc:	4c 01 de             	add    %r11,%rsi
ffffff00000049cf:	49 ff c2             	inc    %r10
ffffff00000049d2:	4d 39 d0             	cmp    %r10,%r8
ffffff00000049d5:	75 e9                	jne    ffffff00000049c0 <core::str::count::do_count_chars+0x150>
ffffff00000049d7:	48 01 c7             	add    %rax,%rdi
ffffff00000049da:	48 85 d2             	test   %rdx,%rdx
ffffff00000049dd:	0f 84 8f 00 00 00    	je     ffffff0000004a72 <core::str::count::do_count_chars+0x202>
ffffff00000049e3:	49 89 c8             	mov    %rcx,%r8
ffffff00000049e6:	49 83 e0 f8          	and    $0xfffffffffffffff8,%r8
ffffff00000049ea:	31 c0                	xor    %eax,%eax
ffffff00000049ec:	42 80 3c 07 c0       	cmpb   $0xc0,(%rdi,%r8,1)
ffffff00000049f1:	0f 9d c0             	setge  %al
ffffff00000049f4:	83 fa 01             	cmp    $0x1,%edx
ffffff00000049f7:	74 7b                	je     ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff00000049f9:	45 31 c9             	xor    %r9d,%r9d
ffffff00000049fc:	42 80 7c 07 01 c0    	cmpb   $0xc0,0x1(%rdi,%r8,1)
ffffff0000004a02:	41 0f 9d c1          	setge  %r9b
ffffff0000004a06:	4c 01 c8             	add    %r9,%rax
ffffff0000004a09:	83 fa 02             	cmp    $0x2,%edx
ffffff0000004a0c:	74 66                	je     ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff0000004a0e:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004a11:	42 80 7c 07 02 c0    	cmpb   $0xc0,0x2(%rdi,%r8,1)
ffffff0000004a17:	41 0f 9d c1          	setge  %r9b
ffffff0000004a1b:	4c 01 c8             	add    %r9,%rax
ffffff0000004a1e:	83 fa 03             	cmp    $0x3,%edx
ffffff0000004a21:	74 51                	je     ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff0000004a23:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004a26:	42 80 7c 07 03 c0    	cmpb   $0xc0,0x3(%rdi,%r8,1)
ffffff0000004a2c:	41 0f 9d c1          	setge  %r9b
ffffff0000004a30:	4c 01 c8             	add    %r9,%rax
ffffff0000004a33:	83 fa 04             	cmp    $0x4,%edx
ffffff0000004a36:	74 3c                	je     ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff0000004a38:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004a3b:	42 80 7c 07 04 c0    	cmpb   $0xc0,0x4(%rdi,%r8,1)
ffffff0000004a41:	41 0f 9d c1          	setge  %r9b
ffffff0000004a45:	4c 01 c8             	add    %r9,%rax
ffffff0000004a48:	83 fa 05             	cmp    $0x5,%edx
ffffff0000004a4b:	74 27                	je     ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff0000004a4d:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004a50:	42 80 7c 07 05 c0    	cmpb   $0xc0,0x5(%rdi,%r8,1)
ffffff0000004a56:	41 0f 9d c1          	setge  %r9b
ffffff0000004a5a:	4c 01 c8             	add    %r9,%rax
ffffff0000004a5d:	83 fa 06             	cmp    $0x6,%edx
ffffff0000004a60:	74 12                	je     ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff0000004a62:	31 d2                	xor    %edx,%edx
ffffff0000004a64:	42 80 7c 07 06 c0    	cmpb   $0xc0,0x6(%rdi,%r8,1)
ffffff0000004a6a:	0f 9d c2             	setge  %dl
ffffff0000004a6d:	48 01 d0             	add    %rdx,%rax
ffffff0000004a70:	eb 02                	jmp    ffffff0000004a74 <core::str::count::do_count_chars+0x204>
ffffff0000004a72:	31 c0                	xor    %eax,%eax
ffffff0000004a74:	48 01 f0             	add    %rsi,%rax
ffffff0000004a77:	48 c1 e9 03          	shr    $0x3,%rcx
ffffff0000004a7b:	49 b8 01 01 01 01 01 	movabs $0x101010101010101,%r8
ffffff0000004a82:	01 01 01 
ffffff0000004a85:	48 be ff 00 ff 00 ff 	movabs $0xff00ff00ff00ff,%rsi
ffffff0000004a8c:	00 ff 00 
ffffff0000004a8f:	48 ba 01 00 01 00 01 	movabs $0x1000100010001,%rdx
ffffff0000004a96:	00 01 00 
ffffff0000004a99:	eb 3c                	jmp    ffffff0000004ad7 <core::str::count::do_count_chars+0x267>
ffffff0000004a9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffff0000004aa0:	31 db                	xor    %ebx,%ebx
ffffff0000004aa2:	44 89 d7             	mov    %r10d,%edi
ffffff0000004aa5:	49 8d 3c f9          	lea    (%r9,%rdi,8),%rdi
ffffff0000004aa9:	4c 29 d1             	sub    %r10,%rcx
ffffff0000004aac:	45 89 d3             	mov    %r10d,%r11d
ffffff0000004aaf:	41 83 e3 03          	and    $0x3,%r11d
ffffff0000004ab3:	49 89 de             	mov    %rbx,%r14
ffffff0000004ab6:	49 21 f6             	and    %rsi,%r14
ffffff0000004ab9:	48 c1 eb 08          	shr    $0x8,%rbx
ffffff0000004abd:	48 21 f3             	and    %rsi,%rbx
ffffff0000004ac0:	4c 01 f3             	add    %r14,%rbx
ffffff0000004ac3:	48 0f af da          	imul   %rdx,%rbx
ffffff0000004ac7:	48 c1 eb 30          	shr    $0x30,%rbx
ffffff0000004acb:	48 01 d8             	add    %rbx,%rax
ffffff0000004ace:	4d 85 db             	test   %r11,%r11
ffffff0000004ad1:	0f 85 b6 00 00 00    	jne    ffffff0000004b8d <core::str::count::do_count_chars+0x31d>
ffffff0000004ad7:	48 85 c9             	test   %rcx,%rcx
ffffff0000004ada:	0f 84 2e 01 00 00    	je     ffffff0000004c0e <core::str::count::do_count_chars+0x39e>
ffffff0000004ae0:	49 89 f9             	mov    %rdi,%r9
ffffff0000004ae3:	48 81 f9 c0 00 00 00 	cmp    $0xc0,%rcx
ffffff0000004aea:	41 ba c0 00 00 00    	mov    $0xc0,%r10d
ffffff0000004af0:	4c 0f 42 d1          	cmovb  %rcx,%r10
ffffff0000004af4:	48 83 f9 04          	cmp    $0x4,%rcx
ffffff0000004af8:	72 a6                	jb     ffffff0000004aa0 <core::str::count::do_count_chars+0x230>
ffffff0000004afa:	44 89 d7             	mov    %r10d,%edi
ffffff0000004afd:	c1 ef 02             	shr    $0x2,%edi
ffffff0000004b00:	48 c1 e7 05          	shl    $0x5,%rdi
ffffff0000004b04:	45 31 db             	xor    %r11d,%r11d
ffffff0000004b07:	31 db                	xor    %ebx,%ebx
ffffff0000004b09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffff0000004b10:	4f 8b 34 19          	mov    (%r9,%r11,1),%r14
ffffff0000004b14:	4f 8b 7c 19 08       	mov    0x8(%r9,%r11,1),%r15
ffffff0000004b19:	4d 89 f4             	mov    %r14,%r12
ffffff0000004b1c:	49 f7 d4             	not    %r12
ffffff0000004b1f:	49 c1 ec 07          	shr    $0x7,%r12
ffffff0000004b23:	49 c1 ee 06          	shr    $0x6,%r14
ffffff0000004b27:	4d 09 e6             	or     %r12,%r14
ffffff0000004b2a:	4d 21 c6             	and    %r8,%r14
ffffff0000004b2d:	49 01 de             	add    %rbx,%r14
ffffff0000004b30:	4c 89 fb             	mov    %r15,%rbx
ffffff0000004b33:	48 f7 d3             	not    %rbx
ffffff0000004b36:	48 c1 eb 07          	shr    $0x7,%rbx
ffffff0000004b3a:	49 c1 ef 06          	shr    $0x6,%r15
ffffff0000004b3e:	49 09 df             	or     %rbx,%r15
ffffff0000004b41:	4d 21 c7             	and    %r8,%r15
ffffff0000004b44:	4f 8b 64 19 10       	mov    0x10(%r9,%r11,1),%r12
ffffff0000004b49:	4c 89 e3             	mov    %r12,%rbx
ffffff0000004b4c:	48 f7 d3             	not    %rbx
ffffff0000004b4f:	48 c1 eb 07          	shr    $0x7,%rbx
ffffff0000004b53:	49 c1 ec 06          	shr    $0x6,%r12
ffffff0000004b57:	49 09 dc             	or     %rbx,%r12
ffffff0000004b5a:	4d 21 c4             	and    %r8,%r12
ffffff0000004b5d:	4d 01 fc             	add    %r15,%r12
ffffff0000004b60:	4d 01 f4             	add    %r14,%r12
ffffff0000004b63:	4b 8b 5c 19 18       	mov    0x18(%r9,%r11,1),%rbx
ffffff0000004b68:	49 89 de             	mov    %rbx,%r14
ffffff0000004b6b:	49 f7 d6             	not    %r14
ffffff0000004b6e:	49 c1 ee 07          	shr    $0x7,%r14
ffffff0000004b72:	48 c1 eb 06          	shr    $0x6,%rbx
ffffff0000004b76:	4c 09 f3             	or     %r14,%rbx
ffffff0000004b79:	4c 21 c3             	and    %r8,%rbx
ffffff0000004b7c:	4c 01 e3             	add    %r12,%rbx
ffffff0000004b7f:	49 83 c3 20          	add    $0x20,%r11
ffffff0000004b83:	4c 39 df             	cmp    %r11,%rdi
ffffff0000004b86:	75 88                	jne    ffffff0000004b10 <core::str::count::do_count_chars+0x2a0>
ffffff0000004b88:	e9 15 ff ff ff       	jmp    ffffff0000004aa2 <core::str::count::do_count_chars+0x232>
ffffff0000004b8d:	41 81 e2 fc 00 00 00 	and    $0xfc,%r10d
ffffff0000004b94:	44 89 d1             	mov    %r10d,%ecx
ffffff0000004b97:	49 8b 0c c9          	mov    (%r9,%rcx,8),%rcx
ffffff0000004b9b:	48 89 cf             	mov    %rcx,%rdi
ffffff0000004b9e:	48 f7 d7             	not    %rdi
ffffff0000004ba1:	48 c1 ef 07          	shr    $0x7,%rdi
ffffff0000004ba5:	48 c1 e9 06          	shr    $0x6,%rcx
ffffff0000004ba9:	48 09 f9             	or     %rdi,%rcx
ffffff0000004bac:	4c 21 c1             	and    %r8,%rcx
ffffff0000004baf:	41 83 fb 01          	cmp    $0x1,%r11d
ffffff0000004bb3:	74 3e                	je     ffffff0000004bf3 <core::str::count::do_count_chars+0x383>
ffffff0000004bb5:	4b 8b 7c d1 08       	mov    0x8(%r9,%r10,8),%rdi
ffffff0000004bba:	48 89 fb             	mov    %rdi,%rbx
ffffff0000004bbd:	48 f7 d3             	not    %rbx
ffffff0000004bc0:	48 c1 eb 07          	shr    $0x7,%rbx
ffffff0000004bc4:	48 c1 ef 06          	shr    $0x6,%rdi
ffffff0000004bc8:	48 09 df             	or     %rbx,%rdi
ffffff0000004bcb:	4c 21 c7             	and    %r8,%rdi
ffffff0000004bce:	48 01 f9             	add    %rdi,%rcx
ffffff0000004bd1:	41 83 fb 02          	cmp    $0x2,%r11d
ffffff0000004bd5:	74 1c                	je     ffffff0000004bf3 <core::str::count::do_count_chars+0x383>
ffffff0000004bd7:	4b 8b 7c d1 10       	mov    0x10(%r9,%r10,8),%rdi
ffffff0000004bdc:	49 89 f9             	mov    %rdi,%r9
ffffff0000004bdf:	49 f7 d1             	not    %r9
ffffff0000004be2:	49 c1 e9 07          	shr    $0x7,%r9
ffffff0000004be6:	48 c1 ef 06          	shr    $0x6,%rdi
ffffff0000004bea:	4c 09 cf             	or     %r9,%rdi
ffffff0000004bed:	4c 21 c7             	and    %r8,%rdi
ffffff0000004bf0:	48 01 f9             	add    %rdi,%rcx
ffffff0000004bf3:	48 89 cf             	mov    %rcx,%rdi
ffffff0000004bf6:	48 21 f7             	and    %rsi,%rdi
ffffff0000004bf9:	48 c1 e9 08          	shr    $0x8,%rcx
ffffff0000004bfd:	48 21 f1             	and    %rsi,%rcx
ffffff0000004c00:	48 01 f9             	add    %rdi,%rcx
ffffff0000004c03:	48 0f af ca          	imul   %rdx,%rcx
ffffff0000004c07:	48 c1 e9 30          	shr    $0x30,%rcx
ffffff0000004c0b:	48 01 c8             	add    %rcx,%rax
ffffff0000004c0e:	5b                   	pop    %rbx
ffffff0000004c0f:	41 5c                	pop    %r12
ffffff0000004c11:	41 5e                	pop    %r14
ffffff0000004c13:	41 5f                	pop    %r15
ffffff0000004c15:	c3                   	ret    
ffffff0000004c16:	cc                   	int3   
ffffff0000004c17:	cc                   	int3   
ffffff0000004c18:	cc                   	int3   
ffffff0000004c19:	cc                   	int3   
ffffff0000004c1a:	cc                   	int3   
ffffff0000004c1b:	cc                   	int3   
ffffff0000004c1c:	cc                   	int3   
ffffff0000004c1d:	cc                   	int3   
ffffff0000004c1e:	cc                   	int3   
ffffff0000004c1f:	cc                   	int3   

ffffff0000004c20 <core::option::unwrap_failed>:
core::option::unwrap_failed:
ffffff0000004c20:	50                   	push   %rax
ffffff0000004c21:	48 89 fa             	mov    %rdi,%rdx
ffffff0000004c24:	48 8d 3d 4d bf ff ff 	lea    -0x40b3(%rip),%rdi        # ffffff0000000b78 <anon.1ef54cdc354b9592f614fb3b2114e93c.12.llvm.15289313529707102921+0x10>
ffffff0000004c2b:	be 2b 00 00 00       	mov    $0x2b,%esi
ffffff0000004c30:	e8 db e8 ff ff       	call   ffffff0000003510 <core::panicking::panic>
ffffff0000004c35:	cc                   	int3   
ffffff0000004c36:	cc                   	int3   
ffffff0000004c37:	cc                   	int3   
ffffff0000004c38:	cc                   	int3   
ffffff0000004c39:	cc                   	int3   
ffffff0000004c3a:	cc                   	int3   
ffffff0000004c3b:	cc                   	int3   
ffffff0000004c3c:	cc                   	int3   
ffffff0000004c3d:	cc                   	int3   
ffffff0000004c3e:	cc                   	int3   
ffffff0000004c3f:	cc                   	int3   

ffffff0000004c40 <core::option::expect_failed>:
core::option::expect_failed:
ffffff0000004c40:	48 83 ec 58          	sub    $0x58,%rsp
ffffff0000004c44:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffff0000004c49:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff0000004c4e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
ffffff0000004c53:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000004c58:	48 8d 05 f1 fb ff ff 	lea    -0x40f(%rip),%rax        # ffffff0000004850 <<&T as core::fmt::Display>::fmt>
ffffff0000004c5f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff0000004c64:	48 8d 05 ed be ff ff 	lea    -0x4113(%rip),%rax        # ffffff0000000b58 <anon.a3833c486386bd6a8cad30d19d8ae92e.11.llvm.11412667768712930044+0x26>
ffffff0000004c6b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffff0000004c70:	48 c7 44 24 30 01 00 	movq   $0x1,0x30(%rsp)
ffffff0000004c77:	00 00 
ffffff0000004c79:	48 c7 44 24 48 00 00 	movq   $0x0,0x48(%rsp)
ffffff0000004c80:	00 00 
ffffff0000004c82:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
ffffff0000004c87:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
ffffff0000004c8c:	48 c7 44 24 40 01 00 	movq   $0x1,0x40(%rsp)
ffffff0000004c93:	00 00 
ffffff0000004c95:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
ffffff0000004c9a:	48 89 d6             	mov    %rdx,%rsi
ffffff0000004c9d:	e8 4e e8 ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff0000004ca2:	cc                   	int3   
ffffff0000004ca3:	cc                   	int3   
ffffff0000004ca4:	cc                   	int3   
ffffff0000004ca5:	cc                   	int3   
ffffff0000004ca6:	cc                   	int3   
ffffff0000004ca7:	cc                   	int3   
ffffff0000004ca8:	cc                   	int3   
ffffff0000004ca9:	cc                   	int3   
ffffff0000004caa:	cc                   	int3   
ffffff0000004cab:	cc                   	int3   
ffffff0000004cac:	cc                   	int3   
ffffff0000004cad:	cc                   	int3   
ffffff0000004cae:	cc                   	int3   
ffffff0000004caf:	cc                   	int3   

ffffff0000004cb0 <core::slice::index::slice_end_index_len_fail>:
core::slice::index::slice_end_index_len_fail:
ffffff0000004cb0:	50                   	push   %rax
ffffff0000004cb1:	e8 1a 00 00 00       	call   ffffff0000004cd0 <core::slice::index::slice_end_index_len_fail::do_panic::runtime>
ffffff0000004cb6:	cc                   	int3   
ffffff0000004cb7:	cc                   	int3   
ffffff0000004cb8:	cc                   	int3   
ffffff0000004cb9:	cc                   	int3   
ffffff0000004cba:	cc                   	int3   
ffffff0000004cbb:	cc                   	int3   
ffffff0000004cbc:	cc                   	int3   
ffffff0000004cbd:	cc                   	int3   
ffffff0000004cbe:	cc                   	int3   
ffffff0000004cbf:	cc                   	int3   

ffffff0000004cc0 <core::slice::index::slice_index_order_fail>:
core::slice::index::slice_index_order_fail:
ffffff0000004cc0:	50                   	push   %rax
ffffff0000004cc1:	e8 8a 00 00 00       	call   ffffff0000004d50 <core::slice::index::slice_index_order_fail::do_panic::runtime>
ffffff0000004cc6:	cc                   	int3   
ffffff0000004cc7:	cc                   	int3   
ffffff0000004cc8:	cc                   	int3   
ffffff0000004cc9:	cc                   	int3   
ffffff0000004cca:	cc                   	int3   
ffffff0000004ccb:	cc                   	int3   
ffffff0000004ccc:	cc                   	int3   
ffffff0000004ccd:	cc                   	int3   
ffffff0000004cce:	cc                   	int3   
ffffff0000004ccf:	cc                   	int3   

ffffff0000004cd0 <core::slice::index::slice_end_index_len_fail::do_panic::runtime>:
core::slice::index::slice_end_index_len_fail::do_panic::runtime:
ffffff0000004cd0:	48 83 ec 68          	sub    $0x68,%rsp
ffffff0000004cd4:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffff0000004cd9:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff0000004cde:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
ffffff0000004ce3:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000004ce8:	48 8b 05 29 23 00 00 	mov    0x2329(%rip),%rax        # ffffff0000007018 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa30>
ffffff0000004cef:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff0000004cf4:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
ffffff0000004cf9:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
ffffff0000004cfe:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
ffffff0000004d03:	48 8d 05 96 17 00 00 	lea    0x1796(%rip),%rax        # ffffff00000064a0 <log::LOG_LEVEL_NAMES+0xb0>
ffffff0000004d0a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
ffffff0000004d0f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
ffffff0000004d16:	00 00 
ffffff0000004d18:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
ffffff0000004d1f:	00 00 
ffffff0000004d21:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
ffffff0000004d26:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff0000004d2b:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
ffffff0000004d32:	00 00 
ffffff0000004d34:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
ffffff0000004d39:	48 89 d6             	mov    %rdx,%rsi
ffffff0000004d3c:	e8 af e7 ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff0000004d41:	cc                   	int3   
ffffff0000004d42:	cc                   	int3   
ffffff0000004d43:	cc                   	int3   
ffffff0000004d44:	cc                   	int3   
ffffff0000004d45:	cc                   	int3   
ffffff0000004d46:	cc                   	int3   
ffffff0000004d47:	cc                   	int3   
ffffff0000004d48:	cc                   	int3   
ffffff0000004d49:	cc                   	int3   
ffffff0000004d4a:	cc                   	int3   
ffffff0000004d4b:	cc                   	int3   
ffffff0000004d4c:	cc                   	int3   
ffffff0000004d4d:	cc                   	int3   
ffffff0000004d4e:	cc                   	int3   
ffffff0000004d4f:	cc                   	int3   

ffffff0000004d50 <core::slice::index::slice_index_order_fail::do_panic::runtime>:
core::slice::index::slice_index_order_fail::do_panic::runtime:
ffffff0000004d50:	48 83 ec 68          	sub    $0x68,%rsp
ffffff0000004d54:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffff0000004d59:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
ffffff0000004d5e:	48 8d 44 24 08       	lea    0x8(%rsp),%rax
ffffff0000004d63:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000004d68:	48 8b 05 a9 22 00 00 	mov    0x22a9(%rip),%rax        # ffffff0000007018 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa30>
ffffff0000004d6f:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff0000004d74:	48 8d 4c 24 10       	lea    0x10(%rsp),%rcx
ffffff0000004d79:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
ffffff0000004d7e:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
ffffff0000004d83:	48 8d 05 36 17 00 00 	lea    0x1736(%rip),%rax        # ffffff00000064c0 <log::LOG_LEVEL_NAMES+0xd0>
ffffff0000004d8a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
ffffff0000004d8f:	48 c7 44 24 40 02 00 	movq   $0x2,0x40(%rsp)
ffffff0000004d96:	00 00 
ffffff0000004d98:	48 c7 44 24 58 00 00 	movq   $0x0,0x58(%rsp)
ffffff0000004d9f:	00 00 
ffffff0000004da1:	48 8d 44 24 18       	lea    0x18(%rsp),%rax
ffffff0000004da6:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff0000004dab:	48 c7 44 24 50 02 00 	movq   $0x2,0x50(%rsp)
ffffff0000004db2:	00 00 
ffffff0000004db4:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
ffffff0000004db9:	48 89 d6             	mov    %rdx,%rsi
ffffff0000004dbc:	e8 2f e7 ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff0000004dc1:	cc                   	int3   
ffffff0000004dc2:	cc                   	int3   
ffffff0000004dc3:	cc                   	int3   
ffffff0000004dc4:	cc                   	int3   
ffffff0000004dc5:	cc                   	int3   
ffffff0000004dc6:	cc                   	int3   
ffffff0000004dc7:	cc                   	int3   
ffffff0000004dc8:	cc                   	int3   
ffffff0000004dc9:	cc                   	int3   
ffffff0000004dca:	cc                   	int3   
ffffff0000004dcb:	cc                   	int3   
ffffff0000004dcc:	cc                   	int3   
ffffff0000004dcd:	cc                   	int3   
ffffff0000004dce:	cc                   	int3   
ffffff0000004dcf:	cc                   	int3   

ffffff0000004dd0 <core::str::slice_error_fail>:
core::str::slice_error_fail:
ffffff0000004dd0:	50                   	push   %rax
ffffff0000004dd1:	e8 0a 00 00 00       	call   ffffff0000004de0 <core::str::slice_error_fail_rt>
ffffff0000004dd6:	cc                   	int3   
ffffff0000004dd7:	cc                   	int3   
ffffff0000004dd8:	cc                   	int3   
ffffff0000004dd9:	cc                   	int3   
ffffff0000004dda:	cc                   	int3   
ffffff0000004ddb:	cc                   	int3   
ffffff0000004ddc:	cc                   	int3   
ffffff0000004ddd:	cc                   	int3   
ffffff0000004dde:	cc                   	int3   
ffffff0000004ddf:	cc                   	int3   

ffffff0000004de0 <core::str::slice_error_fail_rt>:
core::str::slice_error_fail_rt:
ffffff0000004de0:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
ffffff0000004de7:	48 89 94 24 c0 00 00 	mov    %rdx,0xc0(%rsp)
ffffff0000004dee:	00 
ffffff0000004def:	48 89 8c 24 c8 00 00 	mov    %rcx,0xc8(%rsp)
ffffff0000004df6:	00 
ffffff0000004df7:	48 81 fe 01 01 00 00 	cmp    $0x101,%rsi
ffffff0000004dfe:	72 5c                	jb     ffffff0000004e5c <core::str::slice_error_fail_rt+0x7c>
ffffff0000004e00:	41 b9 05 00 00 00    	mov    $0x5,%r9d
ffffff0000004e06:	4c 8d 15 49 be ff ff 	lea    -0x41b7(%rip),%r10        # ffffff0000000c56 <anon.1ef54cdc354b9592f614fb3b2114e93c.12.llvm.15289313529707102921+0xee>
ffffff0000004e0d:	b8 00 01 00 00       	mov    $0x100,%eax
ffffff0000004e12:	80 bf 00 01 00 00 bf 	cmpb   $0xbf,0x100(%rdi)
ffffff0000004e19:	7f 4d                	jg     ffffff0000004e68 <core::str::slice_error_fail_rt+0x88>
ffffff0000004e1b:	b8 ff 00 00 00       	mov    $0xff,%eax
ffffff0000004e20:	80 bf ff 00 00 00 bf 	cmpb   $0xbf,0xff(%rdi)
ffffff0000004e27:	7f 3f                	jg     ffffff0000004e68 <core::str::slice_error_fail_rt+0x88>
ffffff0000004e29:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004e2c:	80 bf fe 00 00 00 c0 	cmpb   $0xc0,0xfe(%rdi)
ffffff0000004e33:	41 0f 9d c1          	setge  %r9b
ffffff0000004e37:	49 8d 81 fd 00 00 00 	lea    0xfd(%r9),%rax
ffffff0000004e3e:	42 80 bc 0f fd 00 00 	cmpb   $0xbf,0xfd(%rdi,%r9,1)
ffffff0000004e45:	00 bf 
ffffff0000004e47:	0f 8e d1 01 00 00    	jle    ffffff000000501e <core::str::slice_error_fail_rt+0x23e>
ffffff0000004e4d:	41 b9 05 00 00 00    	mov    $0x5,%r9d
ffffff0000004e53:	4c 8d 15 fc bd ff ff 	lea    -0x4204(%rip),%r10        # ffffff0000000c56 <anon.1ef54cdc354b9592f614fb3b2114e93c.12.llvm.15289313529707102921+0xee>
ffffff0000004e5a:	eb 0c                	jmp    ffffff0000004e68 <core::str::slice_error_fail_rt+0x88>
ffffff0000004e5c:	41 ba 01 00 00 00    	mov    $0x1,%r10d
ffffff0000004e62:	45 31 c9             	xor    %r9d,%r9d
ffffff0000004e65:	48 89 f0             	mov    %rsi,%rax
ffffff0000004e68:	48 89 bc 24 90 00 00 	mov    %rdi,0x90(%rsp)
ffffff0000004e6f:	00 
ffffff0000004e70:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
ffffff0000004e77:	00 
ffffff0000004e78:	4c 89 94 24 a0 00 00 	mov    %r10,0xa0(%rsp)
ffffff0000004e7f:	00 
ffffff0000004e80:	4c 89 8c 24 a8 00 00 	mov    %r9,0xa8(%rsp)
ffffff0000004e87:	00 
ffffff0000004e88:	48 39 f2             	cmp    %rsi,%rdx
ffffff0000004e8b:	0f 97 c0             	seta   %al
ffffff0000004e8e:	48 39 f1             	cmp    %rsi,%rcx
ffffff0000004e91:	41 0f 97 c1          	seta   %r9b
ffffff0000004e95:	41 08 c1             	or     %al,%r9b
ffffff0000004e98:	0f 84 91 00 00 00    	je     ffffff0000004f2f <core::str::slice_error_fail_rt+0x14f>
ffffff0000004e9e:	48 39 f2             	cmp    %rsi,%rdx
ffffff0000004ea1:	48 0f 47 ca          	cmova  %rdx,%rcx
ffffff0000004ea5:	48 89 8c 24 b0 00 00 	mov    %rcx,0xb0(%rsp)
ffffff0000004eac:	00 
ffffff0000004ead:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
ffffff0000004eb4:	00 
ffffff0000004eb5:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
ffffff0000004eba:	48 8b 05 57 21 00 00 	mov    0x2157(%rip),%rax        # ffffff0000007018 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa30>
ffffff0000004ec1:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff0000004ec6:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
ffffff0000004ecd:	00 
ffffff0000004ece:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
ffffff0000004ed3:	48 8d 05 76 f9 ff ff 	lea    -0x68a(%rip),%rax        # ffffff0000004850 <<&T as core::fmt::Display>::fmt>
ffffff0000004eda:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
ffffff0000004edf:	48 8d 8c 24 a0 00 00 	lea    0xa0(%rsp),%rcx
ffffff0000004ee6:	00 
ffffff0000004ee7:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
ffffff0000004eec:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
ffffff0000004ef1:	48 8d 05 78 16 00 00 	lea    0x1678(%rip),%rax        # ffffff0000006570 <log::LOG_LEVEL_NAMES+0x180>
ffffff0000004ef8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffff0000004efd:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
ffffff0000004f04:	00 00 
ffffff0000004f06:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
ffffff0000004f0d:	00 00 
ffffff0000004f0f:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
ffffff0000004f14:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff0000004f19:	48 c7 44 24 28 03 00 	movq   $0x3,0x28(%rsp)
ffffff0000004f20:	00 00 
ffffff0000004f22:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
ffffff0000004f27:	4c 89 c6             	mov    %r8,%rsi
ffffff0000004f2a:	e8 c1 e5 ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff0000004f2f:	48 39 ca             	cmp    %rcx,%rdx
ffffff0000004f32:	0f 86 94 00 00 00    	jbe    ffffff0000004fcc <core::str::slice_error_fail_rt+0x1ec>
ffffff0000004f38:	48 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%rax
ffffff0000004f3f:	00 
ffffff0000004f40:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
ffffff0000004f45:	48 8b 05 cc 20 00 00 	mov    0x20cc(%rip),%rax        # ffffff0000007018 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa30>
ffffff0000004f4c:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff0000004f51:	48 8d 8c 24 c8 00 00 	lea    0xc8(%rsp),%rcx
ffffff0000004f58:	00 
ffffff0000004f59:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
ffffff0000004f5e:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
ffffff0000004f63:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
ffffff0000004f6a:	00 
ffffff0000004f6b:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
ffffff0000004f70:	48 8d 05 d9 f8 ff ff 	lea    -0x727(%rip),%rax        # ffffff0000004850 <<&T as core::fmt::Display>::fmt>
ffffff0000004f77:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
ffffff0000004f7c:	48 8d 8c 24 a0 00 00 	lea    0xa0(%rsp),%rcx
ffffff0000004f83:	00 
ffffff0000004f84:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
ffffff0000004f89:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
ffffff0000004f8e:	48 8d 05 4b 15 00 00 	lea    0x154b(%rip),%rax        # ffffff00000064e0 <log::LOG_LEVEL_NAMES+0xf0>
ffffff0000004f95:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffff0000004f9a:	48 c7 44 24 18 04 00 	movq   $0x4,0x18(%rsp)
ffffff0000004fa1:	00 00 
ffffff0000004fa3:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
ffffff0000004faa:	00 00 
ffffff0000004fac:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
ffffff0000004fb1:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff0000004fb6:	48 c7 44 24 28 04 00 	movq   $0x4,0x28(%rsp)
ffffff0000004fbd:	00 00 
ffffff0000004fbf:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
ffffff0000004fc4:	4c 89 c6             	mov    %r8,%rsi
ffffff0000004fc7:	e8 24 e5 ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff0000004fcc:	48 85 d2             	test   %rdx,%rdx
ffffff0000004fcf:	0f 94 c0             	sete   %al
ffffff0000004fd2:	48 39 f2             	cmp    %rsi,%rdx
ffffff0000004fd5:	41 0f 93 c1          	setae  %r9b
ffffff0000004fd9:	41 08 c1             	or     %al,%r9b
ffffff0000004fdc:	75 08                	jne    ffffff0000004fe6 <core::str::slice_error_fail_rt+0x206>
ffffff0000004fde:	80 3c 17 c0          	cmpb   $0xc0,(%rdi,%rdx,1)
ffffff0000004fe2:	48 0f 4c ca          	cmovl  %rdx,%rcx
ffffff0000004fe6:	48 89 8c 24 d0 00 00 	mov    %rcx,0xd0(%rsp)
ffffff0000004fed:	00 
ffffff0000004fee:	48 89 f2             	mov    %rsi,%rdx
ffffff0000004ff1:	48 39 f1             	cmp    %rsi,%rcx
ffffff0000004ff4:	73 63                	jae    ffffff0000005059 <core::str::slice_error_fail_rt+0x279>
ffffff0000004ff6:	31 c0                	xor    %eax,%eax
ffffff0000004ff8:	48 89 ca             	mov    %rcx,%rdx
ffffff0000004ffb:	48 83 ea 03          	sub    $0x3,%rdx
ffffff0000004fff:	48 0f 43 c2          	cmovae %rdx,%rax
ffffff0000005003:	4c 8d 49 01          	lea    0x1(%rcx),%r9
ffffff0000005007:	4c 89 ca             	mov    %r9,%rdx
ffffff000000500a:	48 29 c2             	sub    %rax,%rdx
ffffff000000500d:	0f 82 d4 01 00 00    	jb     ffffff00000051e7 <core::str::slice_error_fail_rt+0x407>
ffffff0000005013:	80 3c 0f bf          	cmpb   $0xbf,(%rdi,%rcx,1)
ffffff0000005017:	7e 0f                	jle    ffffff0000005028 <core::str::slice_error_fail_rt+0x248>
ffffff0000005019:	48 ff ca             	dec    %rdx
ffffff000000501c:	eb 38                	jmp    ffffff0000005056 <core::str::slice_error_fail_rt+0x276>
ffffff000000501e:	31 d2                	xor    %edx,%edx
ffffff0000005020:	48 89 c1             	mov    %rax,%rcx
ffffff0000005023:	e8 a8 fd ff ff       	call   ffffff0000004dd0 <core::str::slice_error_fail>
ffffff0000005028:	42 80 7c 0f fe bf    	cmpb   $0xbf,-0x2(%rdi,%r9,1)
ffffff000000502e:	7e 06                	jle    ffffff0000005036 <core::str::slice_error_fail_rt+0x256>
ffffff0000005030:	48 83 c2 fe          	add    $0xfffffffffffffffe,%rdx
ffffff0000005034:	eb 20                	jmp    ffffff0000005056 <core::str::slice_error_fail_rt+0x276>
ffffff0000005036:	42 80 7c 0f fd bf    	cmpb   $0xbf,-0x3(%rdi,%r9,1)
ffffff000000503c:	7e 06                	jle    ffffff0000005044 <core::str::slice_error_fail_rt+0x264>
ffffff000000503e:	48 83 c2 fd          	add    $0xfffffffffffffffd,%rdx
ffffff0000005042:	eb 12                	jmp    ffffff0000005056 <core::str::slice_error_fail_rt+0x276>
ffffff0000005044:	31 c9                	xor    %ecx,%ecx
ffffff0000005046:	42 80 7c 0f fc c0    	cmpb   $0xc0,-0x4(%rdi,%r9,1)
ffffff000000504c:	0f 9d c1             	setge  %cl
ffffff000000504f:	48 01 ca             	add    %rcx,%rdx
ffffff0000005052:	48 83 c2 fb          	add    $0xfffffffffffffffb,%rdx
ffffff0000005056:	48 01 c2             	add    %rax,%rdx
ffffff0000005059:	48 85 d2             	test   %rdx,%rdx
ffffff000000505c:	75 0d                	jne    ffffff000000506b <core::str::slice_error_fail_rt+0x28b>
ffffff000000505e:	48 39 f2             	cmp    %rsi,%rdx
ffffff0000005061:	75 15                	jne    ffffff0000005078 <core::str::slice_error_fail_rt+0x298>
ffffff0000005063:	4c 89 c7             	mov    %r8,%rdi
ffffff0000005066:	e8 b5 fb ff ff       	call   ffffff0000004c20 <core::option::unwrap_failed>
ffffff000000506b:	48 39 f2             	cmp    %rsi,%rdx
ffffff000000506e:	73 1e                	jae    ffffff000000508e <core::str::slice_error_fail_rt+0x2ae>
ffffff0000005070:	80 3c 17 bf          	cmpb   $0xbf,(%rdi,%rdx,1)
ffffff0000005074:	7f e8                	jg     ffffff000000505e <core::str::slice_error_fail_rt+0x27e>
ffffff0000005076:	eb 18                	jmp    ffffff0000005090 <core::str::slice_error_fail_rt+0x2b0>
ffffff0000005078:	0f b6 0c 17          	movzbl (%rdi,%rdx,1),%ecx
ffffff000000507c:	84 c9                	test   %cl,%cl
ffffff000000507e:	78 18                	js     ffffff0000005098 <core::str::slice_error_fail_rt+0x2b8>
ffffff0000005080:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
ffffff0000005084:	b8 01 00 00 00       	mov    $0x1,%eax
ffffff0000005089:	e9 8f 00 00 00       	jmp    ffffff000000511d <core::str::slice_error_fail_rt+0x33d>
ffffff000000508e:	74 ce                	je     ffffff000000505e <core::str::slice_error_fail_rt+0x27e>
ffffff0000005090:	48 89 f1             	mov    %rsi,%rcx
ffffff0000005093:	e8 38 fd ff ff       	call   ffffff0000004dd0 <core::str::slice_error_fail>
ffffff0000005098:	89 c8                	mov    %ecx,%eax
ffffff000000509a:	83 e0 1f             	and    $0x1f,%eax
ffffff000000509d:	44 0f b6 4c 17 01    	movzbl 0x1(%rdi,%rdx,1),%r9d
ffffff00000050a3:	41 83 e1 3f          	and    $0x3f,%r9d
ffffff00000050a7:	80 f9 df             	cmp    $0xdf,%cl
ffffff00000050aa:	76 33                	jbe    ffffff00000050df <core::str::slice_error_fail_rt+0x2ff>
ffffff00000050ac:	0f b6 74 17 02       	movzbl 0x2(%rdi,%rdx,1),%esi
ffffff00000050b1:	41 c1 e1 06          	shl    $0x6,%r9d
ffffff00000050b5:	83 e6 3f             	and    $0x3f,%esi
ffffff00000050b8:	44 09 ce             	or     %r9d,%esi
ffffff00000050bb:	80 f9 f0             	cmp    $0xf0,%cl
ffffff00000050be:	72 29                	jb     ffffff00000050e9 <core::str::slice_error_fail_rt+0x309>
ffffff00000050c0:	0f b6 4c 17 03       	movzbl 0x3(%rdi,%rdx,1),%ecx
ffffff00000050c5:	83 e0 07             	and    $0x7,%eax
ffffff00000050c8:	c1 e0 12             	shl    $0x12,%eax
ffffff00000050cb:	c1 e6 06             	shl    $0x6,%esi
ffffff00000050ce:	83 e1 3f             	and    $0x3f,%ecx
ffffff00000050d1:	09 f1                	or     %esi,%ecx
ffffff00000050d3:	09 c1                	or     %eax,%ecx
ffffff00000050d5:	81 f9 00 00 11 00    	cmp    $0x110000,%ecx
ffffff00000050db:	74 86                	je     ffffff0000005063 <core::str::slice_error_fail_rt+0x283>
ffffff00000050dd:	eb 11                	jmp    ffffff00000050f0 <core::str::slice_error_fail_rt+0x310>
ffffff00000050df:	c1 e0 06             	shl    $0x6,%eax
ffffff00000050e2:	44 09 c8             	or     %r9d,%eax
ffffff00000050e5:	89 c1                	mov    %eax,%ecx
ffffff00000050e7:	eb 07                	jmp    ffffff00000050f0 <core::str::slice_error_fail_rt+0x310>
ffffff00000050e9:	c1 e0 0c             	shl    $0xc,%eax
ffffff00000050ec:	09 c6                	or     %eax,%esi
ffffff00000050ee:	89 f1                	mov    %esi,%ecx
ffffff00000050f0:	89 4c 24 0c          	mov    %ecx,0xc(%rsp)
ffffff00000050f4:	b8 01 00 00 00       	mov    $0x1,%eax
ffffff00000050f9:	81 f9 80 00 00 00    	cmp    $0x80,%ecx
ffffff00000050ff:	72 1c                	jb     ffffff000000511d <core::str::slice_error_fail_rt+0x33d>
ffffff0000005101:	b8 02 00 00 00       	mov    $0x2,%eax
ffffff0000005106:	81 f9 00 08 00 00    	cmp    $0x800,%ecx
ffffff000000510c:	72 0f                	jb     ffffff000000511d <core::str::slice_error_fail_rt+0x33d>
ffffff000000510e:	81 f9 00 00 01 00    	cmp    $0x10000,%ecx
ffffff0000005114:	b8 04 00 00 00       	mov    $0x4,%eax
ffffff0000005119:	48 83 d8 00          	sbb    $0x0,%rax
ffffff000000511d:	48 01 d0             	add    %rdx,%rax
ffffff0000005120:	48 89 94 24 b0 00 00 	mov    %rdx,0xb0(%rsp)
ffffff0000005127:	00 
ffffff0000005128:	48 89 84 24 b8 00 00 	mov    %rax,0xb8(%rsp)
ffffff000000512f:	00 
ffffff0000005130:	48 8d 84 24 d0 00 00 	lea    0xd0(%rsp),%rax
ffffff0000005137:	00 
ffffff0000005138:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
ffffff000000513d:	48 8b 05 d4 1e 00 00 	mov    0x1ed4(%rip),%rax        # ffffff0000007018 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa30>
ffffff0000005144:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
ffffff0000005149:	48 8d 44 24 0c       	lea    0xc(%rsp),%rax
ffffff000000514e:	48 89 44 24 50       	mov    %rax,0x50(%rsp)
ffffff0000005153:	48 8b 05 c6 1e 00 00 	mov    0x1ec6(%rip),%rax        # ffffff0000007020 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051+0xa38>
ffffff000000515a:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
ffffff000000515f:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
ffffff0000005166:	00 
ffffff0000005167:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
ffffff000000516c:	48 8d 05 dd e0 ff ff 	lea    -0x1f23(%rip),%rax        # ffffff0000003250 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
ffffff0000005173:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
ffffff0000005178:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
ffffff000000517f:	00 
ffffff0000005180:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
ffffff0000005185:	48 8d 05 c4 f6 ff ff 	lea    -0x93c(%rip),%rax        # ffffff0000004850 <<&T as core::fmt::Display>::fmt>
ffffff000000518c:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
ffffff0000005191:	48 8d 8c 24 a0 00 00 	lea    0xa0(%rsp),%rcx
ffffff0000005198:	00 
ffffff0000005199:	48 89 8c 24 80 00 00 	mov    %rcx,0x80(%rsp)
ffffff00000051a0:	00 
ffffff00000051a1:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
ffffff00000051a8:	00 
ffffff00000051a9:	48 8d 05 70 13 00 00 	lea    0x1370(%rip),%rax        # ffffff0000006520 <log::LOG_LEVEL_NAMES+0x130>
ffffff00000051b0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffff00000051b5:	48 c7 44 24 18 05 00 	movq   $0x5,0x18(%rsp)
ffffff00000051bc:	00 00 
ffffff00000051be:	48 c7 44 24 30 00 00 	movq   $0x0,0x30(%rsp)
ffffff00000051c5:	00 00 
ffffff00000051c7:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
ffffff00000051cc:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff00000051d1:	48 c7 44 24 28 05 00 	movq   $0x5,0x28(%rsp)
ffffff00000051d8:	00 00 
ffffff00000051da:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
ffffff00000051df:	4c 89 c6             	mov    %r8,%rsi
ffffff00000051e2:	e8 09 e3 ff ff       	call   ffffff00000034f0 <core::panicking::panic_fmt>
ffffff00000051e7:	48 8d 15 b2 13 00 00 	lea    0x13b2(%rip),%rdx        # ffffff00000065a0 <log::LOG_LEVEL_NAMES+0x1b0>
ffffff00000051ee:	48 89 c7             	mov    %rax,%rdi
ffffff00000051f1:	4c 89 ce             	mov    %r9,%rsi
ffffff00000051f4:	e8 c7 fa ff ff       	call   ffffff0000004cc0 <core::slice::index::slice_index_order_fail>
ffffff00000051f9:	cc                   	int3   
ffffff00000051fa:	cc                   	int3   
ffffff00000051fb:	cc                   	int3   
ffffff00000051fc:	cc                   	int3   
ffffff00000051fd:	cc                   	int3   
ffffff00000051fe:	cc                   	int3   
ffffff00000051ff:	cc                   	int3   

ffffff0000005200 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273>:
_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273():
ffffff0000005200:	41 57                	push   %r15
ffffff0000005202:	41 56                	push   %r14
ffffff0000005204:	41 54                	push   %r12
ffffff0000005206:	53                   	push   %rbx
ffffff0000005207:	50                   	push   %rax
ffffff0000005208:	4c 8b 5c 24 30       	mov    0x30(%rsp),%r11
ffffff000000520d:	89 fb                	mov    %edi,%ebx
ffffff000000520f:	c1 eb 08             	shr    $0x8,%ebx
ffffff0000005212:	48 8d 14 56          	lea    (%rsi,%rdx,2),%rdx
ffffff0000005216:	31 c0                	xor    %eax,%eax
ffffff0000005218:	49 89 f7             	mov    %rsi,%r15
ffffff000000521b:	44 0f b6 76 01       	movzbl 0x1(%rsi),%r14d
ffffff0000005220:	48 83 c6 02          	add    $0x2,%rsi
ffffff0000005224:	4e 8d 14 30          	lea    (%rax,%r14,1),%r10
ffffff0000005228:	41 38 1f             	cmp    %bl,(%r15)
ffffff000000522b:	75 43                	jne    ffffff0000005270 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x70>
ffffff000000522d:	49 39 c2             	cmp    %rax,%r10
ffffff0000005230:	0f 82 ad 00 00 00    	jb     ffffff00000052e3 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xe3>
ffffff0000005236:	4d 39 c2             	cmp    %r8,%r10
ffffff0000005239:	0f 87 b6 00 00 00    	ja     ffffff00000052f5 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xf5>
ffffff000000523f:	48 01 c8             	add    %rcx,%rax
ffffff0000005242:	45 31 ff             	xor    %r15d,%r15d
ffffff0000005245:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000524c:	00 00 00 00 
ffffff0000005250:	4d 39 fe             	cmp    %r15,%r14
ffffff0000005253:	74 1d                	je     ffffff0000005272 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x72>
ffffff0000005255:	4d 8d 67 01          	lea    0x1(%r15),%r12
ffffff0000005259:	42 38 3c 38          	cmp    %dil,(%rax,%r15,1)
ffffff000000525d:	4d 89 e7             	mov    %r12,%r15
ffffff0000005260:	75 ee                	jne    ffffff0000005250 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x50>
ffffff0000005262:	eb 6f                	jmp    ffffff00000052d3 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xd3>
ffffff0000005264:	66 66 66 2e 0f 1f 84 	data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000526b:	00 00 00 00 00 
ffffff0000005270:	77 08                	ja     ffffff000000527a <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x7a>
ffffff0000005272:	4c 89 d0             	mov    %r10,%rax
ffffff0000005275:	48 39 d6             	cmp    %rdx,%rsi
ffffff0000005278:	75 9e                	jne    ffffff0000005218 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x18>
ffffff000000527a:	4d 01 cb             	add    %r9,%r11
ffffff000000527d:	0f b7 cf             	movzwl %di,%ecx
ffffff0000005280:	b0 01                	mov    $0x1,%al
ffffff0000005282:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff0000005289:	1f 84 00 00 00 00 00 
ffffff0000005290:	49 8d 71 01          	lea    0x1(%r9),%rsi
ffffff0000005294:	41 0f be 11          	movsbl (%r9),%edx
ffffff0000005298:	85 d2                	test   %edx,%edx
ffffff000000529a:	78 14                	js     ffffff00000052b0 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xb0>
ffffff000000529c:	49 89 f1             	mov    %rsi,%r9
ffffff000000529f:	29 d1                	sub    %edx,%ecx
ffffff00000052a1:	79 27                	jns    ffffff00000052ca <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xca>
ffffff00000052a3:	eb 30                	jmp    ffffff00000052d5 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xd5>
ffffff00000052a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffff00000052ac:	00 00 00 00 
ffffff00000052b0:	4c 39 de             	cmp    %r11,%rsi
ffffff00000052b3:	74 52                	je     ffffff0000005307 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x107>
ffffff00000052b5:	41 0f b6 71 01       	movzbl 0x1(%r9),%esi
ffffff00000052ba:	49 83 c1 02          	add    $0x2,%r9
ffffff00000052be:	83 e2 7f             	and    $0x7f,%edx
ffffff00000052c1:	c1 e2 08             	shl    $0x8,%edx
ffffff00000052c4:	09 f2                	or     %esi,%edx
ffffff00000052c6:	29 d1                	sub    %edx,%ecx
ffffff00000052c8:	78 0b                	js     ffffff00000052d5 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xd5>
ffffff00000052ca:	34 01                	xor    $0x1,%al
ffffff00000052cc:	4d 39 d9             	cmp    %r11,%r9
ffffff00000052cf:	75 bf                	jne    ffffff0000005290 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0x90>
ffffff00000052d1:	eb 02                	jmp    ffffff00000052d5 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273+0xd5>
ffffff00000052d3:	31 c0                	xor    %eax,%eax
ffffff00000052d5:	24 01                	and    $0x1,%al
ffffff00000052d7:	48 83 c4 08          	add    $0x8,%rsp
ffffff00000052db:	5b                   	pop    %rbx
ffffff00000052dc:	41 5c                	pop    %r12
ffffff00000052de:	41 5e                	pop    %r14
ffffff00000052e0:	41 5f                	pop    %r15
ffffff00000052e2:	c3                   	ret    
ffffff00000052e3:	48 8d 15 ce 12 00 00 	lea    0x12ce(%rip),%rdx        # ffffff00000065b8 <log::LOG_LEVEL_NAMES+0x1c8>
ffffff00000052ea:	48 89 c7             	mov    %rax,%rdi
ffffff00000052ed:	4c 89 d6             	mov    %r10,%rsi
ffffff00000052f0:	e8 cb f9 ff ff       	call   ffffff0000004cc0 <core::slice::index::slice_index_order_fail>
ffffff00000052f5:	48 8d 15 bc 12 00 00 	lea    0x12bc(%rip),%rdx        # ffffff00000065b8 <log::LOG_LEVEL_NAMES+0x1c8>
ffffff00000052fc:	4c 89 d7             	mov    %r10,%rdi
ffffff00000052ff:	4c 89 c6             	mov    %r8,%rsi
ffffff0000005302:	e8 a9 f9 ff ff       	call   ffffff0000004cb0 <core::slice::index::slice_end_index_len_fail>
ffffff0000005307:	48 8d 3d c2 12 00 00 	lea    0x12c2(%rip),%rdi        # ffffff00000065d0 <log::LOG_LEVEL_NAMES+0x1e0>
ffffff000000530e:	e8 0d f9 ff ff       	call   ffffff0000004c20 <core::option::unwrap_failed>
ffffff0000005313:	cc                   	int3   
ffffff0000005314:	cc                   	int3   
ffffff0000005315:	cc                   	int3   
ffffff0000005316:	cc                   	int3   
ffffff0000005317:	cc                   	int3   
ffffff0000005318:	cc                   	int3   
ffffff0000005319:	cc                   	int3   
ffffff000000531a:	cc                   	int3   
ffffff000000531b:	cc                   	int3   
ffffff000000531c:	cc                   	int3   
ffffff000000531d:	cc                   	int3   
ffffff000000531e:	cc                   	int3   
ffffff000000531f:	cc                   	int3   

ffffff0000005320 <core::unicode::printable::is_printable>:
core::unicode::printable::is_printable:
ffffff0000005320:	50                   	push   %rax
ffffff0000005321:	83 ff 20             	cmp    $0x20,%edi
ffffff0000005324:	73 04                	jae    ffffff000000532a <core::unicode::printable::is_printable+0xa>
ffffff0000005326:	31 c0                	xor    %eax,%eax
ffffff0000005328:	59                   	pop    %rcx
ffffff0000005329:	c3                   	ret    
ffffff000000532a:	b0 01                	mov    $0x1,%al
ffffff000000532c:	83 ff 7f             	cmp    $0x7f,%edi
ffffff000000532f:	73 02                	jae    ffffff0000005333 <core::unicode::printable::is_printable+0x13>
ffffff0000005331:	59                   	pop    %rcx
ffffff0000005332:	c3                   	ret    
ffffff0000005333:	81 ff 00 00 01 00    	cmp    $0x10000,%edi
ffffff0000005339:	73 2f                	jae    ffffff000000536a <core::unicode::printable::is_printable+0x4a>
ffffff000000533b:	48 c7 04 24 29 01 00 	movq   $0x129,(%rsp)
ffffff0000005342:	00 
ffffff0000005343:	48 8d 35 f3 bc ff ff 	lea    -0x430d(%rip),%rsi        # ffffff000000103d <anon.4dbf942ad903d88a12c3117b08182f96.26.llvm.13087818523766432273>
ffffff000000534a:	48 8d 0d 3c bd ff ff 	lea    -0x42c4(%rip),%rcx        # ffffff000000108d <anon.4dbf942ad903d88a12c3117b08182f96.27.llvm.13087818523766432273>
ffffff0000005351:	4c 8d 0d 57 be ff ff 	lea    -0x41a9(%rip),%r9        # ffffff00000011af <anon.4dbf942ad903d88a12c3117b08182f96.28.llvm.13087818523766432273>
ffffff0000005358:	ba 28 00 00 00       	mov    $0x28,%edx
ffffff000000535d:	41 b8 22 01 00 00    	mov    $0x122,%r8d
ffffff0000005363:	e8 98 fe ff ff       	call   ffffff0000005200 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273>
ffffff0000005368:	59                   	pop    %rcx
ffffff0000005369:	c3                   	ret    
ffffff000000536a:	81 ff 00 00 02 00    	cmp    $0x20000,%edi
ffffff0000005370:	73 2f                	jae    ffffff00000053a1 <core::unicode::printable::is_printable+0x81>
ffffff0000005372:	48 c7 04 24 e6 01 00 	movq   $0x1e6,(%rsp)
ffffff0000005379:	00 
ffffff000000537a:	48 8d 35 ae b9 ff ff 	lea    -0x4652(%rip),%rsi        # ffffff0000000d2f <anon.4dbf942ad903d88a12c3117b08182f96.23.llvm.13087818523766432273>
ffffff0000005381:	48 8d 0d ff b9 ff ff 	lea    -0x4601(%rip),%rcx        # ffffff0000000d87 <anon.4dbf942ad903d88a12c3117b08182f96.24.llvm.13087818523766432273>
ffffff0000005388:	4c 8d 0d c8 ba ff ff 	lea    -0x4538(%rip),%r9        # ffffff0000000e57 <anon.4dbf942ad903d88a12c3117b08182f96.25.llvm.13087818523766432273>
ffffff000000538f:	ba 2c 00 00 00       	mov    $0x2c,%edx
ffffff0000005394:	41 b8 d0 00 00 00    	mov    $0xd0,%r8d
ffffff000000539a:	e8 61 fe ff ff       	call   ffffff0000005200 <_ZN4core7unicode9printable5check17hd44826746307b396E.llvm.13087818523766432273>
ffffff000000539f:	59                   	pop    %rcx
ffffff00000053a0:	c3                   	ret    
ffffff00000053a1:	89 f8                	mov    %edi,%eax
ffffff00000053a3:	25 e0 ff 1f 00       	and    $0x1fffe0,%eax
ffffff00000053a8:	3d e0 a6 02 00       	cmp    $0x2a6e0,%eax
ffffff00000053ad:	0f 95 c0             	setne  %al
ffffff00000053b0:	8d 8f c0 48 fd ff    	lea    -0x2b740(%rdi),%ecx
ffffff00000053b6:	83 f9 fa             	cmp    $0xfffffffa,%ecx
ffffff00000053b9:	0f 92 c1             	setb   %cl
ffffff00000053bc:	89 fa                	mov    %edi,%edx
ffffff00000053be:	81 e2 fe ff 1f 00    	and    $0x1ffffe,%edx
ffffff00000053c4:	81 fa 1e b8 02 00    	cmp    $0x2b81e,%edx
ffffff00000053ca:	0f 95 c2             	setne  %dl
ffffff00000053cd:	20 c2                	and    %al,%dl
ffffff00000053cf:	8d 87 50 31 fd ff    	lea    -0x2ceb0(%rdi),%eax
ffffff00000053d5:	83 f8 f2             	cmp    $0xfffffff2,%eax
ffffff00000053d8:	0f 92 c0             	setb   %al
ffffff00000053db:	20 c8                	and    %cl,%al
ffffff00000053dd:	20 d0                	and    %dl,%al
ffffff00000053df:	8d 8f 10 14 fd ff    	lea    -0x2ebf0(%rdi),%ecx
ffffff00000053e5:	83 f9 f1             	cmp    $0xfffffff1,%ecx
ffffff00000053e8:	0f 92 c1             	setb   %cl
ffffff00000053eb:	8d 97 00 08 fd ff    	lea    -0x2f800(%rdi),%edx
ffffff00000053f1:	81 fa 5e f6 ff ff    	cmp    $0xfffff65e,%edx
ffffff00000053f7:	0f 92 c2             	setb   %dl
ffffff00000053fa:	20 ca                	and    %cl,%dl
ffffff00000053fc:	8d 8f 00 00 fd ff    	lea    -0x30000(%rdi),%ecx
ffffff0000005402:	81 f9 1e fa ff ff    	cmp    $0xfffffa1e,%ecx
ffffff0000005408:	0f 92 c1             	setb   %cl
ffffff000000540b:	20 d1                	and    %dl,%cl
ffffff000000540d:	20 c1                	and    %al,%cl
ffffff000000540f:	8d 87 b0 ec fc ff    	lea    -0x31350(%rdi),%eax
ffffff0000005415:	83 f8 fb             	cmp    $0xfffffffb,%eax
ffffff0000005418:	0f 92 c0             	setb   %al
ffffff000000541b:	8d 97 00 ff f1 ff    	lea    -0xe0100(%rdi),%edx
ffffff0000005421:	81 fa b0 22 f5 ff    	cmp    $0xfff522b0,%edx
ffffff0000005427:	0f 92 c2             	setb   %dl
ffffff000000542a:	20 c2                	and    %al,%dl
ffffff000000542c:	81 ff f0 01 0e 00    	cmp    $0xe01f0,%edi
ffffff0000005432:	0f 92 c0             	setb   %al
ffffff0000005435:	20 d0                	and    %dl,%al
ffffff0000005437:	20 c8                	and    %cl,%al
ffffff0000005439:	59                   	pop    %rcx
ffffff000000543a:	c3                   	ret    
ffffff000000543b:	cc                   	int3   
ffffff000000543c:	cc                   	int3   
ffffff000000543d:	cc                   	int3   
ffffff000000543e:	cc                   	int3   
ffffff000000543f:	cc                   	int3   

ffffff0000005440 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>:
<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str:
ffffff0000005440:	55                   	push   %rbp
ffffff0000005441:	41 57                	push   %r15
ffffff0000005443:	41 56                	push   %r14
ffffff0000005445:	41 55                	push   %r13
ffffff0000005447:	41 54                	push   %r12
ffffff0000005449:	53                   	push   %rbx
ffffff000000544a:	48 83 ec 38          	sub    $0x38,%rsp
ffffff000000544e:	48 bd 80 80 80 80 80 	movabs $0x8080808080808080,%rbp
ffffff0000005455:	80 80 80 
ffffff0000005458:	49 be 0a 0a 0a 0a 0a 	movabs $0xa0a0a0a0a0a0a0a,%r14
ffffff000000545f:	0a 0a 0a 
ffffff0000005462:	48 8b 47 10          	mov    0x10(%rdi),%rax
ffffff0000005466:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff000000546b:	48 8b 07             	mov    (%rdi),%rax
ffffff000000546e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
ffffff0000005473:	48 8b 47 08          	mov    0x8(%rdi),%rax
ffffff0000005477:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffff000000547c:	48 89 34 24          	mov    %rsi,(%rsp)
ffffff0000005480:	48 8d 46 08          	lea    0x8(%rsi),%rax
ffffff0000005484:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
ffffff0000005489:	45 31 ff             	xor    %r15d,%r15d
ffffff000000548c:	45 31 e4             	xor    %r12d,%r12d
ffffff000000548f:	48 c7 44 24 28 00 00 	movq   $0x0,0x28(%rsp)
ffffff0000005496:	00 00 
ffffff0000005498:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffff000000549d:	eb 40                	jmp    ffffff00000054df <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x9f>
ffffff000000549f:	90                   	nop
ffffff00000054a0:	41 80 7c 2b ff 0a    	cmpb   $0xa,-0x1(%r11,%rbp,1)
ffffff00000054a6:	0f 94 c0             	sete   %al
ffffff00000054a9:	4c 29 fd             	sub    %r15,%rbp
ffffff00000054ac:	4d 01 df             	add    %r11,%r15
ffffff00000054af:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffff00000054b4:	88 01                	mov    %al,(%rcx)
ffffff00000054b6:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffff00000054bb:	4c 89 fe             	mov    %r15,%rsi
ffffff00000054be:	48 89 ea             	mov    %rbp,%rdx
ffffff00000054c1:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff00000054c6:	ff 50 18             	call   *0x18(%rax)
ffffff00000054c9:	4d 89 ef             	mov    %r13,%r15
ffffff00000054cc:	84 c0                	test   %al,%al
ffffff00000054ce:	4c 89 f5             	mov    %r14,%rbp
ffffff00000054d1:	49 89 de             	mov    %rbx,%r14
ffffff00000054d4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffff00000054d9:	0f 85 de 01 00 00    	jne    ffffff00000056bd <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x27d>
ffffff00000054df:	f6 44 24 28 01       	testb  $0x1,0x28(%rsp)
ffffff00000054e4:	0f 85 cf 01 00 00    	jne    ffffff00000056b9 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x279>
ffffff00000054ea:	4c 39 e2             	cmp    %r12,%rdx
ffffff00000054ed:	73 11                	jae    ffffff0000005500 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0xc0>
ffffff00000054ef:	4d 89 e5             	mov    %r12,%r13
ffffff00000054f2:	4c 8b 1c 24          	mov    (%rsp),%r11
ffffff00000054f6:	e9 68 01 00 00       	jmp    ffffff0000005663 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x223>
ffffff00000054fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffff0000005500:	4c 8b 1c 24          	mov    (%rsp),%r11
ffffff0000005504:	eb 16                	jmp    ffffff000000551c <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0xdc>
ffffff0000005506:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffff000000550d:	00 00 00 
ffffff0000005510:	4d 89 ec             	mov    %r13,%r12
ffffff0000005513:	4c 39 ea             	cmp    %r13,%rdx
ffffff0000005516:	0f 82 47 01 00 00    	jb     ffffff0000005663 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x223>
ffffff000000551c:	48 89 d1             	mov    %rdx,%rcx
ffffff000000551f:	4c 29 e1             	sub    %r12,%rcx
ffffff0000005522:	4b 8d 04 23          	lea    (%r11,%r12,1),%rax
ffffff0000005526:	48 83 f9 0f          	cmp    $0xf,%rcx
ffffff000000552a:	77 34                	ja     ffffff0000005560 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x120>
ffffff000000552c:	4c 39 e2             	cmp    %r12,%rdx
ffffff000000552f:	0f 84 2b 01 00 00    	je     ffffff0000005660 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x220>
ffffff0000005535:	31 f6                	xor    %esi,%esi
ffffff0000005537:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffff000000553e:	00 00 
ffffff0000005540:	80 3c 30 0a          	cmpb   $0xa,(%rax,%rsi,1)
ffffff0000005544:	0f 84 e6 00 00 00    	je     ffffff0000005630 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1f0>
ffffff000000554a:	48 ff c6             	inc    %rsi
ffffff000000554d:	48 39 f1             	cmp    %rsi,%rcx
ffffff0000005550:	75 ee                	jne    ffffff0000005540 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x100>
ffffff0000005552:	e9 09 01 00 00       	jmp    ffffff0000005660 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x220>
ffffff0000005557:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffff000000555e:	00 00 
ffffff0000005560:	48 8d 58 07          	lea    0x7(%rax),%rbx
ffffff0000005564:	48 83 e3 f8          	and    $0xfffffffffffffff8,%rbx
ffffff0000005568:	48 29 c3             	sub    %rax,%rbx
ffffff000000556b:	75 63                	jne    ffffff00000055d0 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x190>
ffffff000000556d:	48 8d 71 f0          	lea    -0x10(%rcx),%rsi
ffffff0000005571:	31 db                	xor    %ebx,%ebx
ffffff0000005573:	48 ba 00 01 01 01 01 	movabs $0x101010101010100,%rdx
ffffff000000557a:	01 01 01 
ffffff000000557d:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
ffffff0000005582:	4c 01 e7             	add    %r12,%rdi
ffffff0000005585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000558c:	00 00 00 00 
ffffff0000005590:	4c 8b 44 1f f8       	mov    -0x8(%rdi,%rbx,1),%r8
ffffff0000005595:	4d 89 c1             	mov    %r8,%r9
ffffff0000005598:	4d 31 f1             	xor    %r14,%r9
ffffff000000559b:	49 89 d2             	mov    %rdx,%r10
ffffff000000559e:	4d 29 ca             	sub    %r9,%r10
ffffff00000055a1:	4d 09 c2             	or     %r8,%r10
ffffff00000055a4:	4c 8b 04 1f          	mov    (%rdi,%rbx,1),%r8
ffffff00000055a8:	4d 31 f0             	xor    %r14,%r8
ffffff00000055ab:	49 89 d1             	mov    %rdx,%r9
ffffff00000055ae:	4d 29 c1             	sub    %r8,%r9
ffffff00000055b1:	4d 09 c1             	or     %r8,%r9
ffffff00000055b4:	49 21 ea             	and    %rbp,%r10
ffffff00000055b7:	4d 21 ca             	and    %r9,%r10
ffffff00000055ba:	49 39 ea             	cmp    %rbp,%r10
ffffff00000055bd:	75 51                	jne    ffffff0000005610 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1d0>
ffffff00000055bf:	48 83 c3 10          	add    $0x10,%rbx
ffffff00000055c3:	48 39 f3             	cmp    %rsi,%rbx
ffffff00000055c6:	76 c8                	jbe    ffffff0000005590 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x150>
ffffff00000055c8:	eb 46                	jmp    ffffff0000005610 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1d0>
ffffff00000055ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffff00000055d0:	31 f6                	xor    %esi,%esi
ffffff00000055d2:	66 66 66 66 66 2e 0f 	data16 data16 data16 data16 cs nopw 0x0(%rax,%rax,1)
ffffff00000055d9:	1f 84 00 00 00 00 00 
ffffff00000055e0:	80 3c 30 0a          	cmpb   $0xa,(%rax,%rsi,1)
ffffff00000055e4:	74 4a                	je     ffffff0000005630 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1f0>
ffffff00000055e6:	48 ff c6             	inc    %rsi
ffffff00000055e9:	48 39 f3             	cmp    %rsi,%rbx
ffffff00000055ec:	75 f2                	jne    ffffff00000055e0 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1a0>
ffffff00000055ee:	48 8d 71 f0          	lea    -0x10(%rcx),%rsi
ffffff00000055f2:	48 39 f3             	cmp    %rsi,%rbx
ffffff00000055f5:	48 ba 00 01 01 01 01 	movabs $0x101010101010100,%rdx
ffffff00000055fc:	01 01 01 
ffffff00000055ff:	0f 86 78 ff ff ff    	jbe    ffffff000000557d <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x13d>
ffffff0000005605:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffff000000560c:	00 00 00 00 
ffffff0000005610:	48 89 de             	mov    %rbx,%rsi
ffffff0000005613:	48 39 d9             	cmp    %rbx,%rcx
ffffff0000005616:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffff000000561b:	74 43                	je     ffffff0000005660 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x220>
ffffff000000561d:	0f 1f 00             	nopl   (%rax)
ffffff0000005620:	80 3c 30 0a          	cmpb   $0xa,(%rax,%rsi,1)
ffffff0000005624:	74 0a                	je     ffffff0000005630 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1f0>
ffffff0000005626:	48 ff c6             	inc    %rsi
ffffff0000005629:	48 39 f1             	cmp    %rsi,%rcx
ffffff000000562c:	75 f2                	jne    ffffff0000005620 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x1e0>
ffffff000000562e:	eb 30                	jmp    ffffff0000005660 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x220>
ffffff0000005630:	4d 8d 2c 34          	lea    (%r12,%rsi,1),%r13
ffffff0000005634:	49 ff c5             	inc    %r13
ffffff0000005637:	49 01 f4             	add    %rsi,%r12
ffffff000000563a:	49 39 d4             	cmp    %rdx,%r12
ffffff000000563d:	0f 83 cd fe ff ff    	jae    ffffff0000005510 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0xd0>
ffffff0000005643:	80 3c 06 0a          	cmpb   $0xa,(%rsi,%rax,1)
ffffff0000005647:	0f 85 c3 fe ff ff    	jne    ffffff0000005510 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0xd0>
ffffff000000564d:	4c 89 f3             	mov    %r14,%rbx
ffffff0000005650:	49 89 ee             	mov    %rbp,%r14
ffffff0000005653:	4d 89 ec             	mov    %r13,%r12
ffffff0000005656:	4c 89 ed             	mov    %r13,%rbp
ffffff0000005659:	eb 23                	jmp    ffffff000000567e <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x23e>
ffffff000000565b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffff0000005660:	49 89 d5             	mov    %rdx,%r13
ffffff0000005663:	4c 89 f3             	mov    %r14,%rbx
ffffff0000005666:	49 89 ee             	mov    %rbp,%r14
ffffff0000005669:	4d 89 ec             	mov    %r13,%r12
ffffff000000566c:	b0 01                	mov    $0x1,%al
ffffff000000566e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffff0000005673:	4d 89 fd             	mov    %r15,%r13
ffffff0000005676:	48 89 d5             	mov    %rdx,%rbp
ffffff0000005679:	4c 39 fa             	cmp    %r15,%rdx
ffffff000000567c:	74 3b                	je     ffffff00000056b9 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x279>
ffffff000000567e:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffff0000005683:	80 38 00             	cmpb   $0x0,(%rax)
ffffff0000005686:	74 21                	je     ffffff00000056a9 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x269>
ffffff0000005688:	ba 04 00 00 00       	mov    $0x4,%edx
ffffff000000568d:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffff0000005692:	48 8d 35 9d aa ff ff 	lea    -0x5563(%rip),%rsi        # ffffff0000000136 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x10>
ffffff0000005699:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff000000569e:	ff 50 18             	call   *0x18(%rax)
ffffff00000056a1:	4c 8b 1c 24          	mov    (%rsp),%r11
ffffff00000056a5:	84 c0                	test   %al,%al
ffffff00000056a7:	75 14                	jne    ffffff00000056bd <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x27d>
ffffff00000056a9:	4c 39 fd             	cmp    %r15,%rbp
ffffff00000056ac:	0f 85 ee fd ff ff    	jne    ffffff00000054a0 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x60>
ffffff00000056b2:	31 c0                	xor    %eax,%eax
ffffff00000056b4:	e9 f0 fd ff ff       	jmp    ffffff00000054a9 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x69>
ffffff00000056b9:	31 c0                	xor    %eax,%eax
ffffff00000056bb:	eb 02                	jmp    ffffff00000056bf <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str+0x27f>
ffffff00000056bd:	b0 01                	mov    $0x1,%al
ffffff00000056bf:	48 83 c4 38          	add    $0x38,%rsp
ffffff00000056c3:	5b                   	pop    %rbx
ffffff00000056c4:	41 5c                	pop    %r12
ffffff00000056c6:	41 5d                	pop    %r13
ffffff00000056c8:	41 5e                	pop    %r14
ffffff00000056ca:	41 5f                	pop    %r15
ffffff00000056cc:	5d                   	pop    %rbp
ffffff00000056cd:	c3                   	ret    
ffffff00000056ce:	cc                   	int3   
ffffff00000056cf:	cc                   	int3   

ffffff00000056d0 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_char>:
<core::fmt::builders::PadAdapter as core::fmt::Write>::write_char:
ffffff00000056d0:	55                   	push   %rbp
ffffff00000056d1:	41 57                	push   %r15
ffffff00000056d3:	41 56                	push   %r14
ffffff00000056d5:	53                   	push   %rbx
ffffff00000056d6:	50                   	push   %rax
ffffff00000056d7:	4c 8b 77 10          	mov    0x10(%rdi),%r14
ffffff00000056db:	48 8b 1f             	mov    (%rdi),%rbx
ffffff00000056de:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
ffffff00000056e2:	41 80 3e 00          	cmpb   $0x0,(%r14)
ffffff00000056e6:	74 2b                	je     ffffff0000005713 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_char+0x43>
ffffff00000056e8:	48 8d 05 47 aa ff ff 	lea    -0x55b9(%rip),%rax        # ffffff0000000136 <anon.a3833c486386bd6a8cad30d19d8ae92e.12.llvm.11412667768712930044+0x10>
ffffff00000056ef:	ba 04 00 00 00       	mov    $0x4,%edx
ffffff00000056f4:	48 89 df             	mov    %rbx,%rdi
ffffff00000056f7:	89 f5                	mov    %esi,%ebp
ffffff00000056f9:	48 89 c6             	mov    %rax,%rsi
ffffff00000056fc:	41 ff 57 18          	call   *0x18(%r15)
ffffff0000005700:	89 ee                	mov    %ebp,%esi
ffffff0000005702:	84 c0                	test   %al,%al
ffffff0000005704:	74 0d                	je     ffffff0000005713 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_char+0x43>
ffffff0000005706:	b0 01                	mov    $0x1,%al
ffffff0000005708:	48 83 c4 08          	add    $0x8,%rsp
ffffff000000570c:	5b                   	pop    %rbx
ffffff000000570d:	41 5e                	pop    %r14
ffffff000000570f:	41 5f                	pop    %r15
ffffff0000005711:	5d                   	pop    %rbp
ffffff0000005712:	c3                   	ret    
ffffff0000005713:	83 fe 0a             	cmp    $0xa,%esi
ffffff0000005716:	41 0f 94 06          	sete   (%r14)
ffffff000000571a:	49 8b 47 20          	mov    0x20(%r15),%rax
ffffff000000571e:	48 89 df             	mov    %rbx,%rdi
ffffff0000005721:	48 83 c4 08          	add    $0x8,%rsp
ffffff0000005725:	5b                   	pop    %rbx
ffffff0000005726:	41 5e                	pop    %r14
ffffff0000005728:	41 5f                	pop    %r15
ffffff000000572a:	5d                   	pop    %rbp
ffffff000000572b:	ff e0                	jmp    *%rax
ffffff000000572d:	cc                   	int3   
ffffff000000572e:	cc                   	int3   
ffffff000000572f:	cc                   	int3   

ffffff0000005730 <core::fmt::builders::DebugStruct::field>:
core::fmt::builders::DebugStruct::field:
ffffff0000005730:	55                   	push   %rbp
ffffff0000005731:	41 57                	push   %r15
ffffff0000005733:	41 56                	push   %r14
ffffff0000005735:	41 55                	push   %r13
ffffff0000005737:	41 54                	push   %r12
ffffff0000005739:	53                   	push   %rbx
ffffff000000573a:	48 83 ec 48          	sub    $0x48,%rsp
ffffff000000573e:	48 89 fb             	mov    %rdi,%rbx
ffffff0000005741:	40 b5 01             	mov    $0x1,%bpl
ffffff0000005744:	80 7f 08 00          	cmpb   $0x0,0x8(%rdi)
ffffff0000005748:	0f 85 44 01 00 00    	jne    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff000000574e:	49 89 ce             	mov    %rcx,%r14
ffffff0000005751:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
ffffff0000005756:	4c 8b 3b             	mov    (%rbx),%r15
ffffff0000005759:	41 f6 47 12 80       	testb  $0x80,0x12(%r15)
ffffff000000575e:	0f b6 43 09          	movzbl 0x9(%rbx),%eax
ffffff0000005762:	0f 85 81 00 00 00    	jne    ffffff00000057e9 <core::fmt::builders::DebugStruct::field+0xb9>
ffffff0000005768:	49 89 f5             	mov    %rsi,%r13
ffffff000000576b:	49 89 d4             	mov    %rdx,%r12
ffffff000000576e:	0f b6 d0             	movzbl %al,%edx
ffffff0000005771:	48 83 f2 03          	xor    $0x3,%rdx
ffffff0000005775:	48 8d 0d 5f bb ff ff 	lea    -0x44a1(%rip),%rcx        # ffffff00000012db <anon.451ba7122ea5ee56ce5542689b8bca16.14.llvm.3806639450086334051>
ffffff000000577c:	48 8d 35 55 bb ff ff 	lea    -0x44ab(%rip),%rsi        # ffffff00000012d8 <anon.451ba7122ea5ee56ce5542689b8bca16.13.llvm.3806639450086334051>
ffffff0000005783:	84 c0                	test   %al,%al
ffffff0000005785:	48 0f 45 f1          	cmovne %rcx,%rsi
ffffff0000005789:	49 8b 3f             	mov    (%r15),%rdi
ffffff000000578c:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffff0000005790:	ff 50 18             	call   *0x18(%rax)
ffffff0000005793:	40 b5 01             	mov    $0x1,%bpl
ffffff0000005796:	84 c0                	test   %al,%al
ffffff0000005798:	0f 85 f4 00 00 00    	jne    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff000000579e:	49 8b 3f             	mov    (%r15),%rdi
ffffff00000057a1:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffff00000057a5:	4c 89 ee             	mov    %r13,%rsi
ffffff00000057a8:	4c 89 e2             	mov    %r12,%rdx
ffffff00000057ab:	ff 50 18             	call   *0x18(%rax)
ffffff00000057ae:	84 c0                	test   %al,%al
ffffff00000057b0:	0f 85 dc 00 00 00    	jne    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff00000057b6:	49 8b 3f             	mov    (%r15),%rdi
ffffff00000057b9:	49 8b 47 08          	mov    0x8(%r15),%rax
ffffff00000057bd:	48 8d 35 19 bb ff ff 	lea    -0x44e7(%rip),%rsi        # ffffff00000012dd <anon.451ba7122ea5ee56ce5542689b8bca16.15.llvm.3806639450086334051>
ffffff00000057c4:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff00000057c9:	ff 50 18             	call   *0x18(%rax)
ffffff00000057cc:	84 c0                	test   %al,%al
ffffff00000057ce:	0f 85 be 00 00 00    	jne    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff00000057d4:	4c 89 f7             	mov    %r14,%rdi
ffffff00000057d7:	4c 89 fe             	mov    %r15,%rsi
ffffff00000057da:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff00000057df:	ff 50 18             	call   *0x18(%rax)
ffffff00000057e2:	89 c5                	mov    %eax,%ebp
ffffff00000057e4:	e9 a9 00 00 00       	jmp    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff00000057e9:	84 c0                	test   %al,%al
ffffff00000057eb:	75 2c                	jne    ffffff0000005819 <core::fmt::builders::DebugStruct::field+0xe9>
ffffff00000057ed:	49 8b 3f             	mov    (%r15),%rdi
ffffff00000057f0:	49 8b 4f 08          	mov    0x8(%r15),%rcx
ffffff00000057f4:	48 8d 05 e4 ba ff ff 	lea    -0x451c(%rip),%rax        # ffffff00000012df <anon.451ba7122ea5ee56ce5542689b8bca16.16.llvm.3806639450086334051>
ffffff00000057fb:	49 89 d4             	mov    %rdx,%r12
ffffff00000057fe:	ba 03 00 00 00       	mov    $0x3,%edx
ffffff0000005803:	49 89 f5             	mov    %rsi,%r13
ffffff0000005806:	48 89 c6             	mov    %rax,%rsi
ffffff0000005809:	ff 51 18             	call   *0x18(%rcx)
ffffff000000580c:	4c 89 ee             	mov    %r13,%rsi
ffffff000000580f:	4c 89 e2             	mov    %r12,%rdx
ffffff0000005812:	40 b5 01             	mov    $0x1,%bpl
ffffff0000005815:	84 c0                	test   %al,%al
ffffff0000005817:	75 79                	jne    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff0000005819:	c6 44 24 0f 01       	movb   $0x1,0xf(%rsp)
ffffff000000581e:	49 8b 07             	mov    (%r15),%rax
ffffff0000005821:	49 8b 4f 08          	mov    0x8(%r15),%rcx
ffffff0000005825:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
ffffff000000582a:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
ffffff000000582f:	48 8d 44 24 0f       	lea    0xf(%rsp),%rax
ffffff0000005834:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
ffffff0000005839:	49 8b 47 10          	mov    0x10(%r15),%rax
ffffff000000583d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
ffffff0000005842:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
ffffff0000005847:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
ffffff000000584c:	48 8d 05 95 0d 00 00 	lea    0xd95(%rip),%rax        # ffffff00000065e8 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051>
ffffff0000005853:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
ffffff0000005858:	e8 e3 fb ff ff       	call   ffffff0000005440 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
ffffff000000585d:	84 c0                	test   %al,%al
ffffff000000585f:	75 2e                	jne    ffffff000000588f <core::fmt::builders::DebugStruct::field+0x15f>
ffffff0000005861:	48 8d 35 75 ba ff ff 	lea    -0x458b(%rip),%rsi        # ffffff00000012dd <anon.451ba7122ea5ee56ce5542689b8bca16.15.llvm.3806639450086334051>
ffffff0000005868:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
ffffff000000586d:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff0000005872:	e8 c9 fb ff ff       	call   ffffff0000005440 <<core::fmt::builders::PadAdapter as core::fmt::Write>::write_str>
ffffff0000005877:	84 c0                	test   %al,%al
ffffff0000005879:	75 14                	jne    ffffff000000588f <core::fmt::builders::DebugStruct::field+0x15f>
ffffff000000587b:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
ffffff0000005880:	4c 89 f7             	mov    %r14,%rdi
ffffff0000005883:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
ffffff0000005888:	ff 50 18             	call   *0x18(%rax)
ffffff000000588b:	84 c0                	test   %al,%al
ffffff000000588d:	74 1d                	je     ffffff00000058ac <core::fmt::builders::DebugStruct::field+0x17c>
ffffff000000588f:	40 b5 01             	mov    $0x1,%bpl
ffffff0000005892:	40 88 6b 08          	mov    %bpl,0x8(%rbx)
ffffff0000005896:	c6 43 09 01          	movb   $0x1,0x9(%rbx)
ffffff000000589a:	48 89 d8             	mov    %rbx,%rax
ffffff000000589d:	48 83 c4 48          	add    $0x48,%rsp
ffffff00000058a1:	5b                   	pop    %rbx
ffffff00000058a2:	41 5c                	pop    %r12
ffffff00000058a4:	41 5d                	pop    %r13
ffffff00000058a6:	41 5e                	pop    %r14
ffffff00000058a8:	41 5f                	pop    %r15
ffffff00000058aa:	5d                   	pop    %rbp
ffffff00000058ab:	c3                   	ret    
ffffff00000058ac:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffff00000058b1:	48 8b 44 24 20       	mov    0x20(%rsp),%rax
ffffff00000058b6:	48 8d 35 25 ba ff ff 	lea    -0x45db(%rip),%rsi        # ffffff00000012e2 <anon.451ba7122ea5ee56ce5542689b8bca16.17.llvm.3806639450086334051>
ffffff00000058bd:	ba 02 00 00 00       	mov    $0x2,%edx
ffffff00000058c2:	ff 50 18             	call   *0x18(%rax)
ffffff00000058c5:	89 c5                	mov    %eax,%ebp
ffffff00000058c7:	eb c9                	jmp    ffffff0000005892 <core::fmt::builders::DebugStruct::field+0x162>
ffffff00000058c9:	cc                   	int3   
ffffff00000058ca:	cc                   	int3   
ffffff00000058cb:	cc                   	int3   
ffffff00000058cc:	cc                   	int3   
ffffff00000058cd:	cc                   	int3   
ffffff00000058ce:	cc                   	int3   
ffffff00000058cf:	cc                   	int3   

ffffff00000058d0 <_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051>:
_ZN4core3fmt5Write9write_fmt17h69b0072a7572d136E.llvm.3806639450086334051():
ffffff00000058d0:	48 89 f2             	mov    %rsi,%rdx
ffffff00000058d3:	48 8d 35 0e 0d 00 00 	lea    0xd0e(%rip),%rsi        # ffffff00000065e8 <anon.451ba7122ea5ee56ce5542689b8bca16.11.llvm.3806639450086334051>
ffffff00000058da:	e9 f1 de ff ff       	jmp    ffffff00000037d0 <core::fmt::write>
